/*
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.0
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TransactionCaptureRequest A request to capture a transaction.
type TransactionCaptureRequest struct {
	// The (partial) amount to capture.  When left blank, this will capture the entire amount.
	Amount float32 `json:"amount"`
	// A supported ISO-4217 currency code. 
	Currency string `json:"currency"`
	// An external identifier that can be used to match the transaction against your own records.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
}

// NewTransactionCaptureRequest instantiates a new TransactionCaptureRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionCaptureRequest(amount float32, currency string) *TransactionCaptureRequest {
	this := TransactionCaptureRequest{}
	this.Amount = amount
	this.Currency = currency
	return &this
}

// NewTransactionCaptureRequestWithDefaults instantiates a new TransactionCaptureRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionCaptureRequestWithDefaults() *TransactionCaptureRequest {
	this := TransactionCaptureRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *TransactionCaptureRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionCaptureRequest) GetAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionCaptureRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *TransactionCaptureRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransactionCaptureRequest) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransactionCaptureRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise.
func (o *TransactionCaptureRequest) GetExternalIdentifier() string {
	if o == nil || o.ExternalIdentifier == nil {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionCaptureRequest) GetExternalIdentifierOk() (*string, bool) {
	if o == nil || o.ExternalIdentifier == nil {
		return nil, false
	}
	return o.ExternalIdentifier, true
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *TransactionCaptureRequest) HasExternalIdentifier() bool {
	if o != nil && o.ExternalIdentifier != nil {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given string and assigns it to the ExternalIdentifier field.
func (o *TransactionCaptureRequest) SetExternalIdentifier(v string) {
	o.ExternalIdentifier = &v
}

func (o TransactionCaptureRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	if o.ExternalIdentifier != nil {
		toSerialize["external_identifier"] = o.ExternalIdentifier
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionCaptureRequest struct {
	value *TransactionCaptureRequest
	isSet bool
}

func (v NullableTransactionCaptureRequest) Get() *TransactionCaptureRequest {
	return v.value
}

func (v *NullableTransactionCaptureRequest) Set(val *TransactionCaptureRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionCaptureRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionCaptureRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionCaptureRequest(val *TransactionCaptureRequest) *NullableTransactionCaptureRequest {
	return &NullableTransactionCaptureRequest{value: val, isSet: true}
}

func (v NullableTransactionCaptureRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionCaptureRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


