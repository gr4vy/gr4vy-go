/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// GiftCardSnapshot A snapshot of a gift card used in a transaction.
type GiftCardSnapshot struct {
	// The type of this resource.
	Type *string `json:"type,omitempty"`
	// The ID of this gift card. This may be `null` if the gift card is not stored.
	Id NullableString `json:"id,omitempty"`
	// The first 6 digits of the full gift card number.
	Bin *string `json:"bin,omitempty"`
	// The 3 digits after the `bin` of the full gift card number.
	SubBin *string `json:"sub_bin,omitempty"`
	// The last 4 digits for the gift card.
	Last4 *string `json:"last4,omitempty"`
}

// NewGiftCardSnapshot instantiates a new GiftCardSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardSnapshot() *GiftCardSnapshot {
	this := GiftCardSnapshot{}
	return &this
}

// NewGiftCardSnapshotWithDefaults instantiates a new GiftCardSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardSnapshotWithDefaults() *GiftCardSnapshot {
	this := GiftCardSnapshot{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GiftCardSnapshot) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardSnapshot) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GiftCardSnapshot) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GiftCardSnapshot) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCardSnapshot) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCardSnapshot) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *GiftCardSnapshot) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *GiftCardSnapshot) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *GiftCardSnapshot) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *GiftCardSnapshot) UnsetId() {
	o.Id.Unset()
}

// GetBin returns the Bin field value if set, zero value otherwise.
func (o *GiftCardSnapshot) GetBin() string {
	if o == nil || o.Bin == nil {
		var ret string
		return ret
	}
	return *o.Bin
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardSnapshot) GetBinOk() (*string, bool) {
	if o == nil || o.Bin == nil {
		return nil, false
	}
	return o.Bin, true
}

// HasBin returns a boolean if a field has been set.
func (o *GiftCardSnapshot) HasBin() bool {
	if o != nil && o.Bin != nil {
		return true
	}

	return false
}

// SetBin gets a reference to the given string and assigns it to the Bin field.
func (o *GiftCardSnapshot) SetBin(v string) {
	o.Bin = &v
}

// GetSubBin returns the SubBin field value if set, zero value otherwise.
func (o *GiftCardSnapshot) GetSubBin() string {
	if o == nil || o.SubBin == nil {
		var ret string
		return ret
	}
	return *o.SubBin
}

// GetSubBinOk returns a tuple with the SubBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardSnapshot) GetSubBinOk() (*string, bool) {
	if o == nil || o.SubBin == nil {
		return nil, false
	}
	return o.SubBin, true
}

// HasSubBin returns a boolean if a field has been set.
func (o *GiftCardSnapshot) HasSubBin() bool {
	if o != nil && o.SubBin != nil {
		return true
	}

	return false
}

// SetSubBin gets a reference to the given string and assigns it to the SubBin field.
func (o *GiftCardSnapshot) SetSubBin(v string) {
	o.SubBin = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *GiftCardSnapshot) GetLast4() string {
	if o == nil || o.Last4 == nil {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardSnapshot) GetLast4Ok() (*string, bool) {
	if o == nil || o.Last4 == nil {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *GiftCardSnapshot) HasLast4() bool {
	if o != nil && o.Last4 != nil {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *GiftCardSnapshot) SetLast4(v string) {
	o.Last4 = &v
}

func (o GiftCardSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Bin != nil {
		toSerialize["bin"] = o.Bin
	}
	if o.SubBin != nil {
		toSerialize["sub_bin"] = o.SubBin
	}
	if o.Last4 != nil {
		toSerialize["last4"] = o.Last4
	}
	return json.Marshal(toSerialize)
}

type NullableGiftCardSnapshot struct {
	value *GiftCardSnapshot
	isSet bool
}

func (v NullableGiftCardSnapshot) Get() *GiftCardSnapshot {
	return v.value
}

func (v *NullableGiftCardSnapshot) Set(val *GiftCardSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardSnapshot(val *GiftCardSnapshot) *NullableGiftCardSnapshot {
	return &NullableGiftCardSnapshot{value: val, isSet: true}
}

func (v NullableGiftCardSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


