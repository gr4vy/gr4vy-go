/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// DigitalWalletRequest Merchant details used to register with a digital wallet provider.
type DigitalWalletRequest struct {
	// The name of the digital wallet provider.
	Provider string `json:"provider"`
	// The name of the merchant. This is used to register the merchant with a digital wallet provider and this name is not displayed to the buyer.
	MerchantName string `json:"merchant_name"`
	// The main URL of the merchant. This is used to register the merchant with a digital wallet provider and this URL is not displayed to the buyer.
	MerchantUrl NullableString `json:"merchant_url,omitempty"`
	// The list of domain names that a digital wallet can be used on. To use a digital wallet on a website, the domain of the site is required to be in this list.
	DomainNames []string `json:"domain_names"`
	// The explicit acceptance of the digital wallet provider's terms and conditions by the merchant. Needs to be `true` to register a new digital wallet.
	AcceptTermsAndConditions bool `json:"accept_terms_and_conditions"`
}

// NewDigitalWalletRequest instantiates a new DigitalWalletRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletRequest(provider string, merchantName string, domainNames []string, acceptTermsAndConditions bool) *DigitalWalletRequest {
	this := DigitalWalletRequest{}
	this.Provider = provider
	this.MerchantName = merchantName
	var merchantUrl string = "null"
	this.MerchantUrl = *NewNullableString(&merchantUrl)
	this.DomainNames = domainNames
	this.AcceptTermsAndConditions = acceptTermsAndConditions
	return &this
}

// NewDigitalWalletRequestWithDefaults instantiates a new DigitalWalletRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletRequestWithDefaults() *DigitalWalletRequest {
	this := DigitalWalletRequest{}
	var merchantUrl string = "null"
	this.MerchantUrl = *NewNullableString(&merchantUrl)
	return &this
}

// GetProvider returns the Provider field value
func (o *DigitalWalletRequest) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletRequest) GetProviderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *DigitalWalletRequest) SetProvider(v string) {
	o.Provider = v
}

// GetMerchantName returns the MerchantName field value
func (o *DigitalWalletRequest) GetMerchantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletRequest) GetMerchantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MerchantName, true
}

// SetMerchantName sets field value
func (o *DigitalWalletRequest) SetMerchantName(v string) {
	o.MerchantName = v
}

// GetMerchantUrl returns the MerchantUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletRequest) GetMerchantUrl() string {
	if o == nil || o.MerchantUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantUrl.Get()
}

// GetMerchantUrlOk returns a tuple with the MerchantUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletRequest) GetMerchantUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantUrl.Get(), o.MerchantUrl.IsSet()
}

// HasMerchantUrl returns a boolean if a field has been set.
func (o *DigitalWalletRequest) HasMerchantUrl() bool {
	if o != nil && o.MerchantUrl.IsSet() {
		return true
	}

	return false
}

// SetMerchantUrl gets a reference to the given NullableString and assigns it to the MerchantUrl field.
func (o *DigitalWalletRequest) SetMerchantUrl(v string) {
	o.MerchantUrl.Set(&v)
}
// SetMerchantUrlNil sets the value for MerchantUrl to be an explicit nil
func (o *DigitalWalletRequest) SetMerchantUrlNil() {
	o.MerchantUrl.Set(nil)
}

// UnsetMerchantUrl ensures that no value is present for MerchantUrl, not even an explicit nil
func (o *DigitalWalletRequest) UnsetMerchantUrl() {
	o.MerchantUrl.Unset()
}

// GetDomainNames returns the DomainNames field value
func (o *DigitalWalletRequest) GetDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletRequest) GetDomainNamesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DomainNames, true
}

// SetDomainNames sets field value
func (o *DigitalWalletRequest) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetAcceptTermsAndConditions returns the AcceptTermsAndConditions field value
func (o *DigitalWalletRequest) GetAcceptTermsAndConditions() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AcceptTermsAndConditions
}

// GetAcceptTermsAndConditionsOk returns a tuple with the AcceptTermsAndConditions field value
// and a boolean to check if the value has been set.
func (o *DigitalWalletRequest) GetAcceptTermsAndConditionsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AcceptTermsAndConditions, true
}

// SetAcceptTermsAndConditions sets field value
func (o *DigitalWalletRequest) SetAcceptTermsAndConditions(v bool) {
	o.AcceptTermsAndConditions = v
}

func (o DigitalWalletRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["provider"] = o.Provider
	}
	if true {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if o.MerchantUrl.IsSet() {
		toSerialize["merchant_url"] = o.MerchantUrl.Get()
	}
	if true {
		toSerialize["domain_names"] = o.DomainNames
	}
	if true {
		toSerialize["accept_terms_and_conditions"] = o.AcceptTermsAndConditions
	}
	return json.Marshal(toSerialize)
}

type NullableDigitalWalletRequest struct {
	value *DigitalWalletRequest
	isSet bool
}

func (v NullableDigitalWalletRequest) Get() *DigitalWalletRequest {
	return v.value
}

func (v *NullableDigitalWalletRequest) Set(val *DigitalWalletRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletRequest(val *DigitalWalletRequest) *NullableDigitalWalletRequest {
	return &NullableDigitalWalletRequest{value: val, isSet: true}
}

func (v NullableDigitalWalletRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


