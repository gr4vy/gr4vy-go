/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// AirlineLeg Each of the separate trip segment, contains detailed itinerary information.
type AirlineLeg struct {
	// 2 character airline code as set by IATA.
	CarrierCode NullableString `json:"carrier_code,omitempty"`
	// Unique identifier of the flight number.
	FlightNumber NullableString `json:"flight_number,omitempty"`
	// The date and time of travel in local time at the departure airport.
	DepartureAt NullableTime `json:"departure_at,omitempty"`
	// Departure country code in ISO 3166 format.
	DepartureCountry NullableString `json:"departure_country,omitempty"`
	// Departure city name.
	DepartureCity NullableString `json:"departure_city,omitempty"`
	// Departure airport code of leg. 3-letter ISO code according to IATA official directory.
	DepartureAirport NullableString `json:"departure_airport,omitempty"`
	// The date and time of travel in local time at the arrival airport.
	ArrivalAt NullableTime `json:"arrival_at,omitempty"`
	// Arrival country code in ISO 3166 format.
	ArrivalCountry NullableString `json:"arrival_country,omitempty"`
	// Arrival city name.
	ArrivalCity NullableString `json:"arrival_city,omitempty"`
	// Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
	ArrivalAirport NullableString `json:"arrival_airport,omitempty"`
	// The alphanumeric code for the \"booking class\" of a ticket.
	FareBasisCode NullableString `json:"fare_basis_code,omitempty"`
	// Indicates service class (first class, business class, etc.).
	FlightClass NullableString `json:"flight_class,omitempty"`
	// Indicates whether a stopover is allowed on this ticket.
	StopOver NullableBool `json:"stop_over,omitempty"`
	// The route type of the flight.
	RouteType *string `json:"route_type,omitempty"`
	// Coupon number associated with the leg.
	CouponNumber NullableString `json:"coupon_number,omitempty"`
	// Amount of the ticket, for current leg of the trip, excluding taxes and fees.
	FareAmount NullableInt32 `json:"fare_amount,omitempty"`
	// Fee amount for current leg of the trip.
	FeeAmount NullableInt32 `json:"fee_amount,omitempty"`
	// Amount of the taxes for current leg of the trip.
	TaxAmount NullableInt32 `json:"tax_amount,omitempty"`
	// Departure tax amount charged by a country when a person is leaving the country.
	DepartureTaxAmount NullableInt32 `json:"departure_tax_amount,omitempty"`
}

// NewAirlineLeg instantiates a new AirlineLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirlineLeg() *AirlineLeg {
	this := AirlineLeg{}
	return &this
}

// NewAirlineLegWithDefaults instantiates a new AirlineLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirlineLegWithDefaults() *AirlineLeg {
	this := AirlineLeg{}
	return &this
}

// GetCarrierCode returns the CarrierCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetCarrierCode() string {
	if o == nil || o.CarrierCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CarrierCode.Get()
}

// GetCarrierCodeOk returns a tuple with the CarrierCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetCarrierCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CarrierCode.Get(), o.CarrierCode.IsSet()
}

// HasCarrierCode returns a boolean if a field has been set.
func (o *AirlineLeg) HasCarrierCode() bool {
	if o != nil && o.CarrierCode.IsSet() {
		return true
	}

	return false
}

// SetCarrierCode gets a reference to the given NullableString and assigns it to the CarrierCode field.
func (o *AirlineLeg) SetCarrierCode(v string) {
	o.CarrierCode.Set(&v)
}
// SetCarrierCodeNil sets the value for CarrierCode to be an explicit nil
func (o *AirlineLeg) SetCarrierCodeNil() {
	o.CarrierCode.Set(nil)
}

// UnsetCarrierCode ensures that no value is present for CarrierCode, not even an explicit nil
func (o *AirlineLeg) UnsetCarrierCode() {
	o.CarrierCode.Unset()
}

// GetFlightNumber returns the FlightNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetFlightNumber() string {
	if o == nil || o.FlightNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.FlightNumber.Get()
}

// GetFlightNumberOk returns a tuple with the FlightNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetFlightNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlightNumber.Get(), o.FlightNumber.IsSet()
}

// HasFlightNumber returns a boolean if a field has been set.
func (o *AirlineLeg) HasFlightNumber() bool {
	if o != nil && o.FlightNumber.IsSet() {
		return true
	}

	return false
}

// SetFlightNumber gets a reference to the given NullableString and assigns it to the FlightNumber field.
func (o *AirlineLeg) SetFlightNumber(v string) {
	o.FlightNumber.Set(&v)
}
// SetFlightNumberNil sets the value for FlightNumber to be an explicit nil
func (o *AirlineLeg) SetFlightNumberNil() {
	o.FlightNumber.Set(nil)
}

// UnsetFlightNumber ensures that no value is present for FlightNumber, not even an explicit nil
func (o *AirlineLeg) UnsetFlightNumber() {
	o.FlightNumber.Unset()
}

// GetDepartureAt returns the DepartureAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetDepartureAt() time.Time {
	if o == nil || o.DepartureAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DepartureAt.Get()
}

// GetDepartureAtOk returns a tuple with the DepartureAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetDepartureAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DepartureAt.Get(), o.DepartureAt.IsSet()
}

// HasDepartureAt returns a boolean if a field has been set.
func (o *AirlineLeg) HasDepartureAt() bool {
	if o != nil && o.DepartureAt.IsSet() {
		return true
	}

	return false
}

// SetDepartureAt gets a reference to the given NullableTime and assigns it to the DepartureAt field.
func (o *AirlineLeg) SetDepartureAt(v time.Time) {
	o.DepartureAt.Set(&v)
}
// SetDepartureAtNil sets the value for DepartureAt to be an explicit nil
func (o *AirlineLeg) SetDepartureAtNil() {
	o.DepartureAt.Set(nil)
}

// UnsetDepartureAt ensures that no value is present for DepartureAt, not even an explicit nil
func (o *AirlineLeg) UnsetDepartureAt() {
	o.DepartureAt.Unset()
}

// GetDepartureCountry returns the DepartureCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetDepartureCountry() string {
	if o == nil || o.DepartureCountry.Get() == nil {
		var ret string
		return ret
	}
	return *o.DepartureCountry.Get()
}

// GetDepartureCountryOk returns a tuple with the DepartureCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetDepartureCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DepartureCountry.Get(), o.DepartureCountry.IsSet()
}

// HasDepartureCountry returns a boolean if a field has been set.
func (o *AirlineLeg) HasDepartureCountry() bool {
	if o != nil && o.DepartureCountry.IsSet() {
		return true
	}

	return false
}

// SetDepartureCountry gets a reference to the given NullableString and assigns it to the DepartureCountry field.
func (o *AirlineLeg) SetDepartureCountry(v string) {
	o.DepartureCountry.Set(&v)
}
// SetDepartureCountryNil sets the value for DepartureCountry to be an explicit nil
func (o *AirlineLeg) SetDepartureCountryNil() {
	o.DepartureCountry.Set(nil)
}

// UnsetDepartureCountry ensures that no value is present for DepartureCountry, not even an explicit nil
func (o *AirlineLeg) UnsetDepartureCountry() {
	o.DepartureCountry.Unset()
}

// GetDepartureCity returns the DepartureCity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetDepartureCity() string {
	if o == nil || o.DepartureCity.Get() == nil {
		var ret string
		return ret
	}
	return *o.DepartureCity.Get()
}

// GetDepartureCityOk returns a tuple with the DepartureCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetDepartureCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DepartureCity.Get(), o.DepartureCity.IsSet()
}

// HasDepartureCity returns a boolean if a field has been set.
func (o *AirlineLeg) HasDepartureCity() bool {
	if o != nil && o.DepartureCity.IsSet() {
		return true
	}

	return false
}

// SetDepartureCity gets a reference to the given NullableString and assigns it to the DepartureCity field.
func (o *AirlineLeg) SetDepartureCity(v string) {
	o.DepartureCity.Set(&v)
}
// SetDepartureCityNil sets the value for DepartureCity to be an explicit nil
func (o *AirlineLeg) SetDepartureCityNil() {
	o.DepartureCity.Set(nil)
}

// UnsetDepartureCity ensures that no value is present for DepartureCity, not even an explicit nil
func (o *AirlineLeg) UnsetDepartureCity() {
	o.DepartureCity.Unset()
}

// GetDepartureAirport returns the DepartureAirport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetDepartureAirport() string {
	if o == nil || o.DepartureAirport.Get() == nil {
		var ret string
		return ret
	}
	return *o.DepartureAirport.Get()
}

// GetDepartureAirportOk returns a tuple with the DepartureAirport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetDepartureAirportOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DepartureAirport.Get(), o.DepartureAirport.IsSet()
}

// HasDepartureAirport returns a boolean if a field has been set.
func (o *AirlineLeg) HasDepartureAirport() bool {
	if o != nil && o.DepartureAirport.IsSet() {
		return true
	}

	return false
}

// SetDepartureAirport gets a reference to the given NullableString and assigns it to the DepartureAirport field.
func (o *AirlineLeg) SetDepartureAirport(v string) {
	o.DepartureAirport.Set(&v)
}
// SetDepartureAirportNil sets the value for DepartureAirport to be an explicit nil
func (o *AirlineLeg) SetDepartureAirportNil() {
	o.DepartureAirport.Set(nil)
}

// UnsetDepartureAirport ensures that no value is present for DepartureAirport, not even an explicit nil
func (o *AirlineLeg) UnsetDepartureAirport() {
	o.DepartureAirport.Unset()
}

// GetArrivalAt returns the ArrivalAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetArrivalAt() time.Time {
	if o == nil || o.ArrivalAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ArrivalAt.Get()
}

// GetArrivalAtOk returns a tuple with the ArrivalAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetArrivalAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArrivalAt.Get(), o.ArrivalAt.IsSet()
}

// HasArrivalAt returns a boolean if a field has been set.
func (o *AirlineLeg) HasArrivalAt() bool {
	if o != nil && o.ArrivalAt.IsSet() {
		return true
	}

	return false
}

// SetArrivalAt gets a reference to the given NullableTime and assigns it to the ArrivalAt field.
func (o *AirlineLeg) SetArrivalAt(v time.Time) {
	o.ArrivalAt.Set(&v)
}
// SetArrivalAtNil sets the value for ArrivalAt to be an explicit nil
func (o *AirlineLeg) SetArrivalAtNil() {
	o.ArrivalAt.Set(nil)
}

// UnsetArrivalAt ensures that no value is present for ArrivalAt, not even an explicit nil
func (o *AirlineLeg) UnsetArrivalAt() {
	o.ArrivalAt.Unset()
}

// GetArrivalCountry returns the ArrivalCountry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetArrivalCountry() string {
	if o == nil || o.ArrivalCountry.Get() == nil {
		var ret string
		return ret
	}
	return *o.ArrivalCountry.Get()
}

// GetArrivalCountryOk returns a tuple with the ArrivalCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetArrivalCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArrivalCountry.Get(), o.ArrivalCountry.IsSet()
}

// HasArrivalCountry returns a boolean if a field has been set.
func (o *AirlineLeg) HasArrivalCountry() bool {
	if o != nil && o.ArrivalCountry.IsSet() {
		return true
	}

	return false
}

// SetArrivalCountry gets a reference to the given NullableString and assigns it to the ArrivalCountry field.
func (o *AirlineLeg) SetArrivalCountry(v string) {
	o.ArrivalCountry.Set(&v)
}
// SetArrivalCountryNil sets the value for ArrivalCountry to be an explicit nil
func (o *AirlineLeg) SetArrivalCountryNil() {
	o.ArrivalCountry.Set(nil)
}

// UnsetArrivalCountry ensures that no value is present for ArrivalCountry, not even an explicit nil
func (o *AirlineLeg) UnsetArrivalCountry() {
	o.ArrivalCountry.Unset()
}

// GetArrivalCity returns the ArrivalCity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetArrivalCity() string {
	if o == nil || o.ArrivalCity.Get() == nil {
		var ret string
		return ret
	}
	return *o.ArrivalCity.Get()
}

// GetArrivalCityOk returns a tuple with the ArrivalCity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetArrivalCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArrivalCity.Get(), o.ArrivalCity.IsSet()
}

// HasArrivalCity returns a boolean if a field has been set.
func (o *AirlineLeg) HasArrivalCity() bool {
	if o != nil && o.ArrivalCity.IsSet() {
		return true
	}

	return false
}

// SetArrivalCity gets a reference to the given NullableString and assigns it to the ArrivalCity field.
func (o *AirlineLeg) SetArrivalCity(v string) {
	o.ArrivalCity.Set(&v)
}
// SetArrivalCityNil sets the value for ArrivalCity to be an explicit nil
func (o *AirlineLeg) SetArrivalCityNil() {
	o.ArrivalCity.Set(nil)
}

// UnsetArrivalCity ensures that no value is present for ArrivalCity, not even an explicit nil
func (o *AirlineLeg) UnsetArrivalCity() {
	o.ArrivalCity.Unset()
}

// GetArrivalAirport returns the ArrivalAirport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetArrivalAirport() string {
	if o == nil || o.ArrivalAirport.Get() == nil {
		var ret string
		return ret
	}
	return *o.ArrivalAirport.Get()
}

// GetArrivalAirportOk returns a tuple with the ArrivalAirport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetArrivalAirportOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArrivalAirport.Get(), o.ArrivalAirport.IsSet()
}

// HasArrivalAirport returns a boolean if a field has been set.
func (o *AirlineLeg) HasArrivalAirport() bool {
	if o != nil && o.ArrivalAirport.IsSet() {
		return true
	}

	return false
}

// SetArrivalAirport gets a reference to the given NullableString and assigns it to the ArrivalAirport field.
func (o *AirlineLeg) SetArrivalAirport(v string) {
	o.ArrivalAirport.Set(&v)
}
// SetArrivalAirportNil sets the value for ArrivalAirport to be an explicit nil
func (o *AirlineLeg) SetArrivalAirportNil() {
	o.ArrivalAirport.Set(nil)
}

// UnsetArrivalAirport ensures that no value is present for ArrivalAirport, not even an explicit nil
func (o *AirlineLeg) UnsetArrivalAirport() {
	o.ArrivalAirport.Unset()
}

// GetFareBasisCode returns the FareBasisCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetFareBasisCode() string {
	if o == nil || o.FareBasisCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.FareBasisCode.Get()
}

// GetFareBasisCodeOk returns a tuple with the FareBasisCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetFareBasisCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FareBasisCode.Get(), o.FareBasisCode.IsSet()
}

// HasFareBasisCode returns a boolean if a field has been set.
func (o *AirlineLeg) HasFareBasisCode() bool {
	if o != nil && o.FareBasisCode.IsSet() {
		return true
	}

	return false
}

// SetFareBasisCode gets a reference to the given NullableString and assigns it to the FareBasisCode field.
func (o *AirlineLeg) SetFareBasisCode(v string) {
	o.FareBasisCode.Set(&v)
}
// SetFareBasisCodeNil sets the value for FareBasisCode to be an explicit nil
func (o *AirlineLeg) SetFareBasisCodeNil() {
	o.FareBasisCode.Set(nil)
}

// UnsetFareBasisCode ensures that no value is present for FareBasisCode, not even an explicit nil
func (o *AirlineLeg) UnsetFareBasisCode() {
	o.FareBasisCode.Unset()
}

// GetFlightClass returns the FlightClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetFlightClass() string {
	if o == nil || o.FlightClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.FlightClass.Get()
}

// GetFlightClassOk returns a tuple with the FlightClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetFlightClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlightClass.Get(), o.FlightClass.IsSet()
}

// HasFlightClass returns a boolean if a field has been set.
func (o *AirlineLeg) HasFlightClass() bool {
	if o != nil && o.FlightClass.IsSet() {
		return true
	}

	return false
}

// SetFlightClass gets a reference to the given NullableString and assigns it to the FlightClass field.
func (o *AirlineLeg) SetFlightClass(v string) {
	o.FlightClass.Set(&v)
}
// SetFlightClassNil sets the value for FlightClass to be an explicit nil
func (o *AirlineLeg) SetFlightClassNil() {
	o.FlightClass.Set(nil)
}

// UnsetFlightClass ensures that no value is present for FlightClass, not even an explicit nil
func (o *AirlineLeg) UnsetFlightClass() {
	o.FlightClass.Unset()
}

// GetStopOver returns the StopOver field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetStopOver() bool {
	if o == nil || o.StopOver.Get() == nil {
		var ret bool
		return ret
	}
	return *o.StopOver.Get()
}

// GetStopOverOk returns a tuple with the StopOver field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetStopOverOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StopOver.Get(), o.StopOver.IsSet()
}

// HasStopOver returns a boolean if a field has been set.
func (o *AirlineLeg) HasStopOver() bool {
	if o != nil && o.StopOver.IsSet() {
		return true
	}

	return false
}

// SetStopOver gets a reference to the given NullableBool and assigns it to the StopOver field.
func (o *AirlineLeg) SetStopOver(v bool) {
	o.StopOver.Set(&v)
}
// SetStopOverNil sets the value for StopOver to be an explicit nil
func (o *AirlineLeg) SetStopOverNil() {
	o.StopOver.Set(nil)
}

// UnsetStopOver ensures that no value is present for StopOver, not even an explicit nil
func (o *AirlineLeg) UnsetStopOver() {
	o.StopOver.Unset()
}

// GetRouteType returns the RouteType field value if set, zero value otherwise.
func (o *AirlineLeg) GetRouteType() string {
	if o == nil || o.RouteType == nil {
		var ret string
		return ret
	}
	return *o.RouteType
}

// GetRouteTypeOk returns a tuple with the RouteType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirlineLeg) GetRouteTypeOk() (*string, bool) {
	if o == nil || o.RouteType == nil {
		return nil, false
	}
	return o.RouteType, true
}

// HasRouteType returns a boolean if a field has been set.
func (o *AirlineLeg) HasRouteType() bool {
	if o != nil && o.RouteType != nil {
		return true
	}

	return false
}

// SetRouteType gets a reference to the given string and assigns it to the RouteType field.
func (o *AirlineLeg) SetRouteType(v string) {
	o.RouteType = &v
}

// GetCouponNumber returns the CouponNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetCouponNumber() string {
	if o == nil || o.CouponNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.CouponNumber.Get()
}

// GetCouponNumberOk returns a tuple with the CouponNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetCouponNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CouponNumber.Get(), o.CouponNumber.IsSet()
}

// HasCouponNumber returns a boolean if a field has been set.
func (o *AirlineLeg) HasCouponNumber() bool {
	if o != nil && o.CouponNumber.IsSet() {
		return true
	}

	return false
}

// SetCouponNumber gets a reference to the given NullableString and assigns it to the CouponNumber field.
func (o *AirlineLeg) SetCouponNumber(v string) {
	o.CouponNumber.Set(&v)
}
// SetCouponNumberNil sets the value for CouponNumber to be an explicit nil
func (o *AirlineLeg) SetCouponNumberNil() {
	o.CouponNumber.Set(nil)
}

// UnsetCouponNumber ensures that no value is present for CouponNumber, not even an explicit nil
func (o *AirlineLeg) UnsetCouponNumber() {
	o.CouponNumber.Unset()
}

// GetFareAmount returns the FareAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetFareAmount() int32 {
	if o == nil || o.FareAmount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FareAmount.Get()
}

// GetFareAmountOk returns a tuple with the FareAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetFareAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FareAmount.Get(), o.FareAmount.IsSet()
}

// HasFareAmount returns a boolean if a field has been set.
func (o *AirlineLeg) HasFareAmount() bool {
	if o != nil && o.FareAmount.IsSet() {
		return true
	}

	return false
}

// SetFareAmount gets a reference to the given NullableInt32 and assigns it to the FareAmount field.
func (o *AirlineLeg) SetFareAmount(v int32) {
	o.FareAmount.Set(&v)
}
// SetFareAmountNil sets the value for FareAmount to be an explicit nil
func (o *AirlineLeg) SetFareAmountNil() {
	o.FareAmount.Set(nil)
}

// UnsetFareAmount ensures that no value is present for FareAmount, not even an explicit nil
func (o *AirlineLeg) UnsetFareAmount() {
	o.FareAmount.Unset()
}

// GetFeeAmount returns the FeeAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetFeeAmount() int32 {
	if o == nil || o.FeeAmount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FeeAmount.Get()
}

// GetFeeAmountOk returns a tuple with the FeeAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetFeeAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeeAmount.Get(), o.FeeAmount.IsSet()
}

// HasFeeAmount returns a boolean if a field has been set.
func (o *AirlineLeg) HasFeeAmount() bool {
	if o != nil && o.FeeAmount.IsSet() {
		return true
	}

	return false
}

// SetFeeAmount gets a reference to the given NullableInt32 and assigns it to the FeeAmount field.
func (o *AirlineLeg) SetFeeAmount(v int32) {
	o.FeeAmount.Set(&v)
}
// SetFeeAmountNil sets the value for FeeAmount to be an explicit nil
func (o *AirlineLeg) SetFeeAmountNil() {
	o.FeeAmount.Set(nil)
}

// UnsetFeeAmount ensures that no value is present for FeeAmount, not even an explicit nil
func (o *AirlineLeg) UnsetFeeAmount() {
	o.FeeAmount.Unset()
}

// GetTaxAmount returns the TaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetTaxAmount() int32 {
	if o == nil || o.TaxAmount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TaxAmount.Get()
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetTaxAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaxAmount.Get(), o.TaxAmount.IsSet()
}

// HasTaxAmount returns a boolean if a field has been set.
func (o *AirlineLeg) HasTaxAmount() bool {
	if o != nil && o.TaxAmount.IsSet() {
		return true
	}

	return false
}

// SetTaxAmount gets a reference to the given NullableInt32 and assigns it to the TaxAmount field.
func (o *AirlineLeg) SetTaxAmount(v int32) {
	o.TaxAmount.Set(&v)
}
// SetTaxAmountNil sets the value for TaxAmount to be an explicit nil
func (o *AirlineLeg) SetTaxAmountNil() {
	o.TaxAmount.Set(nil)
}

// UnsetTaxAmount ensures that no value is present for TaxAmount, not even an explicit nil
func (o *AirlineLeg) UnsetTaxAmount() {
	o.TaxAmount.Unset()
}

// GetDepartureTaxAmount returns the DepartureTaxAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirlineLeg) GetDepartureTaxAmount() int32 {
	if o == nil || o.DepartureTaxAmount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DepartureTaxAmount.Get()
}

// GetDepartureTaxAmountOk returns a tuple with the DepartureTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirlineLeg) GetDepartureTaxAmountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DepartureTaxAmount.Get(), o.DepartureTaxAmount.IsSet()
}

// HasDepartureTaxAmount returns a boolean if a field has been set.
func (o *AirlineLeg) HasDepartureTaxAmount() bool {
	if o != nil && o.DepartureTaxAmount.IsSet() {
		return true
	}

	return false
}

// SetDepartureTaxAmount gets a reference to the given NullableInt32 and assigns it to the DepartureTaxAmount field.
func (o *AirlineLeg) SetDepartureTaxAmount(v int32) {
	o.DepartureTaxAmount.Set(&v)
}
// SetDepartureTaxAmountNil sets the value for DepartureTaxAmount to be an explicit nil
func (o *AirlineLeg) SetDepartureTaxAmountNil() {
	o.DepartureTaxAmount.Set(nil)
}

// UnsetDepartureTaxAmount ensures that no value is present for DepartureTaxAmount, not even an explicit nil
func (o *AirlineLeg) UnsetDepartureTaxAmount() {
	o.DepartureTaxAmount.Unset()
}

func (o AirlineLeg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CarrierCode.IsSet() {
		toSerialize["carrier_code"] = o.CarrierCode.Get()
	}
	if o.FlightNumber.IsSet() {
		toSerialize["flight_number"] = o.FlightNumber.Get()
	}
	if o.DepartureAt.IsSet() {
		toSerialize["departure_at"] = o.DepartureAt.Get()
	}
	if o.DepartureCountry.IsSet() {
		toSerialize["departure_country"] = o.DepartureCountry.Get()
	}
	if o.DepartureCity.IsSet() {
		toSerialize["departure_city"] = o.DepartureCity.Get()
	}
	if o.DepartureAirport.IsSet() {
		toSerialize["departure_airport"] = o.DepartureAirport.Get()
	}
	if o.ArrivalAt.IsSet() {
		toSerialize["arrival_at"] = o.ArrivalAt.Get()
	}
	if o.ArrivalCountry.IsSet() {
		toSerialize["arrival_country"] = o.ArrivalCountry.Get()
	}
	if o.ArrivalCity.IsSet() {
		toSerialize["arrival_city"] = o.ArrivalCity.Get()
	}
	if o.ArrivalAirport.IsSet() {
		toSerialize["arrival_airport"] = o.ArrivalAirport.Get()
	}
	if o.FareBasisCode.IsSet() {
		toSerialize["fare_basis_code"] = o.FareBasisCode.Get()
	}
	if o.FlightClass.IsSet() {
		toSerialize["flight_class"] = o.FlightClass.Get()
	}
	if o.StopOver.IsSet() {
		toSerialize["stop_over"] = o.StopOver.Get()
	}
	if o.RouteType != nil {
		toSerialize["route_type"] = o.RouteType
	}
	if o.CouponNumber.IsSet() {
		toSerialize["coupon_number"] = o.CouponNumber.Get()
	}
	if o.FareAmount.IsSet() {
		toSerialize["fare_amount"] = o.FareAmount.Get()
	}
	if o.FeeAmount.IsSet() {
		toSerialize["fee_amount"] = o.FeeAmount.Get()
	}
	if o.TaxAmount.IsSet() {
		toSerialize["tax_amount"] = o.TaxAmount.Get()
	}
	if o.DepartureTaxAmount.IsSet() {
		toSerialize["departure_tax_amount"] = o.DepartureTaxAmount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAirlineLeg struct {
	value *AirlineLeg
	isSet bool
}

func (v NullableAirlineLeg) Get() *AirlineLeg {
	return v.value
}

func (v *NullableAirlineLeg) Set(val *AirlineLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableAirlineLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableAirlineLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirlineLeg(val *AirlineLeg) *NullableAirlineLeg {
	return &NullableAirlineLeg{value: val, isSet: true}
}

func (v NullableAirlineLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirlineLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


