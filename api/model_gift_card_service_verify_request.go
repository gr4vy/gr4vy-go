/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// GiftCardServiceVerifyRequest Request body for verifying credentials against a gift card service.
type GiftCardServiceVerifyRequest struct {
	// The ID of the gift card service to use.
	GiftCardServiceDefinitionId string `json:"gift_card_service_definition_id"`
	// The ID of the gift card service. Required if sending a partial set of credentials in the `fields` property. This will merge the provided fields with those already on the service.
	GiftCardServiceId *string `json:"gift_card_service_id,omitempty"`
	// A list of fields where each field is a key-value pair that represents a defined field in the definition of the service. You are not required to send the full list of fields if the credentials for the service are already stored. For example, if your credentials for `qwikcilver-gift-card` are stored and you only provide a `secret_key` in the request, it will override the stored `secret_key` and verify the resulting set of credentials against the service.
	Fields []GiftCardServiceVerifyRequestFields `json:"fields"`
}

// NewGiftCardServiceVerifyRequest instantiates a new GiftCardServiceVerifyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCardServiceVerifyRequest(giftCardServiceDefinitionId string, fields []GiftCardServiceVerifyRequestFields) *GiftCardServiceVerifyRequest {
	this := GiftCardServiceVerifyRequest{}
	this.GiftCardServiceDefinitionId = giftCardServiceDefinitionId
	this.Fields = fields
	return &this
}

// NewGiftCardServiceVerifyRequestWithDefaults instantiates a new GiftCardServiceVerifyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardServiceVerifyRequestWithDefaults() *GiftCardServiceVerifyRequest {
	this := GiftCardServiceVerifyRequest{}
	return &this
}

// GetGiftCardServiceDefinitionId returns the GiftCardServiceDefinitionId field value
func (o *GiftCardServiceVerifyRequest) GetGiftCardServiceDefinitionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GiftCardServiceDefinitionId
}

// GetGiftCardServiceDefinitionIdOk returns a tuple with the GiftCardServiceDefinitionId field value
// and a boolean to check if the value has been set.
func (o *GiftCardServiceVerifyRequest) GetGiftCardServiceDefinitionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GiftCardServiceDefinitionId, true
}

// SetGiftCardServiceDefinitionId sets field value
func (o *GiftCardServiceVerifyRequest) SetGiftCardServiceDefinitionId(v string) {
	o.GiftCardServiceDefinitionId = v
}

// GetGiftCardServiceId returns the GiftCardServiceId field value if set, zero value otherwise.
func (o *GiftCardServiceVerifyRequest) GetGiftCardServiceId() string {
	if o == nil || o.GiftCardServiceId == nil {
		var ret string
		return ret
	}
	return *o.GiftCardServiceId
}

// GetGiftCardServiceIdOk returns a tuple with the GiftCardServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCardServiceVerifyRequest) GetGiftCardServiceIdOk() (*string, bool) {
	if o == nil || o.GiftCardServiceId == nil {
		return nil, false
	}
	return o.GiftCardServiceId, true
}

// HasGiftCardServiceId returns a boolean if a field has been set.
func (o *GiftCardServiceVerifyRequest) HasGiftCardServiceId() bool {
	if o != nil && o.GiftCardServiceId != nil {
		return true
	}

	return false
}

// SetGiftCardServiceId gets a reference to the given string and assigns it to the GiftCardServiceId field.
func (o *GiftCardServiceVerifyRequest) SetGiftCardServiceId(v string) {
	o.GiftCardServiceId = &v
}

// GetFields returns the Fields field value
func (o *GiftCardServiceVerifyRequest) GetFields() []GiftCardServiceVerifyRequestFields {
	if o == nil {
		var ret []GiftCardServiceVerifyRequestFields
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *GiftCardServiceVerifyRequest) GetFieldsOk() (*[]GiftCardServiceVerifyRequestFields, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *GiftCardServiceVerifyRequest) SetFields(v []GiftCardServiceVerifyRequestFields) {
	o.Fields = v
}

func (o GiftCardServiceVerifyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["gift_card_service_definition_id"] = o.GiftCardServiceDefinitionId
	}
	if o.GiftCardServiceId != nil {
		toSerialize["gift_card_service_id"] = o.GiftCardServiceId
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableGiftCardServiceVerifyRequest struct {
	value *GiftCardServiceVerifyRequest
	isSet bool
}

func (v NullableGiftCardServiceVerifyRequest) Get() *GiftCardServiceVerifyRequest {
	return v.value
}

func (v *NullableGiftCardServiceVerifyRequest) Set(val *GiftCardServiceVerifyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCardServiceVerifyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCardServiceVerifyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCardServiceVerifyRequest(val *GiftCardServiceVerifyRequest) *NullableGiftCardServiceVerifyRequest {
	return &NullableGiftCardServiceVerifyRequest{value: val, isSet: true}
}

func (v NullableGiftCardServiceVerifyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCardServiceVerifyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


