/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// GiftCard A gift card stored for a buyer, or used in a transaction.
type GiftCard struct {
	// The type of this resource.
	Type *string `json:"type,omitempty"`
	// The ID of this gift card.
	Id *string `json:"id,omitempty"`
	// The unique ID for a merchant account.
	MerchantAccountId *string `json:"merchant_account_id,omitempty"`
	Service *GiftCardService `json:"service,omitempty"`
	// The first 6 digits of the full gift card number.
	Bin *string `json:"bin,omitempty"`
	// The 3 digits after the `bin` of the full gift card number.
	SubBin *string `json:"sub_bin,omitempty"`
	// The last 4 digits for the gift card.
	Last4 *string `json:"last4,omitempty"`
	// The date and time when this gift card expires. This is a full date/time and may be more accurate than the actual expiry date received by the gift card service.
	ExpirationDate NullableTime `json:"expiration_date,omitempty"`
	// The optional buyer for which this payment method has been stored.
	Buyer NullableBuyer `json:"buyer,omitempty"`
	// The date and time when this gift card was created in our system.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this gift card was last updated in our system.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewGiftCard instantiates a new GiftCard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGiftCard() *GiftCard {
	this := GiftCard{}
	return &this
}

// NewGiftCardWithDefaults instantiates a new GiftCard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGiftCardWithDefaults() *GiftCard {
	this := GiftCard{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GiftCard) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GiftCard) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GiftCard) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GiftCard) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GiftCard) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GiftCard) SetId(v string) {
	o.Id = &v
}

// GetMerchantAccountId returns the MerchantAccountId field value if set, zero value otherwise.
func (o *GiftCard) GetMerchantAccountId() string {
	if o == nil || o.MerchantAccountId == nil {
		var ret string
		return ret
	}
	return *o.MerchantAccountId
}

// GetMerchantAccountIdOk returns a tuple with the MerchantAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetMerchantAccountIdOk() (*string, bool) {
	if o == nil || o.MerchantAccountId == nil {
		return nil, false
	}
	return o.MerchantAccountId, true
}

// HasMerchantAccountId returns a boolean if a field has been set.
func (o *GiftCard) HasMerchantAccountId() bool {
	if o != nil && o.MerchantAccountId != nil {
		return true
	}

	return false
}

// SetMerchantAccountId gets a reference to the given string and assigns it to the MerchantAccountId field.
func (o *GiftCard) SetMerchantAccountId(v string) {
	o.MerchantAccountId = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *GiftCard) GetService() GiftCardService {
	if o == nil || o.Service == nil {
		var ret GiftCardService
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetServiceOk() (*GiftCardService, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *GiftCard) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given GiftCardService and assigns it to the Service field.
func (o *GiftCard) SetService(v GiftCardService) {
	o.Service = &v
}

// GetBin returns the Bin field value if set, zero value otherwise.
func (o *GiftCard) GetBin() string {
	if o == nil || o.Bin == nil {
		var ret string
		return ret
	}
	return *o.Bin
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetBinOk() (*string, bool) {
	if o == nil || o.Bin == nil {
		return nil, false
	}
	return o.Bin, true
}

// HasBin returns a boolean if a field has been set.
func (o *GiftCard) HasBin() bool {
	if o != nil && o.Bin != nil {
		return true
	}

	return false
}

// SetBin gets a reference to the given string and assigns it to the Bin field.
func (o *GiftCard) SetBin(v string) {
	o.Bin = &v
}

// GetSubBin returns the SubBin field value if set, zero value otherwise.
func (o *GiftCard) GetSubBin() string {
	if o == nil || o.SubBin == nil {
		var ret string
		return ret
	}
	return *o.SubBin
}

// GetSubBinOk returns a tuple with the SubBin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetSubBinOk() (*string, bool) {
	if o == nil || o.SubBin == nil {
		return nil, false
	}
	return o.SubBin, true
}

// HasSubBin returns a boolean if a field has been set.
func (o *GiftCard) HasSubBin() bool {
	if o != nil && o.SubBin != nil {
		return true
	}

	return false
}

// SetSubBin gets a reference to the given string and assigns it to the SubBin field.
func (o *GiftCard) SetSubBin(v string) {
	o.SubBin = &v
}

// GetLast4 returns the Last4 field value if set, zero value otherwise.
func (o *GiftCard) GetLast4() string {
	if o == nil || o.Last4 == nil {
		var ret string
		return ret
	}
	return *o.Last4
}

// GetLast4Ok returns a tuple with the Last4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetLast4Ok() (*string, bool) {
	if o == nil || o.Last4 == nil {
		return nil, false
	}
	return o.Last4, true
}

// HasLast4 returns a boolean if a field has been set.
func (o *GiftCard) HasLast4() bool {
	if o != nil && o.Last4 != nil {
		return true
	}

	return false
}

// SetLast4 gets a reference to the given string and assigns it to the Last4 field.
func (o *GiftCard) SetLast4(v string) {
	o.Last4 = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetExpirationDate() time.Time {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *GiftCard) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableTime and assigns it to the ExpirationDate field.
func (o *GiftCard) SetExpirationDate(v time.Time) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *GiftCard) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *GiftCard) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetBuyer returns the Buyer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GiftCard) GetBuyer() Buyer {
	if o == nil || o.Buyer.Get() == nil {
		var ret Buyer
		return ret
	}
	return *o.Buyer.Get()
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GiftCard) GetBuyerOk() (*Buyer, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Buyer.Get(), o.Buyer.IsSet()
}

// HasBuyer returns a boolean if a field has been set.
func (o *GiftCard) HasBuyer() bool {
	if o != nil && o.Buyer.IsSet() {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given NullableBuyer and assigns it to the Buyer field.
func (o *GiftCard) SetBuyer(v Buyer) {
	o.Buyer.Set(&v)
}
// SetBuyerNil sets the value for Buyer to be an explicit nil
func (o *GiftCard) SetBuyerNil() {
	o.Buyer.Set(nil)
}

// UnsetBuyer ensures that no value is present for Buyer, not even an explicit nil
func (o *GiftCard) UnsetBuyer() {
	o.Buyer.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GiftCard) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GiftCard) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GiftCard) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GiftCard) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GiftCard) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GiftCard) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *GiftCard) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o GiftCard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MerchantAccountId != nil {
		toSerialize["merchant_account_id"] = o.MerchantAccountId
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Bin != nil {
		toSerialize["bin"] = o.Bin
	}
	if o.SubBin != nil {
		toSerialize["sub_bin"] = o.SubBin
	}
	if o.Last4 != nil {
		toSerialize["last4"] = o.Last4
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	if o.Buyer.IsSet() {
		toSerialize["buyer"] = o.Buyer.Get()
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableGiftCard struct {
	value *GiftCard
	isSet bool
}

func (v NullableGiftCard) Get() *GiftCard {
	return v.value
}

func (v *NullableGiftCard) Set(val *GiftCard) {
	v.value = val
	v.isSet = true
}

func (v NullableGiftCard) IsSet() bool {
	return v.isSet
}

func (v *NullableGiftCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGiftCard(val *GiftCard) *NullableGiftCard {
	return &NullableGiftCard{value: val, isSet: true}
}

func (v NullableGiftCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGiftCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


