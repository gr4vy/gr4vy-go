/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// PaymentMethodToken A token for a payment method.
type PaymentMethodToken struct {
	// `payment-method-token`.
	Type *string `json:"type,omitempty"`
	// The external ID of this payment method as it has been registered with the payment service, which can be used directly in combination with the `token` without the need to go through Gr4vy for a transaction.  In some cases this is a different value to the `token` while in others this value is identical. Please see the documentation for the payment service for more details.
	Id *string `json:"id,omitempty"`
	// The token of this payment method as it has been registered with the payment service, which can be used directly in combination with the `id` without the need to go through Gr4vy for a transaction.  In some cases this is a different value to the `id` while in others this value is identical. Please see the documentation for the payment service for more details.
	Token *string `json:"token,omitempty"`
	PaymentService *PaymentServiceSnapshot `json:"payment_service,omitempty"`
}

// NewPaymentMethodToken instantiates a new PaymentMethodToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodToken() *PaymentMethodToken {
	this := PaymentMethodToken{}
	return &this
}

// NewPaymentMethodTokenWithDefaults instantiates a new PaymentMethodToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodTokenWithDefaults() *PaymentMethodToken {
	this := PaymentMethodToken{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentMethodToken) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodToken) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentMethodToken) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentMethodToken) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PaymentMethodToken) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodToken) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PaymentMethodToken) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PaymentMethodToken) SetId(v string) {
	o.Id = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PaymentMethodToken) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodToken) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PaymentMethodToken) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PaymentMethodToken) SetToken(v string) {
	o.Token = &v
}

// GetPaymentService returns the PaymentService field value if set, zero value otherwise.
func (o *PaymentMethodToken) GetPaymentService() PaymentServiceSnapshot {
	if o == nil || o.PaymentService == nil {
		var ret PaymentServiceSnapshot
		return ret
	}
	return *o.PaymentService
}

// GetPaymentServiceOk returns a tuple with the PaymentService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodToken) GetPaymentServiceOk() (*PaymentServiceSnapshot, bool) {
	if o == nil || o.PaymentService == nil {
		return nil, false
	}
	return o.PaymentService, true
}

// HasPaymentService returns a boolean if a field has been set.
func (o *PaymentMethodToken) HasPaymentService() bool {
	if o != nil && o.PaymentService != nil {
		return true
	}

	return false
}

// SetPaymentService gets a reference to the given PaymentServiceSnapshot and assigns it to the PaymentService field.
func (o *PaymentMethodToken) SetPaymentService(v PaymentServiceSnapshot) {
	o.PaymentService = &v
}

func (o PaymentMethodToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.PaymentService != nil {
		toSerialize["payment_service"] = o.PaymentService
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodToken struct {
	value *PaymentMethodToken
	isSet bool
}

func (v NullablePaymentMethodToken) Get() *PaymentMethodToken {
	return v.value
}

func (v *NullablePaymentMethodToken) Set(val *PaymentMethodToken) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodToken) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodToken(val *PaymentMethodToken) *NullablePaymentMethodToken {
	return &NullablePaymentMethodToken{value: val, isSet: true}
}

func (v NullablePaymentMethodToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


