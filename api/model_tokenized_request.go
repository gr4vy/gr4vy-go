/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TokenizedRequest Details for a previously stored payment method.
type TokenizedRequest struct {
	// `id`.
	Method string `json:"method"`
	// A ID that represents a previously stored payment method. This ID can represent any type of payment method.
	Id string `json:"id"`
	// This value is mandatory for stored redirect payment methods. For stored cards, we strongly recommend providing a `redirect_url` either when 3-D Secure is enabled and `three_d_secure_data` is not provided, or when using connections where 3DS is enabled. This value will be appended with both a transaction ID and status (e.g. `https://example.com/callback?gr4vy_transaction_id=123 &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has completed. For those cases, if the value is not present, the transaction will be marked as failed.
	RedirectUrl *string `json:"redirect_url,omitempty"`
	// The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.  The security code can only be set if the stored payment method represents a card.
	SecurityCode *string `json:"security_code,omitempty"`
}

// NewTokenizedRequest instantiates a new TokenizedRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenizedRequest(method string, id string) *TokenizedRequest {
	this := TokenizedRequest{}
	this.Method = method
	this.Id = id
	return &this
}

// NewTokenizedRequestWithDefaults instantiates a new TokenizedRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenizedRequestWithDefaults() *TokenizedRequest {
	this := TokenizedRequest{}
	return &this
}

// GetMethod returns the Method field value
func (o *TokenizedRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *TokenizedRequest) GetMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *TokenizedRequest) SetMethod(v string) {
	o.Method = v
}

// GetId returns the Id field value
func (o *TokenizedRequest) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TokenizedRequest) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TokenizedRequest) SetId(v string) {
	o.Id = v
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise.
func (o *TokenizedRequest) GetRedirectUrl() string {
	if o == nil || o.RedirectUrl == nil {
		var ret string
		return ret
	}
	return *o.RedirectUrl
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizedRequest) GetRedirectUrlOk() (*string, bool) {
	if o == nil || o.RedirectUrl == nil {
		return nil, false
	}
	return o.RedirectUrl, true
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *TokenizedRequest) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl != nil {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given string and assigns it to the RedirectUrl field.
func (o *TokenizedRequest) SetRedirectUrl(v string) {
	o.RedirectUrl = &v
}

// GetSecurityCode returns the SecurityCode field value if set, zero value otherwise.
func (o *TokenizedRequest) GetSecurityCode() string {
	if o == nil || o.SecurityCode == nil {
		var ret string
		return ret
	}
	return *o.SecurityCode
}

// GetSecurityCodeOk returns a tuple with the SecurityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenizedRequest) GetSecurityCodeOk() (*string, bool) {
	if o == nil || o.SecurityCode == nil {
		return nil, false
	}
	return o.SecurityCode, true
}

// HasSecurityCode returns a boolean if a field has been set.
func (o *TokenizedRequest) HasSecurityCode() bool {
	if o != nil && o.SecurityCode != nil {
		return true
	}

	return false
}

// SetSecurityCode gets a reference to the given string and assigns it to the SecurityCode field.
func (o *TokenizedRequest) SetSecurityCode(v string) {
	o.SecurityCode = &v
}

func (o TokenizedRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["method"] = o.Method
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.RedirectUrl != nil {
		toSerialize["redirect_url"] = o.RedirectUrl
	}
	if o.SecurityCode != nil {
		toSerialize["security_code"] = o.SecurityCode
	}
	return json.Marshal(toSerialize)
}

type NullableTokenizedRequest struct {
	value *TokenizedRequest
	isSet bool
}

func (v NullableTokenizedRequest) Get() *TokenizedRequest {
	return v.value
}

func (v *NullableTokenizedRequest) Set(val *TokenizedRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenizedRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenizedRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenizedRequest(val *TokenizedRequest) *NullableTokenizedRequest {
	return &NullableTokenizedRequest{value: val, isSet: true}
}

func (v NullableTokenizedRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenizedRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


