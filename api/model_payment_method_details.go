/*
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.0
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// PaymentMethodDetails Additional details about a payment method.
type PaymentMethodDetails struct {
	// Partial number details for a stored card, hiding all but the last few numbers.
	Number *string `json:"number,omitempty"`
	// The type of the card.
	Scheme *string `json:"scheme,omitempty"`
	// The expiration date for a card.
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// The email address associated to the payment method.
	EmailAddress NullableString `json:"email_address,omitempty"`
	// The optional URL that the buyer needs to be redirected to to further authorize the payment method.
	ApprovalUrl NullableString `json:"approval_url,omitempty"`
}

// NewPaymentMethodDetails instantiates a new PaymentMethodDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentMethodDetails() *PaymentMethodDetails {
	this := PaymentMethodDetails{}
	return &this
}

// NewPaymentMethodDetailsWithDefaults instantiates a new PaymentMethodDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentMethodDetailsWithDefaults() *PaymentMethodDetails {
	this := PaymentMethodDetails{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *PaymentMethodDetails) GetNumber() string {
	if o == nil || o.Number == nil {
		var ret string
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodDetails) GetNumberOk() (*string, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *PaymentMethodDetails) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given string and assigns it to the Number field.
func (o *PaymentMethodDetails) SetNumber(v string) {
	o.Number = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *PaymentMethodDetails) GetScheme() string {
	if o == nil || o.Scheme == nil {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodDetails) GetSchemeOk() (*string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *PaymentMethodDetails) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *PaymentMethodDetails) SetScheme(v string) {
	o.Scheme = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *PaymentMethodDetails) GetExpirationDate() string {
	if o == nil || o.ExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentMethodDetails) GetExpirationDateOk() (*string, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *PaymentMethodDetails) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *PaymentMethodDetails) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethodDetails) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethodDetails) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *PaymentMethodDetails) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *PaymentMethodDetails) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *PaymentMethodDetails) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *PaymentMethodDetails) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetApprovalUrl returns the ApprovalUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentMethodDetails) GetApprovalUrl() string {
	if o == nil || o.ApprovalUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApprovalUrl.Get()
}

// GetApprovalUrlOk returns a tuple with the ApprovalUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentMethodDetails) GetApprovalUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApprovalUrl.Get(), o.ApprovalUrl.IsSet()
}

// HasApprovalUrl returns a boolean if a field has been set.
func (o *PaymentMethodDetails) HasApprovalUrl() bool {
	if o != nil && o.ApprovalUrl.IsSet() {
		return true
	}

	return false
}

// SetApprovalUrl gets a reference to the given NullableString and assigns it to the ApprovalUrl field.
func (o *PaymentMethodDetails) SetApprovalUrl(v string) {
	o.ApprovalUrl.Set(&v)
}
// SetApprovalUrlNil sets the value for ApprovalUrl to be an explicit nil
func (o *PaymentMethodDetails) SetApprovalUrlNil() {
	o.ApprovalUrl.Set(nil)
}

// UnsetApprovalUrl ensures that no value is present for ApprovalUrl, not even an explicit nil
func (o *PaymentMethodDetails) UnsetApprovalUrl() {
	o.ApprovalUrl.Unset()
}

func (o PaymentMethodDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.EmailAddress.IsSet() {
		toSerialize["email_address"] = o.EmailAddress.Get()
	}
	if o.ApprovalUrl.IsSet() {
		toSerialize["approval_url"] = o.ApprovalUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentMethodDetails struct {
	value *PaymentMethodDetails
	isSet bool
}

func (v NullablePaymentMethodDetails) Get() *PaymentMethodDetails {
	return v.value
}

func (v *NullablePaymentMethodDetails) Set(val *PaymentMethodDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentMethodDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentMethodDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentMethodDetails(val *PaymentMethodDetails) *NullablePaymentMethodDetails {
	return &NullablePaymentMethodDetails{value: val, isSet: true}
}

func (v NullablePaymentMethodDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentMethodDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


