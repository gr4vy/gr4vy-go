/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TransactionStatusSummary A transaction record.
type TransactionStatusSummary struct {
	// The type of this resource. Is always `transaction`.
	Type *string `json:"type,omitempty"`
	// The unique identifier for this transaction.
	Id *string `json:"id,omitempty"`
	// The status of the transaction. The status may change over time as asynchronous processing events occur.
	Status *string `json:"status,omitempty"`
}

// NewTransactionStatusSummary instantiates a new TransactionStatusSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionStatusSummary() *TransactionStatusSummary {
	this := TransactionStatusSummary{}
	return &this
}

// NewTransactionStatusSummaryWithDefaults instantiates a new TransactionStatusSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionStatusSummaryWithDefaults() *TransactionStatusSummary {
	this := TransactionStatusSummary{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TransactionStatusSummary) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionStatusSummary) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TransactionStatusSummary) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TransactionStatusSummary) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionStatusSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionStatusSummary) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionStatusSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TransactionStatusSummary) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionStatusSummary) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionStatusSummary) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionStatusSummary) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TransactionStatusSummary) SetStatus(v string) {
	o.Status = &v
}

func (o TransactionStatusSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionStatusSummary struct {
	value *TransactionStatusSummary
	isSet bool
}

func (v NullableTransactionStatusSummary) Get() *TransactionStatusSummary {
	return v.value
}

func (v *NullableTransactionStatusSummary) Set(val *TransactionStatusSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionStatusSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionStatusSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionStatusSummary(val *TransactionStatusSummary) *NullableTransactionStatusSummary {
	return &NullableTransactionStatusSummary{value: val, isSet: true}
}

func (v NullableTransactionStatusSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionStatusSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


