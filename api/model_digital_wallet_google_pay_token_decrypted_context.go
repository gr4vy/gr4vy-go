/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// DigitalWalletGooglePayTokenDecryptedContext Google Pay decrypted token context.
type DigitalWalletGooglePayTokenDecryptedContext struct {
	// Version information about the payment token.
	Version *string `json:"version,omitempty"`
	// The type of payment instrument.
	Type NullableString `json:"type,omitempty"`
	// Expiration of the decrypted data.
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// Online payment cryptogram, as defined by 3D Secure.
	HasCryptogram *bool `json:"has_cryptogram,omitempty"`
	// ECI indicator, as defined by 3D Secure.
	Eci NullableString `json:"eci,omitempty"`
	// Date and time at which the message expires as UTC milliseconds since epoch.
	MessageExpiration *string `json:"message_expiration,omitempty"`
	// A unique ID that identifies the message in case it needs to be revoked or located at a later time.
	MessageId *string `json:"message_id,omitempty"`
	// The type of the payment credential.
	PaymentMethod *string `json:"payment_method,omitempty"`
}

// NewDigitalWalletGooglePayTokenDecryptedContext instantiates a new DigitalWalletGooglePayTokenDecryptedContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletGooglePayTokenDecryptedContext() *DigitalWalletGooglePayTokenDecryptedContext {
	this := DigitalWalletGooglePayTokenDecryptedContext{}
	return &this
}

// NewDigitalWalletGooglePayTokenDecryptedContextWithDefaults instantiates a new DigitalWalletGooglePayTokenDecryptedContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletGooglePayTokenDecryptedContextWithDefaults() *DigitalWalletGooglePayTokenDecryptedContext {
	this := DigitalWalletGooglePayTokenDecryptedContext{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DigitalWalletGooglePayTokenDecryptedContext) UnsetType() {
	o.Type.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetExpirationDate() string {
	if o == nil || o.ExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetExpirationDateOk() (*string, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetHasCryptogram returns the HasCryptogram field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetHasCryptogram() bool {
	if o == nil || o.HasCryptogram == nil {
		var ret bool
		return ret
	}
	return *o.HasCryptogram
}

// GetHasCryptogramOk returns a tuple with the HasCryptogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetHasCryptogramOk() (*bool, bool) {
	if o == nil || o.HasCryptogram == nil {
		return nil, false
	}
	return o.HasCryptogram, true
}

// HasHasCryptogram returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasHasCryptogram() bool {
	if o != nil && o.HasCryptogram != nil {
		return true
	}

	return false
}

// SetHasCryptogram gets a reference to the given bool and assigns it to the HasCryptogram field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetHasCryptogram(v bool) {
	o.HasCryptogram = &v
}

// GetEci returns the Eci field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetEci() string {
	if o == nil || o.Eci.Get() == nil {
		var ret string
		return ret
	}
	return *o.Eci.Get()
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetEciOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Eci.Get(), o.Eci.IsSet()
}

// HasEci returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasEci() bool {
	if o != nil && o.Eci.IsSet() {
		return true
	}

	return false
}

// SetEci gets a reference to the given NullableString and assigns it to the Eci field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetEci(v string) {
	o.Eci.Set(&v)
}
// SetEciNil sets the value for Eci to be an explicit nil
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetEciNil() {
	o.Eci.Set(nil)
}

// UnsetEci ensures that no value is present for Eci, not even an explicit nil
func (o *DigitalWalletGooglePayTokenDecryptedContext) UnsetEci() {
	o.Eci.Unset()
}

// GetMessageExpiration returns the MessageExpiration field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetMessageExpiration() string {
	if o == nil || o.MessageExpiration == nil {
		var ret string
		return ret
	}
	return *o.MessageExpiration
}

// GetMessageExpirationOk returns a tuple with the MessageExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetMessageExpirationOk() (*string, bool) {
	if o == nil || o.MessageExpiration == nil {
		return nil, false
	}
	return o.MessageExpiration, true
}

// HasMessageExpiration returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasMessageExpiration() bool {
	if o != nil && o.MessageExpiration != nil {
		return true
	}

	return false
}

// SetMessageExpiration gets a reference to the given string and assigns it to the MessageExpiration field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetMessageExpiration(v string) {
	o.MessageExpiration = &v
}

// GetMessageId returns the MessageId field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetMessageId() string {
	if o == nil || o.MessageId == nil {
		var ret string
		return ret
	}
	return *o.MessageId
}

// GetMessageIdOk returns a tuple with the MessageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetMessageIdOk() (*string, bool) {
	if o == nil || o.MessageId == nil {
		return nil, false
	}
	return o.MessageId, true
}

// HasMessageId returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasMessageId() bool {
	if o != nil && o.MessageId != nil {
		return true
	}

	return false
}

// SetMessageId gets a reference to the given string and assigns it to the MessageId field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetMessageId(v string) {
	o.MessageId = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetPaymentMethod() string {
	if o == nil || o.PaymentMethod == nil {
		var ret string
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) GetPaymentMethodOk() (*string, bool) {
	if o == nil || o.PaymentMethod == nil {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *DigitalWalletGooglePayTokenDecryptedContext) HasPaymentMethod() bool {
	if o != nil && o.PaymentMethod != nil {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given string and assigns it to the PaymentMethod field.
func (o *DigitalWalletGooglePayTokenDecryptedContext) SetPaymentMethod(v string) {
	o.PaymentMethod = &v
}

func (o DigitalWalletGooglePayTokenDecryptedContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.HasCryptogram != nil {
		toSerialize["has_cryptogram"] = o.HasCryptogram
	}
	if o.Eci.IsSet() {
		toSerialize["eci"] = o.Eci.Get()
	}
	if o.MessageExpiration != nil {
		toSerialize["message_expiration"] = o.MessageExpiration
	}
	if o.MessageId != nil {
		toSerialize["message_id"] = o.MessageId
	}
	if o.PaymentMethod != nil {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	return json.Marshal(toSerialize)
}

type NullableDigitalWalletGooglePayTokenDecryptedContext struct {
	value *DigitalWalletGooglePayTokenDecryptedContext
	isSet bool
}

func (v NullableDigitalWalletGooglePayTokenDecryptedContext) Get() *DigitalWalletGooglePayTokenDecryptedContext {
	return v.value
}

func (v *NullableDigitalWalletGooglePayTokenDecryptedContext) Set(val *DigitalWalletGooglePayTokenDecryptedContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletGooglePayTokenDecryptedContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletGooglePayTokenDecryptedContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletGooglePayTokenDecryptedContext(val *DigitalWalletGooglePayTokenDecryptedContext) *NullableDigitalWalletGooglePayTokenDecryptedContext {
	return &NullableDigitalWalletGooglePayTokenDecryptedContext{value: val, isSet: true}
}

func (v NullableDigitalWalletGooglePayTokenDecryptedContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletGooglePayTokenDecryptedContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


