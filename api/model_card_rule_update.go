/*
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.0
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// CardRuleUpdate Updates a rule for a card transactions.
type CardRuleUpdate struct {
	// Whether this rule is currently in use. Rules can be deactivated to allow for them to be kept around and re-activated at a later date.
	Active *bool `json:"active,omitempty"`
	// The environment to use this rule in. This rule will only be used for transactions created in that environment.
	Environment *string `json:"environment,omitempty"`
	// The numeric rank of a rule. Rules with a lower position value are processed first. When a rule is inserted at a position, any rules with the the same value or higher are down a position accordingly.
	Position *float32 `json:"position,omitempty"`
	// One or more conditions that apply for this rule. Each condition needs to match for this rule to go into effect.
	Conditions *[]CardRule `json:"conditions,omitempty"`
	// A list of IDs for the payment services to use, in order of priority. The payment services all need to process cards.
	PaymentServiceIds *[]string `json:"payment_service_ids,omitempty"`
	// Defines what strategy to use when all of the payment services defined in this rule declined or otherwise were not able to process the card.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `decline` - Decline the transaction.
	UnprocessableFallbackStrategy *string `json:"unprocessable_fallback_strategy,omitempty"`
	// Defines what strategy to use when this rule is not valid. This can happen when the rule has triggered for a certain transaction but none of the listed payment services are eligible to process that transaction currency.  * `use_all_providers` - Try all payment services enabled for this currency in order of priority, even if they are not listed in this rule. This is the default behaviour for a rule. * `skip` - Skip this rule and instead move on to the next highest priority rule. * `decline` - Decline the transaction.
	InvalidRuleFallbackStrategy *string `json:"invalid_rule_fallback_strategy,omitempty"`
}

// NewCardRuleUpdate instantiates a new CardRuleUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardRuleUpdate() *CardRuleUpdate {
	this := CardRuleUpdate{}
	var environment string = "production"
	this.Environment = &environment
	var unprocessableFallbackStrategy string = "use_all_providers"
	this.UnprocessableFallbackStrategy = &unprocessableFallbackStrategy
	var invalidRuleFallbackStrategy string = "use_all_providers"
	this.InvalidRuleFallbackStrategy = &invalidRuleFallbackStrategy
	return &this
}

// NewCardRuleUpdateWithDefaults instantiates a new CardRuleUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardRuleUpdateWithDefaults() *CardRuleUpdate {
	this := CardRuleUpdate{}
	var environment string = "production"
	this.Environment = &environment
	var unprocessableFallbackStrategy string = "use_all_providers"
	this.UnprocessableFallbackStrategy = &unprocessableFallbackStrategy
	var invalidRuleFallbackStrategy string = "use_all_providers"
	this.InvalidRuleFallbackStrategy = &invalidRuleFallbackStrategy
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *CardRuleUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetEnvironment() string {
	if o == nil || o.Environment == nil {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetEnvironmentOk() (*string, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *CardRuleUpdate) SetEnvironment(v string) {
	o.Environment = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetPosition() float32 {
	if o == nil || o.Position == nil {
		var ret float32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetPositionOk() (*float32, bool) {
	if o == nil || o.Position == nil {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasPosition() bool {
	if o != nil && o.Position != nil {
		return true
	}

	return false
}

// SetPosition gets a reference to the given float32 and assigns it to the Position field.
func (o *CardRuleUpdate) SetPosition(v float32) {
	o.Position = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetConditions() []CardRule {
	if o == nil || o.Conditions == nil {
		var ret []CardRule
		return ret
	}
	return *o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetConditionsOk() (*[]CardRule, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []CardRule and assigns it to the Conditions field.
func (o *CardRuleUpdate) SetConditions(v []CardRule) {
	o.Conditions = &v
}

// GetPaymentServiceIds returns the PaymentServiceIds field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetPaymentServiceIds() []string {
	if o == nil || o.PaymentServiceIds == nil {
		var ret []string
		return ret
	}
	return *o.PaymentServiceIds
}

// GetPaymentServiceIdsOk returns a tuple with the PaymentServiceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetPaymentServiceIdsOk() (*[]string, bool) {
	if o == nil || o.PaymentServiceIds == nil {
		return nil, false
	}
	return o.PaymentServiceIds, true
}

// HasPaymentServiceIds returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasPaymentServiceIds() bool {
	if o != nil && o.PaymentServiceIds != nil {
		return true
	}

	return false
}

// SetPaymentServiceIds gets a reference to the given []string and assigns it to the PaymentServiceIds field.
func (o *CardRuleUpdate) SetPaymentServiceIds(v []string) {
	o.PaymentServiceIds = &v
}

// GetUnprocessableFallbackStrategy returns the UnprocessableFallbackStrategy field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetUnprocessableFallbackStrategy() string {
	if o == nil || o.UnprocessableFallbackStrategy == nil {
		var ret string
		return ret
	}
	return *o.UnprocessableFallbackStrategy
}

// GetUnprocessableFallbackStrategyOk returns a tuple with the UnprocessableFallbackStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetUnprocessableFallbackStrategyOk() (*string, bool) {
	if o == nil || o.UnprocessableFallbackStrategy == nil {
		return nil, false
	}
	return o.UnprocessableFallbackStrategy, true
}

// HasUnprocessableFallbackStrategy returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasUnprocessableFallbackStrategy() bool {
	if o != nil && o.UnprocessableFallbackStrategy != nil {
		return true
	}

	return false
}

// SetUnprocessableFallbackStrategy gets a reference to the given string and assigns it to the UnprocessableFallbackStrategy field.
func (o *CardRuleUpdate) SetUnprocessableFallbackStrategy(v string) {
	o.UnprocessableFallbackStrategy = &v
}

// GetInvalidRuleFallbackStrategy returns the InvalidRuleFallbackStrategy field value if set, zero value otherwise.
func (o *CardRuleUpdate) GetInvalidRuleFallbackStrategy() string {
	if o == nil || o.InvalidRuleFallbackStrategy == nil {
		var ret string
		return ret
	}
	return *o.InvalidRuleFallbackStrategy
}

// GetInvalidRuleFallbackStrategyOk returns a tuple with the InvalidRuleFallbackStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardRuleUpdate) GetInvalidRuleFallbackStrategyOk() (*string, bool) {
	if o == nil || o.InvalidRuleFallbackStrategy == nil {
		return nil, false
	}
	return o.InvalidRuleFallbackStrategy, true
}

// HasInvalidRuleFallbackStrategy returns a boolean if a field has been set.
func (o *CardRuleUpdate) HasInvalidRuleFallbackStrategy() bool {
	if o != nil && o.InvalidRuleFallbackStrategy != nil {
		return true
	}

	return false
}

// SetInvalidRuleFallbackStrategy gets a reference to the given string and assigns it to the InvalidRuleFallbackStrategy field.
func (o *CardRuleUpdate) SetInvalidRuleFallbackStrategy(v string) {
	o.InvalidRuleFallbackStrategy = &v
}

func (o CardRuleUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.Position != nil {
		toSerialize["position"] = o.Position
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.PaymentServiceIds != nil {
		toSerialize["payment_service_ids"] = o.PaymentServiceIds
	}
	if o.UnprocessableFallbackStrategy != nil {
		toSerialize["unprocessable_fallback_strategy"] = o.UnprocessableFallbackStrategy
	}
	if o.InvalidRuleFallbackStrategy != nil {
		toSerialize["invalid_rule_fallback_strategy"] = o.InvalidRuleFallbackStrategy
	}
	return json.Marshal(toSerialize)
}

type NullableCardRuleUpdate struct {
	value *CardRuleUpdate
	isSet bool
}

func (v NullableCardRuleUpdate) Get() *CardRuleUpdate {
	return v.value
}

func (v *NullableCardRuleUpdate) Set(val *CardRuleUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCardRuleUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCardRuleUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardRuleUpdate(val *CardRuleUpdate) *NullableCardRuleUpdate {
	return &NullableCardRuleUpdate{value: val, isSet: true}
}

func (v NullableCardRuleUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardRuleUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


