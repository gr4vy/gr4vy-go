/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// ReportExecutionUrl The temporary signed URL to download the result of a report execution and its expiration date and time.
type ReportExecutionUrl struct {
	// The URL to download the report execution.
	Url *string `json:"url,omitempty"`
	// The date and time when the download URL expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// NewReportExecutionUrl instantiates a new ReportExecutionUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportExecutionUrl() *ReportExecutionUrl {
	this := ReportExecutionUrl{}
	return &this
}

// NewReportExecutionUrlWithDefaults instantiates a new ReportExecutionUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportExecutionUrlWithDefaults() *ReportExecutionUrl {
	this := ReportExecutionUrl{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ReportExecutionUrl) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionUrl) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ReportExecutionUrl) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ReportExecutionUrl) SetUrl(v string) {
	o.Url = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ReportExecutionUrl) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionUrl) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ReportExecutionUrl) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *ReportExecutionUrl) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

func (o ReportExecutionUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullableReportExecutionUrl struct {
	value *ReportExecutionUrl
	isSet bool
}

func (v NullableReportExecutionUrl) Get() *ReportExecutionUrl {
	return v.value
}

func (v *NullableReportExecutionUrl) Set(val *ReportExecutionUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableReportExecutionUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableReportExecutionUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportExecutionUrl(val *ReportExecutionUrl) *NullableReportExecutionUrl {
	return &NullableReportExecutionUrl{value: val, isSet: true}
}

func (v NullableReportExecutionUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportExecutionUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


