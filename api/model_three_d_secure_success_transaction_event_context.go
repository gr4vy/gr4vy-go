/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// ThreeDSecureSuccessTransactionEventContext 3DS context.
type ThreeDSecureSuccessTransactionEventContext struct {
	// The electronic commerce indicator for the 3DS transaction.
	Eci *string `json:"eci,omitempty"`
	// The cardholder authentication value or AAV.
	Cavv *string `json:"cavv,omitempty"`
	// The version of 3-D Secure that was used.
	Version *string `json:"version,omitempty"`
	// For 3-D Secure version 1, the enrolment response. For 3-D Secure version , the transaction status from the `ARes`.
	DirectoryResponse *string `json:"directory_response,omitempty"`
	// The transaction status from the challenge result (not required for frictionless).
	AuthenticationResponse NullableString `json:"authentication_response,omitempty"`
	// The transaction identifier.
	DirectoryTransactionId NullableString `json:"directory_transaction_id,omitempty"`
	// The CAVV Algorithm used.
	CavvAlgorithm NullableString `json:"cavv_algorithm,omitempty"`
	// The method used for 3DS authentication for this transaction.
	Method NullableString `json:"method,omitempty"`
}

// NewThreeDSecureSuccessTransactionEventContext instantiates a new ThreeDSecureSuccessTransactionEventContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThreeDSecureSuccessTransactionEventContext() *ThreeDSecureSuccessTransactionEventContext {
	this := ThreeDSecureSuccessTransactionEventContext{}
	return &this
}

// NewThreeDSecureSuccessTransactionEventContextWithDefaults instantiates a new ThreeDSecureSuccessTransactionEventContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThreeDSecureSuccessTransactionEventContextWithDefaults() *ThreeDSecureSuccessTransactionEventContext {
	this := ThreeDSecureSuccessTransactionEventContext{}
	return &this
}

// GetEci returns the Eci field value if set, zero value otherwise.
func (o *ThreeDSecureSuccessTransactionEventContext) GetEci() string {
	if o == nil || o.Eci == nil {
		var ret string
		return ret
	}
	return *o.Eci
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) GetEciOk() (*string, bool) {
	if o == nil || o.Eci == nil {
		return nil, false
	}
	return o.Eci, true
}

// HasEci returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasEci() bool {
	if o != nil && o.Eci != nil {
		return true
	}

	return false
}

// SetEci gets a reference to the given string and assigns it to the Eci field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetEci(v string) {
	o.Eci = &v
}

// GetCavv returns the Cavv field value if set, zero value otherwise.
func (o *ThreeDSecureSuccessTransactionEventContext) GetCavv() string {
	if o == nil || o.Cavv == nil {
		var ret string
		return ret
	}
	return *o.Cavv
}

// GetCavvOk returns a tuple with the Cavv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) GetCavvOk() (*string, bool) {
	if o == nil || o.Cavv == nil {
		return nil, false
	}
	return o.Cavv, true
}

// HasCavv returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasCavv() bool {
	if o != nil && o.Cavv != nil {
		return true
	}

	return false
}

// SetCavv gets a reference to the given string and assigns it to the Cavv field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetCavv(v string) {
	o.Cavv = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ThreeDSecureSuccessTransactionEventContext) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetVersion(v string) {
	o.Version = &v
}

// GetDirectoryResponse returns the DirectoryResponse field value if set, zero value otherwise.
func (o *ThreeDSecureSuccessTransactionEventContext) GetDirectoryResponse() string {
	if o == nil || o.DirectoryResponse == nil {
		var ret string
		return ret
	}
	return *o.DirectoryResponse
}

// GetDirectoryResponseOk returns a tuple with the DirectoryResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) GetDirectoryResponseOk() (*string, bool) {
	if o == nil || o.DirectoryResponse == nil {
		return nil, false
	}
	return o.DirectoryResponse, true
}

// HasDirectoryResponse returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasDirectoryResponse() bool {
	if o != nil && o.DirectoryResponse != nil {
		return true
	}

	return false
}

// SetDirectoryResponse gets a reference to the given string and assigns it to the DirectoryResponse field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetDirectoryResponse(v string) {
	o.DirectoryResponse = &v
}

// GetAuthenticationResponse returns the AuthenticationResponse field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSecureSuccessTransactionEventContext) GetAuthenticationResponse() string {
	if o == nil || o.AuthenticationResponse.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationResponse.Get()
}

// GetAuthenticationResponseOk returns a tuple with the AuthenticationResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSecureSuccessTransactionEventContext) GetAuthenticationResponseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationResponse.Get(), o.AuthenticationResponse.IsSet()
}

// HasAuthenticationResponse returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasAuthenticationResponse() bool {
	if o != nil && o.AuthenticationResponse.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationResponse gets a reference to the given NullableString and assigns it to the AuthenticationResponse field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetAuthenticationResponse(v string) {
	o.AuthenticationResponse.Set(&v)
}
// SetAuthenticationResponseNil sets the value for AuthenticationResponse to be an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) SetAuthenticationResponseNil() {
	o.AuthenticationResponse.Set(nil)
}

// UnsetAuthenticationResponse ensures that no value is present for AuthenticationResponse, not even an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) UnsetAuthenticationResponse() {
	o.AuthenticationResponse.Unset()
}

// GetDirectoryTransactionId returns the DirectoryTransactionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSecureSuccessTransactionEventContext) GetDirectoryTransactionId() string {
	if o == nil || o.DirectoryTransactionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DirectoryTransactionId.Get()
}

// GetDirectoryTransactionIdOk returns a tuple with the DirectoryTransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSecureSuccessTransactionEventContext) GetDirectoryTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DirectoryTransactionId.Get(), o.DirectoryTransactionId.IsSet()
}

// HasDirectoryTransactionId returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasDirectoryTransactionId() bool {
	if o != nil && o.DirectoryTransactionId.IsSet() {
		return true
	}

	return false
}

// SetDirectoryTransactionId gets a reference to the given NullableString and assigns it to the DirectoryTransactionId field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetDirectoryTransactionId(v string) {
	o.DirectoryTransactionId.Set(&v)
}
// SetDirectoryTransactionIdNil sets the value for DirectoryTransactionId to be an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) SetDirectoryTransactionIdNil() {
	o.DirectoryTransactionId.Set(nil)
}

// UnsetDirectoryTransactionId ensures that no value is present for DirectoryTransactionId, not even an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) UnsetDirectoryTransactionId() {
	o.DirectoryTransactionId.Unset()
}

// GetCavvAlgorithm returns the CavvAlgorithm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSecureSuccessTransactionEventContext) GetCavvAlgorithm() string {
	if o == nil || o.CavvAlgorithm.Get() == nil {
		var ret string
		return ret
	}
	return *o.CavvAlgorithm.Get()
}

// GetCavvAlgorithmOk returns a tuple with the CavvAlgorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSecureSuccessTransactionEventContext) GetCavvAlgorithmOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CavvAlgorithm.Get(), o.CavvAlgorithm.IsSet()
}

// HasCavvAlgorithm returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasCavvAlgorithm() bool {
	if o != nil && o.CavvAlgorithm.IsSet() {
		return true
	}

	return false
}

// SetCavvAlgorithm gets a reference to the given NullableString and assigns it to the CavvAlgorithm field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetCavvAlgorithm(v string) {
	o.CavvAlgorithm.Set(&v)
}
// SetCavvAlgorithmNil sets the value for CavvAlgorithm to be an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) SetCavvAlgorithmNil() {
	o.CavvAlgorithm.Set(nil)
}

// UnsetCavvAlgorithm ensures that no value is present for CavvAlgorithm, not even an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) UnsetCavvAlgorithm() {
	o.CavvAlgorithm.Unset()
}

// GetMethod returns the Method field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThreeDSecureSuccessTransactionEventContext) GetMethod() string {
	if o == nil || o.Method.Get() == nil {
		var ret string
		return ret
	}
	return *o.Method.Get()
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThreeDSecureSuccessTransactionEventContext) GetMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Method.Get(), o.Method.IsSet()
}

// HasMethod returns a boolean if a field has been set.
func (o *ThreeDSecureSuccessTransactionEventContext) HasMethod() bool {
	if o != nil && o.Method.IsSet() {
		return true
	}

	return false
}

// SetMethod gets a reference to the given NullableString and assigns it to the Method field.
func (o *ThreeDSecureSuccessTransactionEventContext) SetMethod(v string) {
	o.Method.Set(&v)
}
// SetMethodNil sets the value for Method to be an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) SetMethodNil() {
	o.Method.Set(nil)
}

// UnsetMethod ensures that no value is present for Method, not even an explicit nil
func (o *ThreeDSecureSuccessTransactionEventContext) UnsetMethod() {
	o.Method.Unset()
}

func (o ThreeDSecureSuccessTransactionEventContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Eci != nil {
		toSerialize["eci"] = o.Eci
	}
	if o.Cavv != nil {
		toSerialize["cavv"] = o.Cavv
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.DirectoryResponse != nil {
		toSerialize["directory_response"] = o.DirectoryResponse
	}
	if o.AuthenticationResponse.IsSet() {
		toSerialize["authentication_response"] = o.AuthenticationResponse.Get()
	}
	if o.DirectoryTransactionId.IsSet() {
		toSerialize["directory_transaction_id"] = o.DirectoryTransactionId.Get()
	}
	if o.CavvAlgorithm.IsSet() {
		toSerialize["cavv_algorithm"] = o.CavvAlgorithm.Get()
	}
	if o.Method.IsSet() {
		toSerialize["method"] = o.Method.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableThreeDSecureSuccessTransactionEventContext struct {
	value *ThreeDSecureSuccessTransactionEventContext
	isSet bool
}

func (v NullableThreeDSecureSuccessTransactionEventContext) Get() *ThreeDSecureSuccessTransactionEventContext {
	return v.value
}

func (v *NullableThreeDSecureSuccessTransactionEventContext) Set(val *ThreeDSecureSuccessTransactionEventContext) {
	v.value = val
	v.isSet = true
}

func (v NullableThreeDSecureSuccessTransactionEventContext) IsSet() bool {
	return v.isSet
}

func (v *NullableThreeDSecureSuccessTransactionEventContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThreeDSecureSuccessTransactionEventContext(val *ThreeDSecureSuccessTransactionEventContext) *NullableThreeDSecureSuccessTransactionEventContext {
	return &NullableThreeDSecureSuccessTransactionEventContext{value: val, isSet: true}
}

func (v NullableThreeDSecureSuccessTransactionEventContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThreeDSecureSuccessTransactionEventContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


