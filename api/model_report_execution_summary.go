/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// ReportExecutionSummary A report execution summary.
type ReportExecutionSummary struct {
	// The type of this resource. Is always `report-execution`.
	Type *string `json:"type,omitempty"`
	// The unique identifier for this report execution.
	Id *string `json:"id,omitempty"`
	// The date and time this report execution was created in our system.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time this report execution was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The status of this report execution.
	Status *string `json:"status,omitempty"`
	Context *ReportExecutionSummaryContext `json:"context,omitempty"`
}

// NewReportExecutionSummary instantiates a new ReportExecutionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportExecutionSummary() *ReportExecutionSummary {
	this := ReportExecutionSummary{}
	return &this
}

// NewReportExecutionSummaryWithDefaults instantiates a new ReportExecutionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportExecutionSummaryWithDefaults() *ReportExecutionSummary {
	this := ReportExecutionSummary{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ReportExecutionSummary) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ReportExecutionSummary) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ReportExecutionSummary) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ReportExecutionSummary) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ReportExecutionSummary) SetStatus(v string) {
	o.Status = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ReportExecutionSummary) GetContext() ReportExecutionSummaryContext {
	if o == nil || o.Context == nil {
		var ret ReportExecutionSummaryContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportExecutionSummary) GetContextOk() (*ReportExecutionSummaryContext, bool) {
	if o == nil || o.Context == nil {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ReportExecutionSummary) HasContext() bool {
	if o != nil && o.Context != nil {
		return true
	}

	return false
}

// SetContext gets a reference to the given ReportExecutionSummaryContext and assigns it to the Context field.
func (o *ReportExecutionSummary) SetContext(v ReportExecutionSummaryContext) {
	o.Context = &v
}

func (o ReportExecutionSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Context != nil {
		toSerialize["context"] = o.Context
	}
	return json.Marshal(toSerialize)
}

type NullableReportExecutionSummary struct {
	value *ReportExecutionSummary
	isSet bool
}

func (v NullableReportExecutionSummary) Get() *ReportExecutionSummary {
	return v.value
}

func (v *NullableReportExecutionSummary) Set(val *ReportExecutionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableReportExecutionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableReportExecutionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportExecutionSummary(val *ReportExecutionSummary) *NullableReportExecutionSummary {
	return &NullableReportExecutionSummary{value: val, isSet: true}
}

func (v NullableReportExecutionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportExecutionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


