/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// Settlement A settlement record.
type Settlement struct {
	// The type of this resource. Is always `settlement`.
	Type *string `json:"type,omitempty"`
	// The unique identifier for this settlement.
	Id *string `json:"id,omitempty"`
	// The ID of the merchant account to which this settlement belongs to.
	MerchantAccountId *string `json:"merchant_account_id,omitempty"`
	// The date and time when this settlement was created in our system.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this settlement was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The date and time when this settlement occurred.
	PostedAt *time.Time `json:"posted_at,omitempty"`
	// The date and time when information about this settlement was ingested into our system.
	IngestedAt *time.Time `json:"ingested_at,omitempty"`
	// The currency code of this settlement in ISO 4217 three-letter code format.
	Currency *string `json:"currency,omitempty"`
	// The net amount of this settlement.
	Amount *int32 `json:"amount,omitempty"`
	// The exchange rate used to convert amounts from the processing currency to the settlement currency.
	ExchangeRate NullableFloat32 `json:"exchange_rate,omitempty"`
	// The total commission of this settlement, expressed in `currency`.
	Commission *int32 `json:"commission,omitempty"`
	// The interchange fee of this settlement, expressed in `currency`.
	Interchange NullableInt32 `json:"interchange,omitempty"`
	// The markup of this settlement by the acquirer, expressed in `currency`.
	Markup NullableInt32 `json:"markup,omitempty"`
	// The scheme fee of this settlement, expressed in `currency`.
	SchemeFee NullableInt32 `json:"scheme_fee,omitempty"`
	// The ID of the payment service report containing this settlement.
	PaymentServiceReportId *string `json:"payment_service_report_id,omitempty"`
	// The list of payment service report file IDs that make up the payment service report containing this settlement.
	PaymentServiceReportFileIds *[]string `json:"payment_service_report_file_ids,omitempty"`
	// The ID of the transaction associated with this settlement.
	TransactionId *string `json:"transaction_id,omitempty"`
}

// NewSettlement instantiates a new Settlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettlement() *Settlement {
	this := Settlement{}
	return &this
}

// NewSettlementWithDefaults instantiates a new Settlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettlementWithDefaults() *Settlement {
	this := Settlement{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Settlement) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Settlement) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Settlement) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Settlement) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Settlement) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Settlement) SetId(v string) {
	o.Id = &v
}

// GetMerchantAccountId returns the MerchantAccountId field value if set, zero value otherwise.
func (o *Settlement) GetMerchantAccountId() string {
	if o == nil || o.MerchantAccountId == nil {
		var ret string
		return ret
	}
	return *o.MerchantAccountId
}

// GetMerchantAccountIdOk returns a tuple with the MerchantAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetMerchantAccountIdOk() (*string, bool) {
	if o == nil || o.MerchantAccountId == nil {
		return nil, false
	}
	return o.MerchantAccountId, true
}

// HasMerchantAccountId returns a boolean if a field has been set.
func (o *Settlement) HasMerchantAccountId() bool {
	if o != nil && o.MerchantAccountId != nil {
		return true
	}

	return false
}

// SetMerchantAccountId gets a reference to the given string and assigns it to the MerchantAccountId field.
func (o *Settlement) SetMerchantAccountId(v string) {
	o.MerchantAccountId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Settlement) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Settlement) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Settlement) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Settlement) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Settlement) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Settlement) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPostedAt returns the PostedAt field value if set, zero value otherwise.
func (o *Settlement) GetPostedAt() time.Time {
	if o == nil || o.PostedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.PostedAt
}

// GetPostedAtOk returns a tuple with the PostedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetPostedAtOk() (*time.Time, bool) {
	if o == nil || o.PostedAt == nil {
		return nil, false
	}
	return o.PostedAt, true
}

// HasPostedAt returns a boolean if a field has been set.
func (o *Settlement) HasPostedAt() bool {
	if o != nil && o.PostedAt != nil {
		return true
	}

	return false
}

// SetPostedAt gets a reference to the given time.Time and assigns it to the PostedAt field.
func (o *Settlement) SetPostedAt(v time.Time) {
	o.PostedAt = &v
}

// GetIngestedAt returns the IngestedAt field value if set, zero value otherwise.
func (o *Settlement) GetIngestedAt() time.Time {
	if o == nil || o.IngestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.IngestedAt
}

// GetIngestedAtOk returns a tuple with the IngestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetIngestedAtOk() (*time.Time, bool) {
	if o == nil || o.IngestedAt == nil {
		return nil, false
	}
	return o.IngestedAt, true
}

// HasIngestedAt returns a boolean if a field has been set.
func (o *Settlement) HasIngestedAt() bool {
	if o != nil && o.IngestedAt != nil {
		return true
	}

	return false
}

// SetIngestedAt gets a reference to the given time.Time and assigns it to the IngestedAt field.
func (o *Settlement) SetIngestedAt(v time.Time) {
	o.IngestedAt = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Settlement) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Settlement) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Settlement) SetCurrency(v string) {
	o.Currency = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Settlement) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Settlement) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Settlement) SetAmount(v int32) {
	o.Amount = &v
}

// GetExchangeRate returns the ExchangeRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settlement) GetExchangeRate() float32 {
	if o == nil || o.ExchangeRate.Get() == nil {
		var ret float32
		return ret
	}
	return *o.ExchangeRate.Get()
}

// GetExchangeRateOk returns a tuple with the ExchangeRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settlement) GetExchangeRateOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExchangeRate.Get(), o.ExchangeRate.IsSet()
}

// HasExchangeRate returns a boolean if a field has been set.
func (o *Settlement) HasExchangeRate() bool {
	if o != nil && o.ExchangeRate.IsSet() {
		return true
	}

	return false
}

// SetExchangeRate gets a reference to the given NullableFloat32 and assigns it to the ExchangeRate field.
func (o *Settlement) SetExchangeRate(v float32) {
	o.ExchangeRate.Set(&v)
}
// SetExchangeRateNil sets the value for ExchangeRate to be an explicit nil
func (o *Settlement) SetExchangeRateNil() {
	o.ExchangeRate.Set(nil)
}

// UnsetExchangeRate ensures that no value is present for ExchangeRate, not even an explicit nil
func (o *Settlement) UnsetExchangeRate() {
	o.ExchangeRate.Unset()
}

// GetCommission returns the Commission field value if set, zero value otherwise.
func (o *Settlement) GetCommission() int32 {
	if o == nil || o.Commission == nil {
		var ret int32
		return ret
	}
	return *o.Commission
}

// GetCommissionOk returns a tuple with the Commission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetCommissionOk() (*int32, bool) {
	if o == nil || o.Commission == nil {
		return nil, false
	}
	return o.Commission, true
}

// HasCommission returns a boolean if a field has been set.
func (o *Settlement) HasCommission() bool {
	if o != nil && o.Commission != nil {
		return true
	}

	return false
}

// SetCommission gets a reference to the given int32 and assigns it to the Commission field.
func (o *Settlement) SetCommission(v int32) {
	o.Commission = &v
}

// GetInterchange returns the Interchange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settlement) GetInterchange() int32 {
	if o == nil || o.Interchange.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Interchange.Get()
}

// GetInterchangeOk returns a tuple with the Interchange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settlement) GetInterchangeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Interchange.Get(), o.Interchange.IsSet()
}

// HasInterchange returns a boolean if a field has been set.
func (o *Settlement) HasInterchange() bool {
	if o != nil && o.Interchange.IsSet() {
		return true
	}

	return false
}

// SetInterchange gets a reference to the given NullableInt32 and assigns it to the Interchange field.
func (o *Settlement) SetInterchange(v int32) {
	o.Interchange.Set(&v)
}
// SetInterchangeNil sets the value for Interchange to be an explicit nil
func (o *Settlement) SetInterchangeNil() {
	o.Interchange.Set(nil)
}

// UnsetInterchange ensures that no value is present for Interchange, not even an explicit nil
func (o *Settlement) UnsetInterchange() {
	o.Interchange.Unset()
}

// GetMarkup returns the Markup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settlement) GetMarkup() int32 {
	if o == nil || o.Markup.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Markup.Get()
}

// GetMarkupOk returns a tuple with the Markup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settlement) GetMarkupOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Markup.Get(), o.Markup.IsSet()
}

// HasMarkup returns a boolean if a field has been set.
func (o *Settlement) HasMarkup() bool {
	if o != nil && o.Markup.IsSet() {
		return true
	}

	return false
}

// SetMarkup gets a reference to the given NullableInt32 and assigns it to the Markup field.
func (o *Settlement) SetMarkup(v int32) {
	o.Markup.Set(&v)
}
// SetMarkupNil sets the value for Markup to be an explicit nil
func (o *Settlement) SetMarkupNil() {
	o.Markup.Set(nil)
}

// UnsetMarkup ensures that no value is present for Markup, not even an explicit nil
func (o *Settlement) UnsetMarkup() {
	o.Markup.Unset()
}

// GetSchemeFee returns the SchemeFee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Settlement) GetSchemeFee() int32 {
	if o == nil || o.SchemeFee.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SchemeFee.Get()
}

// GetSchemeFeeOk returns a tuple with the SchemeFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Settlement) GetSchemeFeeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemeFee.Get(), o.SchemeFee.IsSet()
}

// HasSchemeFee returns a boolean if a field has been set.
func (o *Settlement) HasSchemeFee() bool {
	if o != nil && o.SchemeFee.IsSet() {
		return true
	}

	return false
}

// SetSchemeFee gets a reference to the given NullableInt32 and assigns it to the SchemeFee field.
func (o *Settlement) SetSchemeFee(v int32) {
	o.SchemeFee.Set(&v)
}
// SetSchemeFeeNil sets the value for SchemeFee to be an explicit nil
func (o *Settlement) SetSchemeFeeNil() {
	o.SchemeFee.Set(nil)
}

// UnsetSchemeFee ensures that no value is present for SchemeFee, not even an explicit nil
func (o *Settlement) UnsetSchemeFee() {
	o.SchemeFee.Unset()
}

// GetPaymentServiceReportId returns the PaymentServiceReportId field value if set, zero value otherwise.
func (o *Settlement) GetPaymentServiceReportId() string {
	if o == nil || o.PaymentServiceReportId == nil {
		var ret string
		return ret
	}
	return *o.PaymentServiceReportId
}

// GetPaymentServiceReportIdOk returns a tuple with the PaymentServiceReportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetPaymentServiceReportIdOk() (*string, bool) {
	if o == nil || o.PaymentServiceReportId == nil {
		return nil, false
	}
	return o.PaymentServiceReportId, true
}

// HasPaymentServiceReportId returns a boolean if a field has been set.
func (o *Settlement) HasPaymentServiceReportId() bool {
	if o != nil && o.PaymentServiceReportId != nil {
		return true
	}

	return false
}

// SetPaymentServiceReportId gets a reference to the given string and assigns it to the PaymentServiceReportId field.
func (o *Settlement) SetPaymentServiceReportId(v string) {
	o.PaymentServiceReportId = &v
}

// GetPaymentServiceReportFileIds returns the PaymentServiceReportFileIds field value if set, zero value otherwise.
func (o *Settlement) GetPaymentServiceReportFileIds() []string {
	if o == nil || o.PaymentServiceReportFileIds == nil {
		var ret []string
		return ret
	}
	return *o.PaymentServiceReportFileIds
}

// GetPaymentServiceReportFileIdsOk returns a tuple with the PaymentServiceReportFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetPaymentServiceReportFileIdsOk() (*[]string, bool) {
	if o == nil || o.PaymentServiceReportFileIds == nil {
		return nil, false
	}
	return o.PaymentServiceReportFileIds, true
}

// HasPaymentServiceReportFileIds returns a boolean if a field has been set.
func (o *Settlement) HasPaymentServiceReportFileIds() bool {
	if o != nil && o.PaymentServiceReportFileIds != nil {
		return true
	}

	return false
}

// SetPaymentServiceReportFileIds gets a reference to the given []string and assigns it to the PaymentServiceReportFileIds field.
func (o *Settlement) SetPaymentServiceReportFileIds(v []string) {
	o.PaymentServiceReportFileIds = &v
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *Settlement) GetTransactionId() string {
	if o == nil || o.TransactionId == nil {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Settlement) GetTransactionIdOk() (*string, bool) {
	if o == nil || o.TransactionId == nil {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *Settlement) HasTransactionId() bool {
	if o != nil && o.TransactionId != nil {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *Settlement) SetTransactionId(v string) {
	o.TransactionId = &v
}

func (o Settlement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MerchantAccountId != nil {
		toSerialize["merchant_account_id"] = o.MerchantAccountId
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.PostedAt != nil {
		toSerialize["posted_at"] = o.PostedAt
	}
	if o.IngestedAt != nil {
		toSerialize["ingested_at"] = o.IngestedAt
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.ExchangeRate.IsSet() {
		toSerialize["exchange_rate"] = o.ExchangeRate.Get()
	}
	if o.Commission != nil {
		toSerialize["commission"] = o.Commission
	}
	if o.Interchange.IsSet() {
		toSerialize["interchange"] = o.Interchange.Get()
	}
	if o.Markup.IsSet() {
		toSerialize["markup"] = o.Markup.Get()
	}
	if o.SchemeFee.IsSet() {
		toSerialize["scheme_fee"] = o.SchemeFee.Get()
	}
	if o.PaymentServiceReportId != nil {
		toSerialize["payment_service_report_id"] = o.PaymentServiceReportId
	}
	if o.PaymentServiceReportFileIds != nil {
		toSerialize["payment_service_report_file_ids"] = o.PaymentServiceReportFileIds
	}
	if o.TransactionId != nil {
		toSerialize["transaction_id"] = o.TransactionId
	}
	return json.Marshal(toSerialize)
}

type NullableSettlement struct {
	value *Settlement
	isSet bool
}

func (v NullableSettlement) Get() *Settlement {
	return v.value
}

func (v *NullableSettlement) Set(val *Settlement) {
	v.value = val
	v.isSet = true
}

func (v NullableSettlement) IsSet() bool {
	return v.isSet
}

func (v *NullableSettlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettlement(val *Settlement) *NullableSettlement {
	return &NullableSettlement{value: val, isSet: true}
}

func (v NullableSettlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


