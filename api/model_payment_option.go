/*
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.0
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// PaymentOption An available payment option for a locale.
type PaymentOption struct {
	// `payment-option`.
	Type *string `json:"type,omitempty"`
	// The type of payment method that is available.
	Method *string `json:"method,omitempty"`
}

// NewPaymentOption instantiates a new PaymentOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentOption() *PaymentOption {
	this := PaymentOption{}
	return &this
}

// NewPaymentOptionWithDefaults instantiates a new PaymentOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentOptionWithDefaults() *PaymentOption {
	this := PaymentOption{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PaymentOption) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PaymentOption) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PaymentOption) SetType(v string) {
	o.Type = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *PaymentOption) GetMethod() string {
	if o == nil || o.Method == nil {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentOption) GetMethodOk() (*string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *PaymentOption) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *PaymentOption) SetMethod(v string) {
	o.Method = &v
}

func (o PaymentOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentOption struct {
	value *PaymentOption
	isSet bool
}

func (v NullablePaymentOption) Get() *PaymentOption {
	return v.value
}

func (v *NullablePaymentOption) Set(val *PaymentOption) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentOption) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentOption(val *PaymentOption) *NullablePaymentOption {
	return &NullablePaymentOption{value: val, isSet: true}
}

func (v NullablePaymentOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


