/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// BrowserInfo struct for BrowserInfo
type BrowserInfo struct {
	// Indicates whether the client browser supports Java.
	JavaEnabled bool `json:"java_enabled"`
	// Indicates whether the client browser supports JavaScript.
	JavascriptEnabled bool `json:"javascript_enabled"`
	// The preferred language of the buyer, usually the language of the browser UI.
	Language string `json:"language"`
	// The color depth of the screen.
	ColorDepth float32 `json:"color_depth"`
	// The height of the screen in pixels.
	ScreenHeight float32 `json:"screen_height"`
	// The width of the screen in pixels.
	ScreenWidth float32 `json:"screen_width"`
	// Time-zone offset in minutes between UTC and buyer location.
	TimeZoneOffset float32 `json:"time_zone_offset"`
	// The platform that is being used to access the website.
	UserDevice string `json:"user_device"`
	// The user agent string for the current browser.
	UserAgent string `json:"user_agent"`
	// The `Accept` header of the request from the buyer's browser.
	AcceptHeader *string `json:"accept_header,omitempty"`
}

// NewBrowserInfo instantiates a new BrowserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrowserInfo(javaEnabled bool, javascriptEnabled bool, language string, colorDepth float32, screenHeight float32, screenWidth float32, timeZoneOffset float32, userDevice string, userAgent string) *BrowserInfo {
	this := BrowserInfo{}
	this.JavaEnabled = javaEnabled
	this.JavascriptEnabled = javascriptEnabled
	this.Language = language
	this.ColorDepth = colorDepth
	this.ScreenHeight = screenHeight
	this.ScreenWidth = screenWidth
	this.TimeZoneOffset = timeZoneOffset
	this.UserDevice = userDevice
	this.UserAgent = userAgent
	return &this
}

// NewBrowserInfoWithDefaults instantiates a new BrowserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrowserInfoWithDefaults() *BrowserInfo {
	this := BrowserInfo{}
	return &this
}

// GetJavaEnabled returns the JavaEnabled field value
func (o *BrowserInfo) GetJavaEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.JavaEnabled
}

// GetJavaEnabledOk returns a tuple with the JavaEnabled field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetJavaEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JavaEnabled, true
}

// SetJavaEnabled sets field value
func (o *BrowserInfo) SetJavaEnabled(v bool) {
	o.JavaEnabled = v
}

// GetJavascriptEnabled returns the JavascriptEnabled field value
func (o *BrowserInfo) GetJavascriptEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.JavascriptEnabled
}

// GetJavascriptEnabledOk returns a tuple with the JavascriptEnabled field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetJavascriptEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.JavascriptEnabled, true
}

// SetJavascriptEnabled sets field value
func (o *BrowserInfo) SetJavascriptEnabled(v bool) {
	o.JavascriptEnabled = v
}

// GetLanguage returns the Language field value
func (o *BrowserInfo) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *BrowserInfo) SetLanguage(v string) {
	o.Language = v
}

// GetColorDepth returns the ColorDepth field value
func (o *BrowserInfo) GetColorDepth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ColorDepth
}

// GetColorDepthOk returns a tuple with the ColorDepth field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetColorDepthOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ColorDepth, true
}

// SetColorDepth sets field value
func (o *BrowserInfo) SetColorDepth(v float32) {
	o.ColorDepth = v
}

// GetScreenHeight returns the ScreenHeight field value
func (o *BrowserInfo) GetScreenHeight() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ScreenHeight
}

// GetScreenHeightOk returns a tuple with the ScreenHeight field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetScreenHeightOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScreenHeight, true
}

// SetScreenHeight sets field value
func (o *BrowserInfo) SetScreenHeight(v float32) {
	o.ScreenHeight = v
}

// GetScreenWidth returns the ScreenWidth field value
func (o *BrowserInfo) GetScreenWidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ScreenWidth
}

// GetScreenWidthOk returns a tuple with the ScreenWidth field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetScreenWidthOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScreenWidth, true
}

// SetScreenWidth sets field value
func (o *BrowserInfo) SetScreenWidth(v float32) {
	o.ScreenWidth = v
}

// GetTimeZoneOffset returns the TimeZoneOffset field value
func (o *BrowserInfo) GetTimeZoneOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TimeZoneOffset
}

// GetTimeZoneOffsetOk returns a tuple with the TimeZoneOffset field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetTimeZoneOffsetOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TimeZoneOffset, true
}

// SetTimeZoneOffset sets field value
func (o *BrowserInfo) SetTimeZoneOffset(v float32) {
	o.TimeZoneOffset = v
}

// GetUserDevice returns the UserDevice field value
func (o *BrowserInfo) GetUserDevice() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserDevice
}

// GetUserDeviceOk returns a tuple with the UserDevice field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetUserDeviceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserDevice, true
}

// SetUserDevice sets field value
func (o *BrowserInfo) SetUserDevice(v string) {
	o.UserDevice = v
}

// GetUserAgent returns the UserAgent field value
func (o *BrowserInfo) GetUserAgent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetUserAgentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UserAgent, true
}

// SetUserAgent sets field value
func (o *BrowserInfo) SetUserAgent(v string) {
	o.UserAgent = v
}

// GetAcceptHeader returns the AcceptHeader field value if set, zero value otherwise.
func (o *BrowserInfo) GetAcceptHeader() string {
	if o == nil || o.AcceptHeader == nil {
		var ret string
		return ret
	}
	return *o.AcceptHeader
}

// GetAcceptHeaderOk returns a tuple with the AcceptHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrowserInfo) GetAcceptHeaderOk() (*string, bool) {
	if o == nil || o.AcceptHeader == nil {
		return nil, false
	}
	return o.AcceptHeader, true
}

// HasAcceptHeader returns a boolean if a field has been set.
func (o *BrowserInfo) HasAcceptHeader() bool {
	if o != nil && o.AcceptHeader != nil {
		return true
	}

	return false
}

// SetAcceptHeader gets a reference to the given string and assigns it to the AcceptHeader field.
func (o *BrowserInfo) SetAcceptHeader(v string) {
	o.AcceptHeader = &v
}

func (o BrowserInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["java_enabled"] = o.JavaEnabled
	}
	if true {
		toSerialize["javascript_enabled"] = o.JavascriptEnabled
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["color_depth"] = o.ColorDepth
	}
	if true {
		toSerialize["screen_height"] = o.ScreenHeight
	}
	if true {
		toSerialize["screen_width"] = o.ScreenWidth
	}
	if true {
		toSerialize["time_zone_offset"] = o.TimeZoneOffset
	}
	if true {
		toSerialize["user_device"] = o.UserDevice
	}
	if true {
		toSerialize["user_agent"] = o.UserAgent
	}
	if o.AcceptHeader != nil {
		toSerialize["accept_header"] = o.AcceptHeader
	}
	return json.Marshal(toSerialize)
}

type NullableBrowserInfo struct {
	value *BrowserInfo
	isSet bool
}

func (v NullableBrowserInfo) Get() *BrowserInfo {
	return v.value
}

func (v *NullableBrowserInfo) Set(val *BrowserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBrowserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBrowserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrowserInfo(val *BrowserInfo) *NullableBrowserInfo {
	return &NullableBrowserInfo{value: val, isSet: true}
}

func (v NullableBrowserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrowserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


