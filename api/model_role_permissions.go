/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// RolePermissions The permissions associated with a role.
type RolePermissions struct {
	// The list of permissions to allow for a role.
	Allow *[]string `json:"allow,omitempty"`
}

// NewRolePermissions instantiates a new RolePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRolePermissions() *RolePermissions {
	this := RolePermissions{}
	return &this
}

// NewRolePermissionsWithDefaults instantiates a new RolePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRolePermissionsWithDefaults() *RolePermissions {
	this := RolePermissions{}
	return &this
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *RolePermissions) GetAllow() []string {
	if o == nil || o.Allow == nil {
		var ret []string
		return ret
	}
	return *o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RolePermissions) GetAllowOk() (*[]string, bool) {
	if o == nil || o.Allow == nil {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *RolePermissions) HasAllow() bool {
	if o != nil && o.Allow != nil {
		return true
	}

	return false
}

// SetAllow gets a reference to the given []string and assigns it to the Allow field.
func (o *RolePermissions) SetAllow(v []string) {
	o.Allow = &v
}

func (o RolePermissions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Allow != nil {
		toSerialize["allow"] = o.Allow
	}
	return json.Marshal(toSerialize)
}

type NullableRolePermissions struct {
	value *RolePermissions
	isSet bool
}

func (v NullableRolePermissions) Get() *RolePermissions {
	return v.value
}

func (v *NullableRolePermissions) Set(val *RolePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableRolePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableRolePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRolePermissions(val *RolePermissions) *NullableRolePermissions {
	return &NullableRolePermissions{value: val, isSet: true}
}

func (v NullableRolePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRolePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


