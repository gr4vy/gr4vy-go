/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// AuditLogUser The user who performed the action.
type AuditLogUser struct {
	// The ID of the user.
	Id *string `json:"id,omitempty"`
	// The name of the user.
	Name *string `json:"name,omitempty"`
	// The email address for this user.
	EmailAddress NullableString `json:"email_address,omitempty"`
	// Whether the user is Gr4vy staff.
	Staff *bool `json:"staff,omitempty"`
	// The status of the user.
	Status *string `json:"status,omitempty"`
}

// NewAuditLogUser instantiates a new AuditLogUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogUser() *AuditLogUser {
	this := AuditLogUser{}
	return &this
}

// NewAuditLogUserWithDefaults instantiates a new AuditLogUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogUserWithDefaults() *AuditLogUser {
	this := AuditLogUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditLogUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditLogUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditLogUser) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuditLogUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuditLogUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuditLogUser) SetName(v string) {
	o.Name = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuditLogUser) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogUser) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *AuditLogUser) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *AuditLogUser) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *AuditLogUser) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *AuditLogUser) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetStaff returns the Staff field value if set, zero value otherwise.
func (o *AuditLogUser) GetStaff() bool {
	if o == nil || o.Staff == nil {
		var ret bool
		return ret
	}
	return *o.Staff
}

// GetStaffOk returns a tuple with the Staff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogUser) GetStaffOk() (*bool, bool) {
	if o == nil || o.Staff == nil {
		return nil, false
	}
	return o.Staff, true
}

// HasStaff returns a boolean if a field has been set.
func (o *AuditLogUser) HasStaff() bool {
	if o != nil && o.Staff != nil {
		return true
	}

	return false
}

// SetStaff gets a reference to the given bool and assigns it to the Staff field.
func (o *AuditLogUser) SetStaff(v bool) {
	o.Staff = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AuditLogUser) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogUser) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AuditLogUser) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AuditLogUser) SetStatus(v string) {
	o.Status = &v
}

func (o AuditLogUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.EmailAddress.IsSet() {
		toSerialize["email_address"] = o.EmailAddress.Get()
	}
	if o.Staff != nil {
		toSerialize["staff"] = o.Staff
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableAuditLogUser struct {
	value *AuditLogUser
	isSet bool
}

func (v NullableAuditLogUser) Get() *AuditLogUser {
	return v.value
}

func (v *NullableAuditLogUser) Set(val *AuditLogUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogUser(val *AuditLogUser) *NullableAuditLogUser {
	return &NullableAuditLogUser{value: val, isSet: true}
}

func (v NullableAuditLogUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


