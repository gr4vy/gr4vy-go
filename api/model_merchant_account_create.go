/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// MerchantAccountCreate A request to create a merchant account.
type MerchantAccountCreate struct {
	// The unique ID for the merchant account.
	Id *string `json:"id,omitempty"`
	// The human-readable name of the merchant account.
	DisplayName *string `json:"display_name,omitempty"`
}

// NewMerchantAccountCreate instantiates a new MerchantAccountCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantAccountCreate() *MerchantAccountCreate {
	this := MerchantAccountCreate{}
	return &this
}

// NewMerchantAccountCreateWithDefaults instantiates a new MerchantAccountCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantAccountCreateWithDefaults() *MerchantAccountCreate {
	this := MerchantAccountCreate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MerchantAccountCreate) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantAccountCreate) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MerchantAccountCreate) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MerchantAccountCreate) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *MerchantAccountCreate) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantAccountCreate) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MerchantAccountCreate) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *MerchantAccountCreate) SetDisplayName(v string) {
	o.DisplayName = &v
}

func (o MerchantAccountCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	return json.Marshal(toSerialize)
}

type NullableMerchantAccountCreate struct {
	value *MerchantAccountCreate
	isSet bool
}

func (v NullableMerchantAccountCreate) Get() *MerchantAccountCreate {
	return v.value
}

func (v *NullableMerchantAccountCreate) Set(val *MerchantAccountCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantAccountCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantAccountCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantAccountCreate(val *MerchantAccountCreate) *NullableMerchantAccountCreate {
	return &NullableMerchantAccountCreate{value: val, isSet: true}
}

func (v NullableMerchantAccountCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantAccountCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


