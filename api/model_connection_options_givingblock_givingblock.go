/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// ConnectionOptionsGivingblockGivingblock Additional options for Giving Block connector.
type ConnectionOptionsGivingblockGivingblock struct {
	// The default crypto currency to display on the hosted page presented by The Giving Block.
	DefaultCryptocurrency *string `json:"defaultCryptocurrency,omitempty"`
}

// NewConnectionOptionsGivingblockGivingblock instantiates a new ConnectionOptionsGivingblockGivingblock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionOptionsGivingblockGivingblock() *ConnectionOptionsGivingblockGivingblock {
	this := ConnectionOptionsGivingblockGivingblock{}
	return &this
}

// NewConnectionOptionsGivingblockGivingblockWithDefaults instantiates a new ConnectionOptionsGivingblockGivingblock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionOptionsGivingblockGivingblockWithDefaults() *ConnectionOptionsGivingblockGivingblock {
	this := ConnectionOptionsGivingblockGivingblock{}
	return &this
}

// GetDefaultCryptocurrency returns the DefaultCryptocurrency field value if set, zero value otherwise.
func (o *ConnectionOptionsGivingblockGivingblock) GetDefaultCryptocurrency() string {
	if o == nil || o.DefaultCryptocurrency == nil {
		var ret string
		return ret
	}
	return *o.DefaultCryptocurrency
}

// GetDefaultCryptocurrencyOk returns a tuple with the DefaultCryptocurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionOptionsGivingblockGivingblock) GetDefaultCryptocurrencyOk() (*string, bool) {
	if o == nil || o.DefaultCryptocurrency == nil {
		return nil, false
	}
	return o.DefaultCryptocurrency, true
}

// HasDefaultCryptocurrency returns a boolean if a field has been set.
func (o *ConnectionOptionsGivingblockGivingblock) HasDefaultCryptocurrency() bool {
	if o != nil && o.DefaultCryptocurrency != nil {
		return true
	}

	return false
}

// SetDefaultCryptocurrency gets a reference to the given string and assigns it to the DefaultCryptocurrency field.
func (o *ConnectionOptionsGivingblockGivingblock) SetDefaultCryptocurrency(v string) {
	o.DefaultCryptocurrency = &v
}

func (o ConnectionOptionsGivingblockGivingblock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultCryptocurrency != nil {
		toSerialize["defaultCryptocurrency"] = o.DefaultCryptocurrency
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionOptionsGivingblockGivingblock struct {
	value *ConnectionOptionsGivingblockGivingblock
	isSet bool
}

func (v NullableConnectionOptionsGivingblockGivingblock) Get() *ConnectionOptionsGivingblockGivingblock {
	return v.value
}

func (v *NullableConnectionOptionsGivingblockGivingblock) Set(val *ConnectionOptionsGivingblockGivingblock) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionOptionsGivingblockGivingblock) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionOptionsGivingblockGivingblock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionOptionsGivingblockGivingblock(val *ConnectionOptionsGivingblockGivingblock) *NullableConnectionOptionsGivingblockGivingblock {
	return &NullableConnectionOptionsGivingblockGivingblock{value: val, isSet: true}
}

func (v NullableConnectionOptionsGivingblockGivingblock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionOptionsGivingblockGivingblock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


