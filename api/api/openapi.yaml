openapi: 3.0.0
info:
  contact:
    email: code@gr4vy.com
    name: Gr4vy Support
    url: https://gr4vy.com
  description: |-
    Welcome to the Gr4vy API reference documentation.
    Our API is still very much a work in product and subject to change.
  license:
    name: MIT
    url: https://raw.githubusercontent.com/gr4vy/gr4vy-openapi/main/LICENSE
  termsOfService: https://gr4vy.com
  title: Gr4vy API
  version: 1.1.0-beta
servers:
- url: https://api.{gr4vy_id}.gr4vy.app
  variables:
    gr4vy_id:
      default: plantly
      description: The subdomain for your Gr4vy instance.
security:
- BearerAuth: []
tags:
- description: |-
    An Account Updater is a service provided by credit card issuers
    (such as banks and financial institutions) to merchants who accept
    recurring payments from customers. Its primary purpose is to help
    merchants maintain accurate and up-to-date payment information for
    their customers' credit or debit card accounts.

    In Gr4vy, the Account Updater service is provided in an on-demand
    and asynchronous fashion:

    1. A merchant requests an update for a set of stored cards.
    2. A request is submitted to a third-party service.
    3. When results are ready, new card details are stored and left in standby.
    4. Card details are updated when it gets determined that the original card
       is no longer valid (e.g. has expired).
  name: Account Updater
- description: Audit Logs provide an historic record of changes made to your Gr4vy
    instance.
  name: Audit Logs
- description: |-
    In Gr4vy, a buyer represents your customer, the shopper who's performing
    a checkout and making a purchase.

    A buyer can be used by you to:

    * Display a human readable name (`display_name`) for a buyer in the Gr4vy
    admin panel
    * Associate multiple stored payment methods with a single user
    * Initialize **Gr4vy Embed** with the buyer ID, automatically displaying the
      buyer's previously stored payment methods, allowing for faster checkout.
  name: Buyers
- description: Card Scheme definitions provide display information to a card scheme.
  name: Card Scheme Definitions
- description: |-
    A Checkout Session represents the session of a user as they progress
    through an online checkout.
  name: Checkout Sessions
- description: |-
    In Gr4vy, a digital wallet represents a way for a buyer to pay using
    card details already stored on their device via a digital wallet service
    such as Apple Pay or Google Pay. The buyer will not have to fill in their
    card details on checkout.

    The digital wallets API can be used to:

    * Register with a digital wallet provider.
    * List digital wallets currently registered.
  name: Digital Wallets
- description: |-
    In Gr4vy, a gift card represents a stored value card that can be used to pay for
    a transaction.
  name: Gift Cards
- description: |-
    In Gr4vy, a gift card service represents a configured provider for processing
    gift cards.
  name: Gift Card Services
- description: |-
    Gift card service definitions describe the fields required for a gift
    card service to be configured.
  name: Gift Card Service Definitions
- description: |-
    In Gr4vy, a merchant account represents an individual merchant in an
    instance. Each instance has one or more merchant accounts, and each
    merchant account has its own connections, Flow rules, transactions, and
    more.
  name: Merchant Accounts
- description: |-
    In Gr4vy, a payment method represents a way in which a payment can be
    processed, for example a card, a PayPal account, or a bank account.

    The payment method API can be used to:

    * List all the available payment methods
    * Filter the available payment method for a buyer in a specific currency
    and country.
    * Store (also known as vault) a payment method for a buyer.
    * Fetch all previously stored payment methods for a buyer.
  name: Payment Methods
- description: Payment Method definitions provide display information to a payment
    method.
  name: Payment Method Definitions
- description: |-
    In Gr4vy, a payment option represents a list of methods (card, PayPal,
    etc) that are available for a given locale.

    The payment options API can be used to:

    * Determine what types of payments can be processed in a specific locale.
    * Display a list options to a buyer to choose from.
  name: Payment Options
- description: |-
    Payment service definitions describe the fields required for a payment
    service to be configured.
  name: Payment Service Definitions
- description: |-
    In Gr4vy, a payment service represents a configured payment provider
    (Stripe, PayPal, Adyen, etc) for a specific payment type (card, bitcoin,
    etc)

    The payment services API can be used to:

    * Provide Gr4vy with the payment credentials for a payment provider.
    * Set a display name for a payment provider.
  name: Payment Services
- description: |-
    Vault Forward definitions describe a third party service that has been vetted
    to receive requests containing PCI data.
  name: Vault Forward Definitions
- description: |-
    A Vault Forward Configuration represents a third party service that is
    currently enabled to send requests containing PCI data.
  name: Vault Forward Configurations
- description: |-
    Vault Forwarding is a way to perform requests where, provided a template,
    Gr4vy will evaluate it to inject PCI data and forward it to third party
    services that have been vetted to receive such data.
  name: Vault Forward
- description: |-
    In Gr4vy, a report represents the configuration details to extract or
    dump a set of data into a downloadable CSV file. The data extracted
    by a report is configured via the reports API where you can specify:

    * Which fields should be in the dataset.
    * How the dataset should be sorted.
    * How the dataset should be filtered.

    Once a report is created, it may be executed on a one-off or recurring
    basis. One-off reports are executed only once shortly after the report
    is created, while recurring reports are executed periodically based on
    its configured frequency, e.g. weekly or monthly.

    During a report execution, the data is extracted and loaded into
    a CSV file according to the report's configuration. The resulting file
    may then be downloaded.

    The reports API can be used to:

    * Create and configure new reports.
    * List all reports.
    * View the configuration details of a report.
    * List a report's executions.
    * Reconfigure an existing report.
    * Generate a temporary URL to download the result of a report execution
    in CSV format.
  name: Reports
- description: |-
    In Gr4vy, a transaction represents a payment in any state, either before it
    is authorized, once it is captured, or after it has been refunded.

    The transactions API can be used to:

    - Authorize, capture, and store cards.
    - Authorize, capture, and store alternative payment methods like PayPal.
    - Refund, void, and otherwise cancel existing transactions.
  name: Transactions
- description: |-
    In Gr4vy, users can be granted access to specific types of resources and permissions
    to perform certain actions by being assigned one or more roles.
  name: Roles
- description: Endpoints related to the Gr4vy tokenization service.
  name: Tokens
paths:
  /account-updater/jobs:
    post:
      description: |-
        Creates an Account Updater job.

        A request is submitted to a third-party service, containing inquiries for a given
        set of payment methods. The job is not processed right away, but once created, it
        will store new card details automatically, if there are, when results are ready.

        A payment method is considered for the job if the following conditions are met:
        * It exists.
        * It's in a valid state: `status` is either `succeeded` or `processing`.
        * It corresponds to a card: `method` is `card`.
        * Its scheme is supported: `scheme` is `amex`, `discover`, `mastercard` or `visa`.
        * It doesn't have an in-progress inquiry already.

        The endpoint works in a best-efforts basis and it doesn't return any error when a payment
        method doesn't qualify for an inquiry. To determine what payment methods were considered
        for the job, an `inquiries` field, returned in the response body, contains the submitted
        inquiries. If none of the payment methods qualified for an inquiry, the job is not created
        and a `204 No Content` status code is returned.
      operationId: new-account-updater-job
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdaterJobCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountUpdaterJob'
          description: Returns the created Account Updater job.
        "204":
          description: |-
            Returns an empty response when no Account Updater job is created.
            This occurs when none of the payment methods qualifies for an inquiry.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted, missing required
            fields or the Account Updater service is not configured properly.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: Create Account Updater job
      tags:
      - Account Updater
  /api-logs:
    get:
      description: Returns a list of API 4XX and 5XX logs.
      operationId: list-api-logs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLogs'
          description: Returns a list of API logs.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List API error logs
      tags:
      - API Logs
  /audit-logs:
    get:
      description: Returns a list of audit logs.
      operationId: list-audit-logs
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `user` has an
          `id` that matches this value.
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `audit-log` has an
          `action` that matches this value.
        explode: true
        in: query
        name: action
        required: false
        schema:
          enum:
          - created
          - updated
          - deleted
          example: created
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `audit-log` has a
          `resource` that matches this type value.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          example: buyer
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogs'
          description: Returns a list of audit logs.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List audit logs
      tags:
      - Audit Logs
  /buyers:
    get:
      description: Returns a list of buyers.
      operationId: list-buyers
      parameters:
      - description: |-
          Filters the results to only the buyers for which the `display_name` or
          `external_identifier` matches this value. This field allows for a partial
          match, matching any buyer for which either of the fields partially or
          completely matches.
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: John
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that exactly matches this value.
        explode: true
        in: query
        name: external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyers'
          description: Returns a list of buyers.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List buyers
      tags:
      - Buyers
    post:
      description: |
        Adds a buyer, allowing for payment methods and transactions to be associated
        to this buyer.
      operationId: new-buyer
      requestBody:
        content:
          application/json:
            examples:
              Create a buyer:
                value:
                  external_identifier: "412231123"
                  display_name: John L.
            schema:
              $ref: '#/components/schemas/BuyerRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the buyer that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New buyer
      tags:
      - Buyers
  /buyers/{buyer_id}:
    delete:
      description: |-
        Deletes a buyer record. Any associated stored payment methods will remain
        in the system but no longer associated to the buyer.
      operationId: delete-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete buyer
      tags:
      - Buyers
    get:
      description: Gets the information about a buyer.
      operationId: get-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the information about a buyer.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get buyer
      tags:
      - Buyers
    put:
      description: |
        Updates a buyer's details.
      operationId: update-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update a buyer:
                value:
                  external_identifier: "42623266"
                  display_name: John D.
            schema:
              $ref: '#/components/schemas/BuyerUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the updated buyer record.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: Update buyer
      tags:
      - Buyers
  /buyers/{buyer_id}/shipping-details:
    get:
      description: Retrieve all shipping details for a buyer.
      operationId: list-buyer-shipping-details
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetails'
          description: Returns all associated shipping details.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: List buyer shipping details
      tags:
      - Buyers
    post:
      description: Adds a buyer shipping detail.
      operationId: new-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDetailRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetail'
          description: Returns the shipping detail that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New buyer shipping detail
      tags:
      - Buyers
  /buyers/{buyer_id}/shipping-details/{shipping_detail_id}:
    delete:
      description: Deletes a buyer shipping detail.
      operationId: delete-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a buyer's shipping detail.
        explode: false
        in: path
        name: shipping_detail_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete buyer shipping detail
      tags:
      - Buyers
    put:
      description: Updates shipping detail for a buyer.
      operationId: update-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a buyer's shipping detail.
        explode: false
        in: path
        name: shipping_detail_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDetailUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetail'
          description: Returns the updated shipping detail.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update buyer shipping details
      tags:
      - Buyers
  /buyers/gift-cards:
    get:
      description: |-
        Returns a list of all stored, not-expired gift cards and
        their balances for a buyer in a summarized format.

        All stored gift cards are returned, even if we were not able
        to fetch the latest balance.
      operationId: list-buyer-gift-cards
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCards--Summary'
          description: Returns a list of available gift cards for a buyer.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List gift cards buyer
      tags:
      - Gift Cards
  /buyers/payment-methods:
    get:
      description: |-
        Returns a list of stored payment methods for a buyer in a summarized format.
        Only payment methods that are compatible with at least one active payment
        service in that region are shown.
      operationId: list-buyer-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods--Tokenized'
          description: |-
            Returns a list of available payment methods for a buyer, filtered by the
            given currency and country code.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List payment methods for buyer
      tags:
      - Payment Methods
  /card-scheme-definitions:
    get:
      description: Returns a list of all available card scheme definitions.
      operationId: list-card-scheme-definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSchemeDefinitions'
          description: Returns a list of card scheme definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List card scheme definitions
      tags:
      - Card Scheme Definitions
  /checkout/sessions:
    post:
      description: Creates a new Checkout Session.
      operationId: new-checkout-session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutSessionCreateRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
          description: Returns the new Checkout Session.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: New checkout session
      tags:
      - Checkout Sessions
  /checkout/sessions/{checkout_session_id}:
    delete:
      description: Deletes a Checkout Session.
      operationId: delete-checkout-session
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the Checkout Session can not be found or
            has expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Delete checkout session
      tags:
      - Checkout Sessions
    get:
      description: Gets details about a current Checkout Session.
      operationId: get-checkout-session
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
          description: Returns details about a current Checkout Session.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the Checkout Session can not be found or
            has expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get checkout session
      tags:
      - Checkout Sessions
    put:
      description: Updates a Checkout Session.
      operationId: update-checkout-session
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutSessionUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
          description: Returns the updated Checkout Session.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Update checkout session
      tags:
      - Checkout Sessions
  /payment-methods:
    get:
      description: Returns a list of stored payment methods.
      operationId: list-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the payment methods for which the `status`
          matches with any of the provided status values.
        explode: true
        in: query
        name: status
        required: false
        schema:
          example:
          - succeeded
          - processing
          items:
            enum:
            - processing
            - buyer_approval_required
            - succeeded
            - failed
            type: string
          type: array
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods'
          description: Returns a list of payment methods.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment methods
      tags:
      - Payment Methods
    post:
      description: |
        Stores and vaults a new payment method.

        Vaulting a card only stores its information but doesn't validate it against any
        PSP, so ephemeral data like the security code, often referred to as the CVV or
        CVD, won't be used. In order to validate the card data, a CIT (Customer Initiated
        Transaction) must be done, even if it's a zero-value one.
      operationId: new-payment-method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns the created payment method.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New payment method
      tags:
      - Payment Methods
  /payment-methods/{payment_method_id}:
    delete:
      description: Removes a stored payment method.
      operationId: delete-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment method
      tags:
      - Payment Methods
    get:
      description: Gets the details for a stored payment method.
      operationId: get-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns a payment method.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment method
      tags:
      - Payment Methods
  /payment-method-definitions:
    get:
      description: Returns a list of all available payment method definitions.
      operationId: list-payment-method-definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodDefinitions'
          description: Returns a list of payment method definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment method definitions
      tags:
      - Payment Method Definitions
  /payment-options:
    get:
      description: |-
        Returns a list of available payment method options for the combination of
        amount, currency, country and metadata.

        If the amount is zero, payment options which do not support zero amounts,
        will be omitted in the response.

        Checkout flow rules are used to limit these result.
      operationId: list-payment-options
      parameters:
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      - description: Used by the Flow engine to filter the results based on the transaction
          amount.
        explode: true
        in: query
        name: amount
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Used by the Flow engine to filter available options based on various
          client-defined parameters. If present, this must be a string representing
          a valid JSON dictionary.
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          example: '{"restricted_items": "True"}'
          type: string
        style: form
      - description: |-
          An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
          determines the language for the labels returned for every payment option.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          example: en-US
          pattern: ^[a-z]{2}(?:-[A-Z]{2})?$
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptions'
          description: |-
            Returns a list of available payment options for the given query
            parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: Returns an error if  any of the query parameters are not recognized.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment options
      tags:
      - Payment Options
    post:
      description: |-
        Returns a list of available payment method options for the combination of
        amount, currency, country, metadata and list of cart items.

        If the amount is zero, payment options which do not support zero amounts,
        will be omitted in the response.

        Checkout flow rules are used to limit these result.
      operationId: post-list-payment-options
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentOptionsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptions'
          description: |-
            Returns a list of available payment options for the given query
            parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment options with POST
      tags:
      - Payment Options
  /payment-services:
    get:
      description: Lists the currently configured and activated payment services.
      operationId: list-payment-services
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `method` has been set to
          this value. For example `card`.
        explode: true
        in: query
        name: method
        required: false
        schema:
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        style: form
      - description: |-
          Filters the results to only show items which have been deleted.
          By default, deleted items will not be returned.
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
          description: Returns a list of payment services.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment services
      tags:
      - Payment Services
    post:
      description: Adds a new payment service by providing a custom name and a value
        for each of the required fields.
      operationId: new-payment-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceRequest'
      responses:
        "201":
          content:
            application/json:
              examples:
                Stripe:
                  value:
                    type: payment-service
                    id: faaad066-30b4-4997-a438-242b0752d7e1
                    merchant_account_id: default
                    payment_service_definition_id: stripe
                    method: card
                    display_name: Stripe
                    status: pending
                    accepted_currencies:
                    - EUR
                    accepted_countries:
                    - DE
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the created payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New payment service
      tags:
      - Payment Services
  /payment-services/{payment_service_id}:
    delete:
      description: Deletes a specific active payment service.
      operationId: delete-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment service
      tags:
      - Payment Services
    get:
      description: Retrieves the details of a single configured payment service.
      operationId: get-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns a payment service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service
      tags:
      - Payment Services
    put:
      description: Updates an existing payment service. Allows all fields to be changed
        except for the service ID.
      operationId: update-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceUpdate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the updated payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update payment service
      tags:
      - Payment Services
  /payment-service-definitions:
    get:
      description: Returns a list of all available payment service definitions.
      operationId: list-payment-service-definitions
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinitions'
          description: Returns a list of payment service definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment service definitions
      tags:
      - Payment Service Definitions
  /payment-service-definitions/{payment_service_definition_id}:
    get:
      description: Gets the definition for a payment service.
      operationId: get-payment-service-definition
      parameters:
      - description: The unique ID of the payment service definition.
        explode: false
        in: path
        name: payment_service_definition_id
        required: true
        schema:
          example: stripe-card
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinition'
          description: Returns a payment service definition.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service definition
      tags:
      - Payment Service Definitions
  /digital-wallets:
    get:
      description: Returns a list of all registered digital wallets.
      operationId: list-digital-wallets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallets'
          description: Returns a list of registered digital wallets.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List digital wallets
      tags:
      - Digital Wallets
    post:
      description: Register with a digital wallet provider.
      operationId: new-digital-wallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the newly registered digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: Register digital wallet
      tags:
      - Digital Wallets
  /digital-wallets/{digital_wallet_id}:
    delete:
      description: |-
        De-registers a digital wallet with a provider. Upon successful
        de-registration, the digital wallet's record is deleted and will no
        longer be available.

        A digital wallet of the Apple provider may only be de-registered if
        there are no active Apple Pay certificates. When there are only
        incomplete or expired Apple Pay certificates, these certificates
        are deleted alongside the Apple digital wallet's record.
      operationId: delete-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: De-register digital wallet
      tags:
      - Digital Wallets
    get:
      description: Returns a registered digital wallet.
      operationId: get-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns a registered digital wallet.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get digital wallet
      tags:
      - Digital Wallets
    put:
      description: Updates the values a digital wallet was registered with.
      operationId: update-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the updated digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update digital wallet
      tags:
      - Digital Wallets
  /transactions:
    get:
      description: Lists all transactions for an account. Sorted by last updated at.
      operationId: list-transactions
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          equal to the provided `amount_eq` value.
        explode: true
        in: query
        name: amount_eq
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          greater than or equal to the `amount_gte` value.
        explode: true
        in: query
        name: amount_gte
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          less than or equal to the `amount_lte` value.
        explode: true
        in: query
        name: amount_lte
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: Filters for transactions that are linked to the unique ID for
          a Checkout Session.
        explode: true
        in: query
        name: checkout_session_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: form
      - description: |-
          Filters the results to only transactions created after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_gte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: date-time
          type: string
        style: form
      - description: |-
          Filters the results to only transactions created before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_lte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: date-time
          type: string
        style: form
      - description: |-
          Filters for transactions that have matching `currency` values.
          The `currency` values provided must be formatted as 3-letter ISO
          currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example:
          - USD
          - GBP
          items:
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only the items for which the `external_identifier`
          matches this value.
        explode: true
        in: query
        name: external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters for transactions that have at least one gift card
          redemption with a matching `gift_card_id` value.
        explode: true
        in: query
        name: gift_card_id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: |-
          Filters for transactions that have at least one gift card
          redemption where the last 4 digits of its gift card number
          matches exactly with the provided value.
        explode: true
        in: query
        name: gift_card_last4
        required: false
        schema:
          example: "7890"
          maxLength: 4
          minLength: 4
          type: string
        style: form
      - description: |-
          When set to `true`, filters for transactions that have at least one gift
          card redemption associated with it. When set to `false`, filter for
          transactions that have no gift card redemptions.
        explode: true
        in: query
        name: has_gift_card_redemptions
        required: false
        schema:
          example: true
          type: boolean
        style: form
      - description: |-
          When set to `true`, filter for transactions that have at least one completed
          refund (including gift card refunds) associated with it. When set to `false`,
          filter for transactions that have no completed refunds.
        explode: true
        in: query
        name: has_refunds
        required: false
        schema:
          example: true
          type: boolean
        style: form
      - description: Filters for the transaction that has a matching `id` value.
        explode: true
        in: query
        name: id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: |-
          Filters for transactions where their `metadata` values
          contain all of the provided `metadata` keys. The value sent
          for `metadata` must be formatted as a JSON string, and all
          keys and values must be strings. This value should also be URL
          encoded.

          Duplicate keys are not supported. If a key is duplicated, only the
          last appearing value will be used.
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          example:
          - '{"key": "value"}'
          - '{"key_one": "value", "key_two": "value"}'
          items:
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only the items for which the `method` has been set to
          this value.
        explode: true
        in: query
        name: method
        required: false
        schema:
          example:
          - card
          items:
            enum:
            - afterpay
            - alipay
            - alipayhk
            - applepay
            - bacs
            - bancontact
            - banked
            - becs
            - bitpay
            - boleto
            - boost
            - card
            - checkout-session
            - click-to-pay
            - clearpay
            - dana
            - dcb
            - eps
            - fortumo
            - gcash
            - giropay
            - gocardless
            - googlepay
            - gopay
            - grabpay
            - ideal
            - id
            - kakaopay
            - klarna
            - laybuy
            - linepay
            - linkaja
            - maybankqrpay
            - multibanco
            - oney_3x
            - oney_4x
            - oney_6x
            - oney_10x
            - oney_12x
            - ovo
            - oxxo
            - paymaya
            - paypal
            - paypalpaylater
            - pix
            - rabbitlinepay
            - razorpay
            - scalapay
            - sepa
            - shopeepay
            - singteldash
            - sofort
            - stripedd
            - thaiqr
            - touchngo
            - truemoney
            - trustly
            - venmo
            - waave
            - wechat
            - zippay
            example: card
            type: string
          type: array
        style: form
      - description: Filters for transactions that have a payment method with an ID
          that matches exactly with the provided value.
        explode: true
        in: query
        name: payment_method_id
        required: false
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: form
      - description: |-
          Filters for transactions that have a payment method with a label
          that matches exactly with the provided value.
        explode: true
        in: query
        name: payment_method_label
        required: false
        schema:
          example: "1234"
          type: string
        style: form
      - description: |-
          Filters for transactions that were processed by the provided
          `payment_service_id` values.
        explode: true
        in: query
        name: payment_service_id
        required: false
        schema:
          example:
          - 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |-
          Filters for transactions that have a matching
          `payment_service_transaction_id` value. The `payment_service_transaction_id`
          is the identifier of the transaction given by the payment service.
        explode: true
        in: query
        name: payment_service_transaction_id
        required: false
        schema:
          example: transaction_123
          type: string
        style: form
      - description: |-
          When set to `true`, filter for transactions that have a manual review pending.
          When set to `false`, filter for transactions that don't have a manual review pending.
        explode: true
        in: query
        name: pending_review
        required: false
        schema:
          example: true
          type: boolean
        style: form
      - description: Filters for transactions based on their transaction reconciliation
          identifier.
        explode: true
        in: query
        name: reconciliation_id
        required: false
        schema:
          example: 7EgeeeTX0DS45RBDNt4AEY
          format: string
          type: string
        style: form
      - description: |-
          Filters for transactions that have one of the following fields
          match exactly with the provided `search` value.

          * `buyer_external_identifier`
          * `buyer_id`
          * `external_identifier`
          * `id`
          * `payment_service_transaction_id`

          The search will apply against all fields at the same time.
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          type: string
        style: form
      - description: |-
          Filters the results to only the transactions that have a `status`
          that matches with any of the provided status values.
        explode: true
        in: query
        name: status
        required: false
        schema:
          example:
          - capture_succeeded
          - processing
          items:
            enum:
            - processing
            - buyer_approval_pending
            - authorization_succeeded
            - authorization_failed
            - authorization_declined
            - capture_pending
            - capture_succeeded
            - authorization_void_pending
            - authorization_voided
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only transactions last updated after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: updated_at_gte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: date-time
          type: string
        style: form
      - description: |-
          Filters the results to only transactions last updated before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: updated_at_lte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: date-time
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
          description: Returns a paginated list of transactions for an account.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List transactions
      tags:
      - Transactions
    post:
      description: |
        Attempts to create an authorization for a payment method. In some cases it is
        not possible to create the authorization without redirecting the user for
        their authorization. In these cases the status is set to
        indicate buyer approval is pending and an approval URL is returned.

        Duplicated gift card numbers are not supported. This includes both stored gift
        cards, as well as those directly provided via the request.
      operationId: new-transaction
      parameters:
      - description: |-
          A unique key that identifies this request. Providing this header will make
          this an idempotent request. We recommend using V4 UUIDs, or another random
          string with enough entropy to avoid collisions.
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: bffa9ce6-7a8a-449c-889a-65bd2ee86903
          maxLength: 255
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Authorize a new card:
                value:
                  amount: 1299
                  currency: USD
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize and store a card:
                value:
                  amount: 1299
                  currency: USD
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize, capture, and store a card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize and capture a GoCardless transaction:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: gocardless
                    redirect_url: https://example.com/callback
                    country: US
                    currency: USD
              Authorize and capture using a previously stored card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: id
                    id: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
              Authorize a new card with connection options and anti-fraud fingerprint:
                value:
                  amount: 1299
                  currency: USD
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
                  connection_options:
                    cybersource-anti-fraud:
                      merchant_defined_data:
                        "1": John Doe
                        "2": trusted
                        "99": recurring
                  anti_fraud_fingerprint: yGeBAFYgFmM=
              Authorize and asynchronously capture a card transaction:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  async_capture: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the created transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error429TooManyRequests'
          description: |-
            Returns an error if the same token is used for too many requests per minute.
            The exact rate limit differs per instance.
      summary: New transaction
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: Get information about a transaction.
      operationId: get-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns a transaction resource.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Get transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/capture:
    post:
      description: Captures a previously authorized transaction.
      operationId: capture-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Capture an authorization:
                value:
                  amount: 1299
            schema:
              $ref: '#/components/schemas/TransactionCaptureRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the captured transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Capture transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refunds:
    get:
      description: Lists all refunds associated with a certain transaction.
      operationId: list-transaction-refunds
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refunds'
          description: Returns a list of refunds.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List refunds
      tags:
      - Transactions
    post:
      description: |-
        Refunds a transaction, fully or partially.

        If the transaction was not yet successfully captured, the
        refund will not be processed. Authorized transactions can be
        voided instead.
      operationId: new-refund
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Request a full refund on a transaction:
                value: {}
              Request a partial refund on a transaction:
                value:
                  amount: 1299
            schema:
              $ref: '#/components/schemas/TransactionRefundRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: Returns the created refund.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Refund transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refunds/all:
    post:
      description: Refunds a transaction fully across all instruments.
      operationId: refund-all
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refunds'
          description: Returns the created refunds. Not all refunds may have succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Refund all instruments in a transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refunds/{refund_id}:
    get:
      description: Gets information about a refund associated with a certain transaction.
      operationId: get-refund
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      - description: The unique ID of the refund.
        explode: false
        in: path
        name: refund_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: Returns a refund.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get refund
      tags:
      - Transactions
  /transactions/{transaction_id}/void:
    post:
      description: |-
        Voids a transaction.

        If the transaction was not yet successfully authorized, or was already
        captured, the void will not be processed. Captured transactions can be
        refunded instead.

        Voiding zero-amount authorized transactions is not supported.

        Once voided, the status of the transaction will be either `authorization_voided`,
        `authorization_void_pending`, or if the void fails the original status will remain.
      operationId: void-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the voided transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Void transaction
      tags:
      - Transactions
  /gift-cards:
    get:
      description: Returns all stored gift cards.
      operationId: list-gift-cards
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCards'
          description: Returns a list of gift cards.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List gift cards
      tags:
      - Gift Cards
    post:
      description: |
        Stores a gift card.

        Vaulting a gift card stores and validate it against the active gift card
        service.

        It is only possible to store a gift card against a buyer if the same card is
        not already stored on the buyer and the gift card has not expired yet.

        Buyers by default can only have a maximum limit of 10 gift cards stored against
        them. Please contact our team to change this limit.
      operationId: store-gift-card
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardStoreRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCard'
          description: Returns the stored gift card.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error429TooManyRequests'
          description: |-
            Returns an error if the same token is used for too many requests per minute.
            The exact rate limit differs per instance.
      summary: Store gift card
      tags:
      - Gift Cards
  /gift-cards/{gift_card_id}:
    delete:
      description: Removes a stored gift card.
      operationId: delete-gift-card
      parameters:
      - description: The unique ID of a stored gift card.
        explode: false
        in: path
        name: gift_card_id
        required: true
        schema:
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete gift card
      tags:
      - Gift Cards
    get:
      description: Retrieves details of a stored gift card.
      operationId: get-gift-card
      parameters:
      - description: The unique ID of a stored gift card.
        explode: false
        in: path
        name: gift_card_id
        required: true
        schema:
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCard'
          description: Returns a stored gift card.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get gift card
      tags:
      - Gift Cards
  /gift-cards/balances:
    post:
      description: |-
        Returns details for a list of gift cards with updated balances.

        Duplicated gift card numbers are not supported. This includes both stored gift
        cards, as well as those directly provided via the request.
      operationId: check-gift-card-balances
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardBalancesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCards--Summary'
          description: |-
            Returns the balances for each of the gift cards. Balances are returned in the same
            order they are requested.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error429TooManyRequests'
          description: |-
            Returns an error if the same token is used for too many requests per minute.
            The exact rate limit differs per instance.
      summary: Check gift card balances
      tags:
      - Gift Cards
  /gift-card-services:
    post:
      description: Adds a new gift card service by providing a custom name and a value
        for each of the required fields.
      operationId: new-gift-card-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardServiceCreateRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardService'
          description: Returns the created gift card service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if there is an attempt to activate multiple
            gift card services simultaneously.
      summary: New gift card service
      tags:
      - Gift Card Services
  /gift-card-services/{gift_card_service_id}:
    delete:
      description: Deletes a specific gift card service.
      operationId: delete-gift-card-service
      parameters:
      - description: The unique ID of the gift card service.
        explode: false
        in: path
        name: gift_card_service_id
        required: true
        schema:
          example: 541b126f-44c5-4c5e-a06b-d0e0d54c7d3f
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete gift card service
      tags:
      - Gift Card Services
    get:
      description: Retrieves the details of a single configured gift card service.
      operationId: get-gift-card-service
      parameters:
      - description: The unique ID of the gift card service.
        explode: false
        in: path
        name: gift_card_service_id
        required: true
        schema:
          example: 541b126f-44c5-4c5e-a06b-d0e0d54c7d3f
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardService'
          description: Returns a gift card service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get gift card service
      tags:
      - Gift Card Services
    put:
      description: Updates an existing gift card service. Allows all fields to be
        changed except for the service ID.
      operationId: update-gift-card-service
      parameters:
      - description: The unique ID of the gift card service.
        explode: false
        in: path
        name: gift_card_service_id
        required: true
        schema:
          example: 541b126f-44c5-4c5e-a06b-d0e0d54c7d3f
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardServiceUpdateRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardService'
          description: Returns the updated gift card service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if there is an attempt to activate multiple
            gift card services simultaneously.
      summary: Update gift card service
      tags:
      - Gift Card Services
  /gift-card-services/verify:
    post:
      description: Verifies a set of credentials against a gift card service.
      operationId: verify-gift-card-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardServiceVerifyRequest'
      responses:
        "200":
          description: Returns 200 OK if credentials successfully verified.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted, missing
            required fields, or if the provided credentials are invalid and failed
            verification against the gift card service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Verify gift card service credentials
      tags:
      - Gift Card Services
  /gift-card-service-definitions/{gift_card_service_definition_id}:
    get:
      description: Gets the definition for a gift card service.
      operationId: get-gift-card-service-definition
      parameters:
      - description: The unique ID of the gift card service definition.
        explode: false
        in: path
        name: gift_card_service_definition_id
        required: true
        schema:
          example: qwikcilver-gift-card
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCardServiceDefinition'
          description: Returns a gift card service definition.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: Get gift card service definition
      tags:
      - Gift Card Service Definitions
  /report-executions:
    get:
      description: Returns a list of executions belonging to any report.
      operationId: list-all-report-executions
      parameters:
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters the results to report executions created after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_gte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: string
          type: string
        style: form
      - description: |-
          Filters the results to report executions created before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_lte
        required: false
        schema:
          example: 2022-01-01T12:00:00+08:00
          format: string
          type: string
        style: form
      - description: |-
          Filters for executions of reports that have a matching
          `name` value. This filter is case-insensitive.

          Ensure that when necessary, the value you pass for this
          filter is URL encoded.
        explode: true
        in: query
        name: report_name
        required: false
        schema:
          example: Failed+Authorizations+042022
          type: string
        style: form
      - description: |-
          Filters for report executions that have a matching `status` value.

          This filter accepts multiple values.
        explode: true
        in: query
        name: status
        required: false
        schema:
          example:
          - succeeded
          - failed
          items:
            enum:
            - dispatched
            - failed
            - pending
            - processing
            - succeeded
            example: succeeded
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only match the reports that their `creator_id`
          matches with any of the provided creator IDs.
        explode: true
        in: query
        name: creator_id
        required: false
        schema:
          example:
          - dba3bc4c-c5f2-477f-bfb0-abd61f89f979
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutions'
          description: Returns a list of report executions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List all report executions
      tags:
      - Reports
  /report-executions/{report_execution_id}:
    get:
      description: Retrieves the details of a single report execution.
      operationId: get-report-execution
      parameters:
      - description: The unique ID for a report execution.
        explode: false
        in: path
        name: report_execution_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecution'
          description: Returns a report execution.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get report execution
      tags:
      - Reports
  /reports:
    get:
      description: Returns a list of reports.
      operationId: list-reports
      parameters:
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters for reports that have a matching `name` value.
          This filter is case-insensitive.

          Ensure that when necessary, the value you pass for this
          filter is URL encoded.
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: Failed+Authorizations+042022
          type: string
        style: form
      - description: Filters for reports that have matching `schedule` values.
        explode: true
        in: query
        name: schedule
        required: false
        schema:
          example:
          - once
          - monthly
          items:
            enum:
            - daily
            - monthly
            - once
            - weekly
            type: string
          type: array
        style: form
      - description: Filters for reports that have a matching `schedule_enabled` value.
        explode: true
        in: query
        name: schedule_enabled
        required: false
        schema:
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: Returns a list of reports.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List reports
      tags:
      - Reports
    post:
      description: |
        Creates a new report.
      operationId: new-report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns the report that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New report
      tags:
      - Reports
  /reports/{report_id}:
    get:
      description: Retrieves the details of a single report.
      operationId: get-report
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns a report.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get report
      tags:
      - Reports
    put:
      description: Updates a report. This is mostly used with scheduled reports.
      operationId: update-report
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns the updated report.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update report
      tags:
      - Reports
  /reports/{report_id}/executions:
    get:
      description: |-
        Returns a list of executions for a report. For a
        one-off report there will only be one, where for scheduled ones
        there may be more.
      operationId: list-report-executions
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutions'
          description: Returns a list of executions for a report.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List executions for report
      tags:
      - Reports
  /reports/{report_id}/executions/{report_execution_id}/url:
    post:
      description: |-
        Generates a temporary signed URL to download the result of a report
        execution.
      operationId: generate-download-url
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a report execution.
        explode: false
        in: path
        name: report_execution_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutionUrl'
          description: |-
            Returns the signed download URL of a report execution result and its
            expiration date and time.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Generate report download URL
      tags:
      - Reports
  /roles:
    get:
      description: Returns a list of roles.
      operationId: list-roles
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
          description: Returns a list of roles.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List roles
      tags:
      - Roles
  /roles/assignments:
    get:
      description: |-
        Returns a list of role assignments.

        Role assignments can be filtered for a given role by providing
        the `role_id` search parameter, or for a given assignee by providing
        both the `assignee_type` and `assignee_id` parameters.
      operationId: list-role-assignments
      parameters:
      - description: Filters for role assignments for the role that has a matching
          `id` value.
        explode: true
        in: query
        name: role_id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: Filters for role assignments for the assignee of the given type.
        explode: true
        in: query
        name: assignee_type
        required: false
        schema:
          enum:
          - user
          example: user
          type: string
        style: form
      - description: |-
          Filters for role assignments for the assignee that has a matching `id` value.
          The `assignee_type` must also be specified.
        explode: true
        in: query
        name: assignee_id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignments'
          description: Returns a list of role assignments.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List role assignments
      tags:
      - Roles
    post:
      description: |
        Adds a role assignment, in effect applying a role to the given assignee.
      operationId: new-role-assignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
          description: Returns the role assignment that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New role assignment
      tags:
      - Roles
  /roles/assignments/{role_assignment_id}:
    delete:
      description: |-
        Deletes a role assignment. The associated assignee will no longer be
        assigned the role.
      operationId: delete-role-assignment
      parameters:
      - description: The unique ID for the role assignment.
        explode: false
        in: path
        name: role_assignment_id
        required: true
        schema:
          example: 1cdac457-400f-4866-8da6-5c193a8db158
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete role assignment
      tags:
      - Roles
  /merchant-accounts:
    get:
      description: Lists all merchant accounts in an instance.
      operationId: list-merchant-accounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantAccounts'
          description: Returns a paginated list of merchant accounts.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List merchant accounts
      tags:
      - Merchant Accounts
    post:
      description: |-
        Create a merchant account. Optionally, provide an `outbound_webhook_url`, and
        if HTTP Basic Authentication is required, provide the
        `outbound_webhook_username` and `outbound_webhook_password`. When retrieving
        a Merchant Account the `outbound_webhook_password` will be omitted.

        Optionally provide Network Tokens configuration per scheme. If done, all
        parameters for the same scheme must be provided.
      operationId: new-merchant-account
      requestBody:
        content:
          application/json:
            examples:
              Create a merchant account:
                value:
                  id: plantly-uk
                  display_name: Plantly UK
                  outbound_webhook_url: https://www.example.com/webhook
                  outbound_webhook_username: gr4vy
                  outbound_webhook_password: super-secret-password
                  visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
                  visa_network_tokens_app_id: ca12b3d0-4e23-41a9-906f-e5cbb8e6a731
            schema:
              $ref: '#/components/schemas/MerchantAccountCreate'
      responses:
        "201":
          content:
            application/json:
              examples:
                Merchant Account:
                  value:
                    type: merchant-account
                    id: plantly-uk
                    display_name: Plantly UK
                    outbound_webhook_url: https://www.example.com/webhook
                    outbound_webhook_username: gr4vy
                    visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
                    visa_network_tokens_app_id: ca12b3d0-4e23-41a9-906f-e5cbb8e6a731
                    created_at: 2022-02-01T14:20:00.000+00:00
                    updated_at: 2022-02-01T14:20:00.000+00:00
              schema:
                $ref: '#/components/schemas/MerchantAccount'
          description: Returns the created merchant account.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted, missing
            required fields or configuration doesn't meet uniqueness conditions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New merchant account
      tags:
      - Merchant Accounts
  /merchant-accounts/{merchant_account_id}:
    delete:
      description: Deletes a specific merchant account.
      operationId: delete-merchant-accuont
      parameters:
      - description: The unique ID for a merchant account.
        explode: false
        in: path
        name: merchant_account_id
        required: true
        schema:
          example: plantly-uk
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete merchant account
      tags:
      - Merchant Accounts
    get:
      description: Retrieves details of a merchant account.
      operationId: get-merchant-account
      parameters:
      - description: The unique ID for a merchant account.
        explode: false
        in: path
        name: merchant_account_id
        required: true
        schema:
          example: plantly-uk
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantAccount'
          description: Returns a merchant account.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get merchant account
      tags:
      - Merchant Accounts
    put:
      description: |-
        Update an existing merchant account. Optionally, provide an
        `outbound_webhook_url`, and if HTTP Basic Authentication is required, provide
        the `outbound_webhook_username` and `outbound_webhook_password`. When
        retrieving a Merchant Account the `outbound_webhook_password` will be omitted.

        Optionally provide Network Tokens configuration per scheme. If done, all
        parameters for the same scheme must be provided.
      operationId: update-merchant-account
      parameters:
      - description: The unique ID for a merchant account.
        explode: false
        in: path
        name: merchant_account_id
        required: true
        schema:
          example: plantly-uk
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update a merchant account:
                value:
                  display_name: Plantly UK
                  outbound_webhook_url: https://www.example.com/webhook
                  outbound_webhook_username: gr4vy
                  outbound_webhook_password: super-secret-password
                  visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
                  visa_network_tokens_app_id: ca12b3d0-4e23-41a9-906f-e5cbb8e6a731
            schema:
              $ref: '#/components/schemas/MerchantAccountUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantAccount'
          description: Returns the updated merchant account.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted, missing
            required fields or configuration doesn't meet uniqueness conditions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update merchant account
      tags:
      - Merchant Accounts
  /payment-methods/{payment_method_id}/payment-service-tokens:
    get:
      description: Get all payment service tokens for a given payment method and payment
        service.
      operationId: get-payment-service-tokens
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: Filters for transactions that have a payment method with an ID
          that matches exactly with the provided value.
        explode: true
        in: query
        name: payment_method_id
        required: false
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceTokens'
          description: |-
            Returns a list payment service tokens of the specified
            payment method and payment service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service tokens
      tags:
      - Tokens
    post:
      description: |
        Tokenize stored card against a payment service.
      operationId: provision-payment-service-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceTokenRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceToken'
          description: Returns the created payment service token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns if any of the validations below fails:
            - payment method is not card.
            - payment service doesn't support `payment_method_tokenization`.
            - active token already exists for the `payment_service_id`.
            - invalid request payload.
            - `payment_service_id` is not a `uuid` or is not set.
            - `security_code` is not set.
            - `redirect_url` is not set.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Provision payment service token
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/payment-service-tokens/{payment_service_token_id}:
    delete:
      description: Deletes a specific payment service token.
      operationId: delete-payment-service-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: The ID of the payment service token.
        explode: false
        in: path
        name: payment_service_token_id
        required: true
        schema:
          example: 7e7ede54-616a-422e-8f58-89a79ae2baea
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment service token
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/network-tokens:
    get:
      description: Get stored network tokens for the given payment method.
      operationId: get-network-tokens
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: Filters for transactions that have a payment method with an ID
          that matches exactly with the provided value.
        explode: true
        in: query
        name: payment_method_id
        required: false
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkTokens'
          description: Returns a list of network tokens (empty list if there aren't
            any).
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get network tokens
      tags:
      - Tokens
    post:
      description: |
        Provision a network token for a stored card.
      operationId: provision-network-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetworkTokenRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkToken'
          description: Returns the created network token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns if any of the validations below fails:
            - network token already exists for the `payment_method_id`.
            - `security_code` or `merchant_initiated` or `is_subsequent_payment` is not provided.
            - `merchant_initiated` is set to `false` but `security_code` is not provided.
            - `merchant_initiated` is set to `true` but `is_subsequent_payment` is set to `false`.
            - payment method is not a card.
            - Network token provider responds with an error.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Provision network token
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/network-tokens/{network_token_id}:
    delete:
      description: Deletes a specific network token.
      operationId: delete-network-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: The ID of the network token.
        explode: false
        in: path
        name: network_token_id
        required: true
        schema:
          example: 454f6a32-a572-4dda-b885-3e8674086123
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete network token
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/network-tokens/{network_token_id}/cryptogram:
    post:
      description: |
        Issue a cryptogram for a stored network token of a stored card.
        The endpoint is disabled by default, please contact our team for more information on enablement.
      operationId: issue-cryptogram
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: The ID of the network token.
        explode: false
        in: path
        name: network_token_id
        required: true
        schema:
          example: 454f6a32-a572-4dda-b885-3e8674086123
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueCryptogramRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cryptogram'
          description: Returns the created network token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields. It also returns an error if the requested network token
            has a status other than `active`.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error403Forbidden'
          description: Returns an error if the access to the requested resource is
            forbidden.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Issue cryptogram
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/network-tokens/{network_token_id}/suspend:
    post:
      description: Suspends a specific network token.
      operationId: suspend-network-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: The ID of the network token.
        explode: false
        in: path
        name: network_token_id
        required: true
        schema:
          example: 454f6a32-a572-4dda-b885-3e8674086123
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkToken'
          description: Returns suspended network token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns an error if:
            - network token's status is not `active`.
            - network tokens feature is not enabled.
            - if payment method's scheme is not `Visa`.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Suspend network token
      tags:
      - Tokens
  /payment-methods/{payment_method_id}/network-tokens/{network_token_id}/resume:
    post:
      description: Resumes a specific network token.
      operationId: resume-network-token
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      - description: The ID of the network token.
        explode: false
        in: path
        name: network_token_id
        required: true
        schema:
          example: 454f6a32-a572-4dda-b885-3e8674086123
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetworkToken'
          description: Returns resumed network token.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns an error if:
            - network token's status is not `suspended`.
            - network tokens feature is not enabled.
            - if payment method's scheme is not `Visa`.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Resume network token
      tags:
      - Tokens
  /vault-forward:
    post:
      description: Forward an API call to a PCI endpoint. The request body is evaluated
        and any template fields are replaced by the card data before the request is
        sent to the given destination.
      operationId: make-vault-forward
      parameters:
      - description: A comma-separated list of Payment Method IDs that can be used
          to fill in the request template. At least 1 must be given, and a maximum
          of 100 are accepted.
        explode: false
        in: header
        name: x-vault-forward-payment-methods
        required: true
        schema:
          example: faaad066-30b4-4997-a438-242b0752d7e1,faaad066-30b4-4997-a438-242b0752d7e2
          type: string
        style: simple
      - description: The URL to forward card data to.
        explode: false
        in: header
        name: x-vault-forward-url
        required: true
        schema:
          example: https://api.amadeus.com/booking
          type: string
        style: simple
      - description: The HTTP method that is used when forwarding the request to the
          `x-vault-forward-url`.
        explode: false
        in: header
        name: x-vault-forward-http-method
        required: true
        schema:
          enum:
          - POST
          - PUT
          - PATCH
          example: POST
          type: string
        style: simple
      - description: |-
          A header that is forwarded to the `x-vault-forward-url`. The header will be
          forwarded without the `x-vault-forward-header` part. For example,
          `x-vault-forward-header-x-frame-options: SAMEORIGIN` is forwarded as
          `x-frame-options: SAMEORIGIN`.
        explode: false
        in: header
        name: x-vault-forward-header-{HEADER_NAME}
        required: false
        schema:
          example: x-vault-forward-header-x-frame-options
          type: string
        style: simple
      - description: |-
          The number of seconds to wait before timing out when forwarding the
          request.
        explode: false
        in: header
        name: x-vault-forward-timeout
        required: false
        schema:
          default: 30
          example: 10
          minimum: 1
          type: integer
        style: simple
      requestBody:
        content:
          '*/*':
            examples:
              Make a JSON request:
                value: |
                  {
                    "number":"{{CARD_NUMBER_1}}",
                    "expiry":"{{CARD_EXPIRATION_DATE_1}}"
                  }
              Make an XML request:
                value: |
                  <card>
                    <number>{{CARD_NUMBER_1}}</number>
                    <expiry>{{CARD_EXPIRATION_DATE_1}}</expiry>
                  </card>
            schema:
              type: string
        description: Payload to forward in the request.
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: string
          description: |-
            Returns the payload received from the forwarded request. If the request timed
            out or there was a network error, the payload will be empty instead.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: Forward PCI data
      tags:
      - Vault Forward
components:
  schemas:
    AccountUpdaterInquirySummary:
      description: An Account Updater inquiry summary.
      example:
        payment_method_id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
        id: d038f8bf-f1fd-45b3-9948-e1fbb58e8d62
        type: account-updater-inquiry
      properties:
        type:
          description: The type of this resource. Is always `account-updater-inquiry`.
          enum:
          - account-updater-inquiry
          example: account-updater-inquiry
          type: string
        id:
          description: The unique identifier for this Account Updater inquiry.
          example: d038f8bf-f1fd-45b3-9948-e1fbb58e8d62
          format: uuid
          type: string
        payment_method_id:
          description: The ID of the payment method associated with this Account Updater
            inquiry.
          example: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          format: uuid
          type: string
      title: Account Updater Inquiry Summary
      type: object
      x-tags:
      - Account Updater
    AccountUpdaterJob:
      description: An Account Updater job.
      example:
        inquiries:
        - payment_method_id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          id: d038f8bf-f1fd-45b3-9948-e1fbb58e8d62
          type: account-updater-inquiry
        - payment_method_id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          id: d038f8bf-f1fd-45b3-9948-e1fbb58e8d62
          type: account-updater-inquiry
        updated_at: 2023-07-26T19:23:00Z
        merchant_account_id: default
        created_at: 2023-07-26T19:23:00Z
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: account-updater-job
      properties:
        type:
          description: The type of this resource. Is always `account-updater-job`.
          enum:
          - account-updater-job
          example: account-updater-job
          type: string
        id:
          description: The unique identifier for this Account Updater job.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        created_at:
          description: The date and time when this Account Updater job was created.
          example: 2023-07-26T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this Account Updater job was last updated.
          example: 2023-07-26T19:23:00Z
          format: date-time
          type: string
        inquiries:
          description: A list of inquiries associated with this Account Updater job.
          items:
            $ref: '#/components/schemas/AccountUpdaterInquirySummary'
          type: array
      title: Account Updater Job
      type: object
      x-tags:
      - Account Updater
    AccountUpdaterJobCreate:
      description: A request to create an Account Updater job.
      example:
        payment_method_ids:
        - 497f6eca-6276-4993-bfeb-53cbbbba6f08
      properties:
        payment_method_ids:
          description: |-
            A list of unique payment method identifiers used to create the Account Updater job.
            A payment method will be considered only if it qualifies for an inquiry.
          example:
          - 497f6eca-6276-4993-bfeb-53cbbbba6f08
          items:
            format: uuid
            type: string
          maxItems: 100
          minItems: 1
          type: array
      required:
      - payment_method_ids
      title: Account Updater Job (Create)
      type: object
      x-tags:
      - Account Updater
    Address:
      description: An address for the buyer.
      properties:
        city:
          description: The city for the address.
          example: London
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        country:
          description: The country for the address in ISO 3166 format.
          example: GB
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        postal_code:
          description: The postal code or zip code for the address.
          example: "789123"
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        state:
          description: The state, county, or province for the address.
          example: Greater London
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        state_code:
          description: |-
            The code of state, county, or province for the address in
            ISO 3166-2 format.
          example: GB-LND
          maxLength: 6
          minLength: 4
          nullable: true
          type: string
        house_number_or_name:
          description: |-
            The house number or name for the address. Not all payment
            services use this field but some do.
          example: "10"
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        line1:
          description: The first line of the address.
          example: 10 Oxford Street
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        line2:
          description: The second line of the address.
          example: New Oxford Court
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        organization:
          description: |-
            The optional name of the company or organisation to add
            to the address.
          example: Gr4vy
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
      title: Address
      type: object
      x-tags:
      - Buyers
    AntiFraudDecisionEvent:
      description: This event logs the request and response details of HTTP calls
        made to an anti-fraud provider.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-decision`.
          enum:
          - anti-fraud-decision
          example: anti-fraud-decision
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudDecisionEvent_context'
      title: Anti-fraud - Decision
      type: object
      x-tags:
      - Transactions
    AntiFraudDecisionErrorEvent:
      description: This event logs the reason why we were unable to get an anti-fraud
        decision.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-decision-error`.
          enum:
          - anti-fraud-decision-error
          example: anti-fraud-decision-error
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudDecisionErrorEvent_context'
      title: Anti-fraud - Error
      type: object
      x-tags:
      - Transactions
    AntiFraudDecisionSkippedEvent:
      description: This event logs the reason why we skipped getting an anti-fraud
        decision.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-decision-skipped`.
          enum:
          - anti-fraud-decision-skipped
          example: anti-fraud-decision-skipped
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudDecisionSkippedEvent_context'
      title: Anti-fraud - Skipped
      type: object
      x-tags:
      - Transactions
    AntiFraudTransactionStatusUpdateEvent:
      description: This event logs the request and response details of HTTP calls
        made to an anti-fraud provider to update a decision.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-transaction-status-update`.
          enum:
          - anti-fraud-transaction-status-update
          example: anti-fraud-transaction-status-update
          type: string
        created_at:
          description: The date and time when this transaction event was created in
            our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudTransactionStatusUpdateEvent_context'
      title: Anti-fraud - Decision update sent
      type: object
      x-tags:
      - Transactions
    AntiFraudTransactionStatusUpdateErrorEvent:
      description: This event logs the reason why we were unable to update an anti-fraud
        decision.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-transaction-status-update-error`.
          enum:
          - anti-fraud-transaction-status-update-error
          example: anti-fraud-transaction-status-update-error
          type: string
        created_at:
          description: The date and time when this transaction event was created in
            our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudTransactionStatusUpdateErrorEvent_context'
      title: Anti-fraud - Decision update failed
      type: object
      x-tags:
      - Transactions
    AntiFraudWebhookEvent:
      description: This event logs the webhook received when an anti-fraud decision
        is updated.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `anti-fraud-webhook`.
          enum:
          - anti-fraud-webhook
          example: anti-fraud-webhook
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/AntiFraudWebhookEvent_context'
      title: Anti-fraud - Webhook
      type: object
      x-tags:
      - Transactions
    AntiFraudServiceCreate:
      allOf:
      - $ref: '#/components/schemas/AntiFraudServiceUpdate'
      description: A request to create an anti-fraud service.
      required:
      - anti_fraud_service_definition_id
      - display_name
      - fields
      title: Anti-Fraud Service (Create)
      type: object
      x-tags:
      - Anti-Fraud Services
    AntiFraudServiceUpdate:
      description: A request to update an anti-fraud service.
      properties:
        anti_fraud_service_definition_id:
          description: |-
            The name of the Anti-Fraud service provider.
            During update request, this value is used for validation only but
            the underlying service can not be changed for an existing service.
          enum:
          - cybersource-anti-fraud
          - forter-anti-fraud
          - sift-anti-fraud
          example: sift-anti-fraud
          type: string
        display_name:
          description: A unique name for this anti-fraud service which is used in
            the Gr4vy admin panel to give a anti-fraud Service a human readable name.
          example: Sift Anti-Fraud Service.
          maxLength: 200
          minLength: 1
          type: string
        active:
          default: true
          description: |-
            Defines if this service is currently active or not. There can only
            be one active service at any time. When updating a service
            to active, the current active service will be deactivated.
          example: true
          type: boolean
        reviews_enabled:
          default: false
          description: |-
            Defines if this service needs to handle the review status from anti-fraud
            responses with a proper review workflow. If not, the review status will
            be treated as any other one.
          example: false
          type: boolean
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field defined
            by the definition for this anti-fraud service e.g. for Sift
            `api_key` must be sent within this field when creating the service.

            For updates, only the fields sent here will be updated,
            existing ones will not be affected if not present.
          items:
            $ref: '#/components/schemas/AntiFraudServiceUpdate_fields'
          type: array
      required:
      - anti_fraud_service_definition_id
      title: Anti-Fraud Service (Update)
      type: object
      x-tags:
      - Anti-Fraud Services
    ApplePayRequest:
      description: Details for a Apple Pay payment method.
      properties:
        method:
          description: '`applepay`.'
          enum:
          - applepay
          example: applepay
          type: string
        token:
          description: |-
            The encrypted (opaque) token that was passed to the `onpaymentauthorized`
            callback by the Apple Pay integration.
          type: object
      required:
      - method
      - token
      title: Apple Pay payment method request
      type: object
      x-tags:
      - Request Bodies
    ApplePaySessionRequest:
      description: Initiates a new session with Apple Pay.
      properties:
        validation_url:
          description: |-
            Validation URL obtained from the event passed to a
            `onvalidatemerchant` callback.
          type: string
        domain_name:
          description: Fully qualified domain name of the merchant.
          type: string
      required:
      - domain_name
      - validation_url
      title: Apple Pay session request
      type: object
      x-tags:
      - Request Bodies
    APIKeyPairCreate:
      description: A request to create an API key-pair.
      properties:
        display_name:
          description: A name for this key-pair which is used in the Gr4vy admin panel
            to give the key-pair a human readable name.
          example: Sandbox
          maxLength: 200
          minLength: 1
          type: string
        algorithm:
          default: ECDSA
          description: |-
            The algorithm to use for the API Key Pair. The recommended value is `ECDSA`.
            You should only use the `RSA` algorithm in environments that do not support
            `ECDSA`.
          enum:
          - ECDSA
          - RSA
          example: ECDSA
          type: string
        role_ids:
          description: |-
            A list of role IDs that will be assigned to the API Key Pair being created.
            Only the "Administrator" and "Integration" roles are supported.
          example:
          - 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          items:
            format: uuid
            type: string
          minItems: 1
          nullable: false
          type: array
        merchant_account_id:
          description: |-
            The optional ID of the merchant account this API Key Pair should be assigned to.
            Leave this unset to create an API key that works across all merchant accounts.
          example: plantly-uk
          maxLength: 22
          nullable: true
          type: string
      title: API key-pair (Create)
      type: object
      x-tags:
      - API Key Pairs
    APIKeyPairUpdate:
      description: A request to update an API key-pair.
      properties:
        display_name:
          description: A name for this key-pair which is used in the Gr4vy admin panel
            to give the key-pair a human readable name.
          example: Sandbox
          maxLength: 200
          minLength: 1
          type: string
      required:
      - display_name
      title: API key-pair (Update)
      type: object
      x-tags:
      - API Key Pairs
    ApiLog:
      description: A log of an error that happened in the API call.
      example:
        response_sent_at: 2022-01-01T00:00:10Z
        request_received_at: 2022-01-01T00:00:00Z
        response_body:
          code: bad_request
          details:
            pointer: /payment_method/number
            location: body
            message: ensure this value has at least 13 characters
            type: value_error.any_str.min_length
          message: Request failed validation
          type: error
          status: 400
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        request_method: POST
        type: api-log
        request_url: http://api.wpay.gr4vy.app/transactions
        response_status_code: 400
      properties:
        type:
          description: '`api-log`.'
          enum:
          - api-log
          example: api-log
          type: string
        id:
          description: The ID of the API log entry.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        request_method:
          description: The http request method that generated the log entry.
          example: POST
          type: string
        request_url:
          description: The http request URL which trigged the error log.
          example: http://api.wpay.gr4vy.app/transactions
          type: string
        request_received_at:
          description: The date and time that the request was received.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        response_status_code:
          description: The http request status code.
          example: 400
          type: number
        response_body:
          $ref: '#/components/schemas/ApiLog_response_body'
        response_sent_at:
          description: date-time of when the response was sent.
          example: 2022-01-01T00:00:10Z
          format: date-time
          type: string
      title: API Log
      type: object
      x-tags:
      - API Log
    ApiLogs:
      description: A list of API log entries.
      example:
        items:
        - response_sent_at: 2022-01-01T00:00:10Z
          request_received_at: 2022-01-01T00:00:00Z
          response_body:
            code: bad_request
            details:
              pointer: /payment_method/number
              location: body
              message: ensure this value has at least 13 characters
              type: value_error.any_str.min_length
            message: Request failed validation
            type: error
            status: 400
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          request_method: POST
          type: api-log
          request_url: http://api.wpay.gr4vy.app/transactions
          response_status_code: 400
        - response_sent_at: 2022-01-01T00:00:10Z
          request_received_at: 2022-01-01T00:00:00Z
          response_body:
            code: bad_request
            details:
              pointer: /payment_method/number
              location: body
              message: ensure this value has at least 13 characters
              type: value_error.any_str.min_length
            message: Request failed validation
            type: error
            status: 400
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          request_method: POST
          type: api-log
          request_url: http://api.wpay.gr4vy.app/transactions
          response_status_code: 400
      properties:
        items:
          description: A list of API log entries.
          items:
            $ref: '#/components/schemas/ApiLog'
          type: array
      title: API Logs
      type: object
      x-tags:
      - API Logs
    AuditLog:
      description: A log of a change that occurred in the Gr4vy instance.
      example:
        resource:
          name: Samuel J
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
        merchant_account_id: default
        action: created
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: audit-log
        user:
          email_address: john@example.com
          name: John L
          staff: false
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: active
        timestamp: 2022-01-01T00:00:00Z
      properties:
        type:
          description: '`audit-log`.'
          enum:
          - audit-log
          example: audit-log
          type: string
        id:
          description: The ID of the audit log entry.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        timestamp:
          description: The date and time that the action was performed.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        action:
          description: The action that was performed.
          enum:
          - created
          - updated
          - deleted
          example: created
          type: string
        merchant_account_id:
          description: The ID of the merchant account this entry was created for.
          example: default
          nullable: true
          type: string
        user:
          $ref: '#/components/schemas/AuditLog_user'
        resource:
          $ref: '#/components/schemas/AuditLog_resource'
      title: Audit Log
      type: object
      x-tags:
      - Audit Logs
    AuditLogs:
      description: A list of audit log entries.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - resource:
            name: Samuel J
            id: fe26475d-ec3e-4884-9553-f7356683f7f9
            type: buyer
          merchant_account_id: default
          action: created
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: audit-log
          user:
            email_address: john@example.com
            name: John L
            staff: false
            id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
            status: active
          timestamp: 2022-01-01T00:00:00Z
        - resource:
            name: Samuel J
            id: fe26475d-ec3e-4884-9553-f7356683f7f9
            type: buyer
          merchant_account_id: default
          action: created
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: audit-log
          user:
            email_address: john@example.com
            name: John L
            staff: false
            id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
            status: active
          timestamp: 2022-01-01T00:00:00Z
      properties:
        items:
          description: A list of audit log entries.
          items:
            $ref: '#/components/schemas/AuditLog'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Audit Logs
      type: object
      x-tags:
      - Audit Logs
    BillingDetails:
      description: Billing details associated to a buyer.
      properties:
        type:
          description: The type of this resource. Is always `billing-details`.
          enum:
          - billing-details
          example: billing-details
          type: string
        first_name:
          description: The first name(s) or given name of the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address of the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number of the buyer. This number is formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The billing address of the buyer.
          nullable: true
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax information associated with the billing details.
          nullable: true
      title: Billing details
      type: object
      x-tags:
      - Buyers
    BillingDetailsRequest:
      description: Billing details to use associated to a buyer.
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          - required:
            - city
            - country
            - line1
            - postal_code
            - state
          description: The billing address for the buyer.
          nullable: true
          type: object
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax ID information associated with the billing details.
          nullable: true
          type: object
      title: Billing details (Create)
      type: object
      x-tags:
      - Buyers
    BillingDetailsUpdateRequest:
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The billing address for the buyer.
          nullable: true
          type: object
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax ID information associated with the billing details.
          nullable: true
          type: object
      title: Billing Details (Update)
      type: object
      x-tags:
      - Buyers
    BrowserInfo:
      properties:
        java_enabled:
          description: Indicates whether the client browser supports Java.
          example: true
          type: boolean
        javascript_enabled:
          description: Indicates whether the client browser supports JavaScript.
          example: true
          type: boolean
        language:
          description: |-
            The preferred language of the buyer,
            usually the language of the browser UI.
          example: en-GB
          type: string
        color_depth:
          description: The color depth of the screen.
          example: 32
          type: number
        screen_height:
          description: The height of the screen in pixels.
          example: 1080
          type: number
        screen_width:
          description: The width of the screen in pixels.
          example: 1920
          type: number
        time_zone_offset:
          description: Time-zone offset in minutes between UTC and buyer location.
          example: 60
          type: number
        user_device:
          description: The platform that is being used to access the website.
          enum:
          - desktop
          - mobile
          example: desktop
          type: string
        user_agent:
          description: The user agent string for the current browser.
          example: |-
            Mozilla/5.0 (darwin) AppleWebKit/537.36
            (KHTML, like Gecko) jsdom/16.7.0
          type: string
        accept_header:
          description: The `Accept` header of the request from the buyer's browser.
          example: '*/*'
          type: string
      required:
      - color_depth
      - java_enabled
      - javascript_enabled
      - language
      - screen_height
      - screen_width
      - time_zone_offset
      - user_agent
      - user_device
      title: Browser info
      type: object
    Buyer:
      example:
        billing_details: ""
        external_identifier: user-789123
        updated_at: 2013-07-16T19:23:00Z
        merchant_account_id: default
        created_at: 2013-07-16T19:23:00Z
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: buyer
        display_name: John L.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          description: The billing details associated with a buyer.
          nullable: true
        created_at:
          description: |-
            The date and time
            when this buyer was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        updated_at:
          description: |-
            The date and time
            when this buyer was last updated in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Buyer
      type: object
      x-tags:
      - Buyers
    Buyers:
      description: A list of buyers.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - billing_details: ""
          external_identifier: user-789123
          updated_at: 2013-07-16T19:23:00Z
          merchant_account_id: default
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
        - billing_details: ""
          external_identifier: user-789123
          updated_at: 2013-07-16T19:23:00Z
          merchant_account_id: default
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
      properties:
        items:
          description: A list of buyers.
          items:
            $ref: '#/components/schemas/Buyer'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Buyers
      type: object
      x-tags:
      - Buyers
    Buyer--Snapshot:
      description: |-
        Snapshot of a buyer, as used when embedded inside other
        resources.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          description: |-
            The billing details associated with the buyer, which include the
            address and tax ID.
          nullable: true
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
      title: Buyer (Snapshot)
      type: object
      x-tags:
      - Buyers
    BuyerRequest:
      description: A request to create a buyer.
      example:
        external_identifier: user-789123
        billing_details: '{}'
        display_name: John L.
      properties:
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetailsRequest'
          description: The optional billing details to associate with a buyer.
          nullable: true
          type: object
      title: Buyer (Create)
      type: object
      x-tags:
      - Buyers
    BuyerUpdate:
      description: A request to update a buyer.
      example:
        external_identifier: user-789123
        billing_details: '{}'
        display_name: John L.
      properties:
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetailsUpdateRequest'
          description: The billing details of the buyer.
          nullable: true
          type: object
      title: Buyer (Update)
      type: object
      x-tags:
      - Buyers
    BINLookupRequest:
      description: The result and raw data for a card BIN lookup.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `bin-lookup-request`.
          enum:
          - bin-lookup-request
          example: bin-lookup-request
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/BINLookupRequest_context'
      title: BIN Lookup Request
      type: object
      x-tags:
      - Transactions
    CardDetails:
      description: Details about a card.
      properties:
        type:
          description: '`card-detail`.'
          enum:
          - card-detail
          example: card-detail
          type: string
        id:
          description: |-
            The 8 digit BIN of the card. When looking up card details using a
            `payment_method_id` this value will be `null`.
          example: "42424242"
          format: bin
          maxLength: 8
          minLength: 8
          type: string
        card_type:
          description: The type of card.
          enum:
          - credit
          - debit
          example: credit
          type: string
        scheme:
          description: The scheme/brand of the card.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        scheme_icon_url:
          description: An icon to display for the card scheme.
          example: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          type: string
        country:
          description: The 2-letter ISO code of the issuing country of the card.
          example: US
          type: string
        required_fields:
          $ref: '#/components/schemas/RequiredFields'
      title: Card Details
      type: object
    ClickToPaySessionRequest:
      description: Return digital payment application details for Click to Pay.
      properties:
        checkout_session_id:
          description: The identifier for the current checkout session.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
      required:
      - checkout_session_id
      title: Click to Pay session request
      type: object
      x-tags:
      - Request Bodies
    DigitalWalletApplePayTokenDecrypted:
      description: The result after decrypting an Apple Pay token.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `digital-wallet-apple-pay-token-decrypted`.
          enum:
          - digital-wallet-apple-pay-token-decrypted
          example: digital-wallet-apple-pay-token-decrypted
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/DigitalWalletApplePayTokenDecrypted_context'
      title: Digital wallet Apple Pay token decrypted
      type: object
      x-tags:
      - Transactions
    DigitalWalletClickToPayTokenDecrypted:
      description: The result after decrypting an Click to Pay token.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `digital-wallet-click-to-pay-token-decrypted`.
          enum:
          - digital-wallet-click-to-pay-token-decrypted
          example: digital-wallet-click-to-pay-token-decrypted
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/DigitalWalletClickToPayTokenDecrypted_context'
      title: Digital wallet Click to Pay token decrypted
      type: object
      x-tags:
      - Transactions
    DigitalWalletGooglePayTokenDecrypted:
      description: The result after decrypting an Google Pay token.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `digital-wallet-google-pay-token-decrypted`.
          enum:
          - digital-wallet-google-pay-token-decrypted
          example: digital-wallet-google-pay-token-decrypted
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/DigitalWalletGooglePayTokenDecrypted_context'
      title: Digital wallet Google Pay token decrypted
      type: object
      x-tags:
      - Transactions
    PaymentOptionCardScheme:
      title: The scheme of the transaction
      type: string
    RequiredFields:
      description: The fields that are required to process a transaction for this
        payment option.
      example:
        email_address: true
        address:
          country: true
          city: true
          state: true
          postal_code: true
          line1: true
          house_number_or_name: true
        last_name: true
        phone_number: true
        first_name: true
        tax_id: true
      properties:
        first_name:
          description: The first (given) name of the buyer.
          readOnly: true
          type: boolean
        last_name:
          description: The last (family) name of the buyer.
          readOnly: true
          type: boolean
        email_address:
          description: The email address of the buyer.
          readOnly: true
          type: boolean
        phone_number:
          description: The phone number of the buyer.
          readOnly: true
          type: boolean
        address:
          $ref: '#/components/schemas/RequiredFields_address'
        tax_id:
          description: The tax id code associated with the billing details.
          readOnly: true
          type: boolean
      title: Required Fields
      type: object
    CardRequest:
      description: Details to register a new card payment method.
      properties:
        method:
          description: '`card`.'
          enum:
          - card
          example: card
          type: string
        number:
          description: |-
            The 13-19 digit number for this card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: The expiration date of the card, formatted `MM/YY`.
          example: 11/25
          maxLength: 5
          minLength: 5
          pattern: ^\d{2}/\d{2}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - expiration_date
      - method
      - number
      - security_code
      title: Card
      type: object
      x-tags:
      - Request Bodies
    Connection:
      description: A configured connection.
      properties:
        id:
          description: The ID of the connection.
          example: 7b5e02bd-fa53-4ef0-b11e-1609d0f48cc5
          type: string
        type:
          default: connection
          description: '`connection`.'
          example: connection
          type: string
        name:
          description: The name of this connection.
          example: My Connection
          type: string
        active:
          description: |-
            Whether this connection is currently in use. Connections can
            be deactivated to allow for them to be kept around and
            re-activated at a later date.
          example: true
          type: boolean
        definition:
          $ref: '#/components/schemas/ConnectionDefinition'
      title: Connection
      type: object
      x-tags:
      - Discovery
    Connections:
      description: A list of configured connections.
      properties:
        items:
          items:
            $ref: '#/components/schemas/Connection'
          type: array
      title: Connections
      type: object
      x-tags:
      - Discovery
    ConnectionDefinition:
      description: A connection that can be configured.
      properties:
        id:
          description: The ID of the connection.
          example: stripe-card
          type: string
        type:
          default: connection-definition
          description: '`connection-definition`.'
          example: connection-definition
          type: string
        name:
          description: The name of this connection.
          example: Stripe
          type: string
        count:
          description: The number of configured connections.
          example: 1
          type: number
        group:
          enum:
          - anti-fraud-service
          - digital-wallet
          - gift-card-service
          - payment-service
          example: payment-service
          type: string
        category:
          enum:
          - anti-fraud
          - bank
          - bnpl
          - card
          - cash
          - stored-credit
          - wallet
          example: card
          type: string
        icon_url:
          description: An icon to display for the connection.
          example: https://cdn.gr4vy.app/stripe.svg
          nullable: true
          type: string
        provider:
          description: The provider for this connection.
          example: Stripe
          nullable: true
          type: string
      title: Connection Definition
      type: object
      x-tags:
      - Discovery
    ConnectionDefinitions:
      description: A list of available connection definitions.
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectionDefinition'
          type: array
      title: Connection definitions
      type: object
      x-tags:
      - Discovery
    ConnectionOptions:
      properties:
        cybersource-card:
          $ref: '#/components/schemas/ConnectionOptions_cybersource_card'
        cybersource-anti-fraud:
          $ref: '#/components/schemas/ConnectionOptions_cybersource_anti_fraud'
        forter-anti-fraud:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud'
        adyen-card:
          $ref: '#/components/schemas/ConnectionOptions_adyen_card'
        paypal-paypal:
          $ref: '#/components/schemas/ConnectionOptions_paypal_paypal'
        paypal-paypalpaylater:
          $ref: '#/components/schemas/ConnectionOptions_paypal_paypal'
        stripe-card:
          $ref: '#/components/schemas/ConnectionOptions_stripe_card'
      title: Connection Options
      type: object
    CartItem:
      description: |-
        A cart item that represents a single cart line item for a transaction.
        Note that some optional properties are required for certain payment
        service providers. If no value is set for these properties, we will use
        their default value.

        If the total due to be paid for the item is required by the payment service
        provider, generally referred to as the "total amount", the formula below
        will usually be used to calculate this amount:

        `(unit_amount * quantity) - discount_amount + tax_amount`

        It's highly recommended that the total amount to pay for all items
        should match the transaction's amount to reduce the risk of the
        transaction being declined by the payment service provider.
      example:
        tax_amount: 0
        external_identifier: item-789123
        quantity: 1
        product_url: https://example.com/items/gopro
        product_type: physical
        discount_amount: 0
        image_url: https://example.com/images/items/gopro.png
        name: GoPro HERO9 Camcorder
        unit_amount: 37999
        categories:
        - categories
        - categories
        - categories
        - categories
        - categories
        sku: sku-789123
      properties:
        name:
          description: |-
            The name of the cart item. The value you set for this property may
            be truncated if the maximum length accepted by a payment service
            provider is less than 255 characters.
          example: GoPro HERO9 Camcorder
          maxLength: 255
          type: string
        quantity:
          description: |-
            The quantity of this item in the cart. This value cannot be negative
            or zero.
          example: 1
          maximum: 99999999
          minimum: 1
          type: integer
        unit_amount:
          deprecated: true
          description: |-
            The amount for an individual item represented as a monetary amount
            in the smallest currency unit for the given currency, for example
            `1299` USD cents represents `$12.99`.
            The amount sent through to the payment processor as unitary amount
            will be calculated to include the discount and tax values sent
            as part of this cart item.
          example: 37999
          maximum: 99999999
          minimum: 0
          type: integer
        discount_amount:
          default: 0
          description: |-
            The amount discounted for this item represented as a monetary amount
            in the smallest currency unit for the given currency, for example `1299`
            USD cents represents `$12.99`.

            Please note that this amount is for the total of the cart item and not
            for an individual item. For example, if the quantity is 5, this value
            should be the total discount amount for 5 of the cart item.

            You might see unexpected failed transactions if the `discount_amount` can
            not be equally divided by the `quantity` value. This is due to the fact
            that some payment services require this amount to be specified per unit.

            In this situation we recommend splitting this item into separate items,
            each with their own specific discount.
          example: 0
          maximum: 99999999
          minimum: 0
          nullable: true
          type: integer
        tax_amount:
          default: 0
          description: |-
            The tax amount for this item represented as a monetary amount
            in the smallest currency unit for the given currency, for example `1299`
            USD cents represents `$12.99`.

            Please not that this amount is for the total of the cart item and not
            for an individual item. For example, if the quantity is 5, this value
            should be the total tax amount for 5 of the cart item.

            You might see unexpected failed transactions if the `tax_amount` can
            not be equally divided by the `quantity` value. This is due to the fact
            that some payment services require this amount to be specified per unit.

            In this situation we recommend splitting this item into separate items,
            each with their own specific tax amount.
          example: 0
          maximum: 99999999
          minimum: 0
          nullable: true
          type: integer
        external_identifier:
          description: An external identifier for the cart item. This can be set to
            any value and is not sent to the payment service.
          example: item-789123
          maxLength: 200
          nullable: true
          type: string
        sku:
          description: The SKU for the item.
          example: sku-789123
          maxLength: 200
          nullable: true
          type: string
        product_url:
          description: The product URL for the item.
          example: https://example.com/items/gopro
          format: url
          maxLength: 2083
          nullable: true
          type: string
        image_url:
          description: The URL for the image of the item.
          example: https://example.com/images/items/gopro.png
          format: url
          maxLength: 2083
          nullable: true
          type: string
        categories:
          description: |-
            A list of strings containing product categories for the item.
            Max length per item: 50.
          items:
            maxLength: 50
            type: string
          maxItems: 100
          nullable: true
          type: array
        product_type:
          description: The product type of the cart item.
          enum:
          - physical
          - discount
          - shipping_fee
          - sales_tax
          - digital
          - gift_card
          - store_credit
          - surcharge
          example: physical
          nullable: true
          type: string
      required:
      - name
      - quantity
      - unit_amount
      title: Cart Item
      type: object
    CardSchemeDefinition:
      description: Definitions of a card scheme including icon, label, etc.
      example:
        icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
        id: visa
        type: card-scheme-definition
        display_name: Visa
      properties:
        type:
          description: '`card-scheme-definition`.'
          enum:
          - card-scheme-definition
          example: card-scheme-definition
          type: string
        id:
          description: The name of this card scheme.
          example: visa
          type: string
        icon_url:
          description: The icon for this card scheme.
          example: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          type: string
        display_name:
          description: The display name of this card scheme.
          example: Visa
          type: string
      title: Card Scheme Definition
      type: object
      x-tags:
      - Card Scheme Definitions
    CardSchemeDefinitions:
      description: A list of available card scheme definitions.
      example:
        items:
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          id: visa
          type: card-scheme-definition
          display_name: Visa
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          id: visa
          type: card-scheme-definition
          display_name: Visa
      properties:
        items:
          items:
            $ref: '#/components/schemas/CardSchemeDefinition'
          type: array
      title: Card Scheme Definitions
      type: object
      x-tags:
      - Card Scheme Definitions
    CheckoutSession:
      description: A short-lived checkout session.
      example:
        metadata:
          key: value
        expires_at: 2022-01-01T00:00:00Z
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: checkout-session
        payment_method:
          method: card
          scheme: visa
          details:
            bin: "411111"
            card_country: US
            card_type: credit
          id: id
          label: "4242"
          type: payment_method
      properties:
        type:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        expires_at:
          description: |-
            The date and time when the Checkout Session will expire.
            By default this will be set to 1 hour from the date of creation.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          nullable: true
          type: array
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it.
          example:
            key: value
          maxProperties: 20
          nullable: true
          type: object
        payment_method:
          $ref: '#/components/schemas/CheckoutSession_payment_method'
      title: Checkout Session
      type: object
      x-tags:
      - Checkout
    CheckoutSessionRequest:
      description: Details to register a new Checkout Session payment method.
      properties:
        method:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          nullable: true
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - id
      - method
      title: Checkout Session
      type: object
      x-tags:
      - Request Bodies
    CheckoutSessionCreateRequest:
      description: A request to create a checkout session.
      example:
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
      properties:
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          nullable: true
          type: array
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it.
          example:
            key: value
          maxProperties: 20
          nullable: true
          type: object
      title: Checkout Session (Create)
      type: object
      x-tags:
      - Checkout
    CheckoutSessionUpdateRequest:
      description: A request to update a checkout session.
      example:
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
      properties:
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          nullable: true
          type: array
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it.
          example:
            key: value
          maxProperties: 20
          nullable: true
          type: object
      title: Checkout Session (Update)
      type: object
      x-tags:
      - Checkout
    Cryptogram:
      description: A network token cryptogram.
      example:
        cryptogram: cryptogram
      properties:
        cryptogram:
          description: The cryptogram of the network token.
          type: string
      title: Cryptogram
      type: object
      x-tags:
      - Tokens
    DigitalWallet:
      description: A digital wallet (e.g. Apple Pay) that has been registered.
      example:
        pending_certificate_count: 1
        active_certificate_count: 1
        merchant_name: Gr4vy
        merchant_display_name: Gr4vy
        created_at: 2012-12-12T10:53:43Z
        type: digital-wallet
        domain_names:
        - example.com
        merchant_country_code: US
        updated_at: 2012-12-12T10:53:43Z
        expired_certificate_count: 1
        provider: apple
        merchant_account_id: default
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        merchant_url: https://example.com
        fields:
          digital_payment_application_id: digital_payment_application_id
          digital_payment_application_name: digital_payment_application_name
      properties:
        type:
          description: '`digital-wallet`.'
          enum:
          - digital-wallet
          example: digital-wallet
          type: string
        id:
          description: The ID of the registered digital wallet.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        merchant_name:
          description: The name of the merchant the digital wallet is registered to.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: The main URL of the merchant.
          example: https://example.com
          format: url
          nullable: true
          type: string
        merchant_display_name:
          description: The consumer facing name of the merchant.
          example: Gr4vy
          nullable: true
          type: string
        merchant_country_code:
          description: The country code where the merchant is registered.
          example: US
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        fields:
          $ref: '#/components/schemas/DigitalWalletClickToPayFields'
        created_at:
          description: The date and time when this digital wallet was registered.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this digital wallet was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        active_certificate_count:
          description: The number of active custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
        pending_certificate_count:
          description: The number of pending custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
        expired_certificate_count:
          description: The number of expired custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
      title: Digital Wallet
      type: object
      x-tags:
      - Digital Wallets
    DigitalWallets:
      description: A list of registered digital wallets.
      example:
        items:
        - pending_certificate_count: 1
          active_certificate_count: 1
          merchant_name: Gr4vy
          merchant_display_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          type: digital-wallet
          domain_names:
          - example.com
          merchant_country_code: US
          updated_at: 2012-12-12T10:53:43Z
          expired_certificate_count: 1
          provider: apple
          merchant_account_id: default
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          merchant_url: https://example.com
          fields:
            digital_payment_application_id: digital_payment_application_id
            digital_payment_application_name: digital_payment_application_name
        - pending_certificate_count: 1
          active_certificate_count: 1
          merchant_name: Gr4vy
          merchant_display_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          type: digital-wallet
          domain_names:
          - example.com
          merchant_country_code: US
          updated_at: 2012-12-12T10:53:43Z
          expired_certificate_count: 1
          provider: apple
          merchant_account_id: default
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          merchant_url: https://example.com
          fields:
            digital_payment_application_id: digital_payment_application_id
            digital_payment_application_name: digital_payment_application_name
      properties:
        items:
          description: A list of registered digital wallets.
          items:
            $ref: '#/components/schemas/DigitalWallet'
          type: array
      title: Digital Wallets
      type: object
      x-tags:
      - Digital Wallets
    DigitalWalletClickToPayFields:
      example:
        digital_payment_application_id: digital_payment_application_id
        digital_payment_application_name: digital_payment_application_name
      properties:
        digital_payment_application_id:
          description: Unique ID assigned for digital payment application.
          type: string
        digital_payment_application_name:
          description: Name assigned for digital payment application.
          type: string
      title: Click to Pay
      type: object
      x-tags:
      - Request Bodies
    DigitalWalletRequest:
      description: Merchant details used to register with a digital wallet provider.
      example:
        merchant_country_code: US
        provider: apple
        merchant_name: Gr4vy
        merchant_display_name: Gr4vy
        accept_terms_and_conditions: true
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        merchant_name:
          description: |-
            The name of the merchant. This is used to register the merchant with a
            digital wallet provider and this name is not displayed to the buyer.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: The main URL of the merchant.
          example: https://example.com
          format: url
          nullable: true
          type: string
        merchant_display_name:
          description: The consumer facing name of the merchant.
          example: Gr4vy
          nullable: true
          type: string
        merchant_country_code:
          description: The country code where the merchant is registered.
          example: US
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        accept_terms_and_conditions:
          description: |-
            The explicit acceptance of the digital wallet provider's terms and
            conditions by the merchant. Needs to be `true` to register a new digital
            wallet.
          example: true
          type: boolean
      required:
      - accept_terms_and_conditions
      - domain_names
      - merchant_name
      - provider
      title: Digital Wallet (Register)
      type: object
      x-tags:
      - Request Bodies
    DigitalWalletUpdate:
      description: Request body to update a registered digital wallet's details.
      example:
        merchant_country_code: US
        merchant_name: Gr4vy
        merchant_display_name: Gr4vy
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        merchant_name:
          description: |-
            The name of the merchant. This is used to update the value initially
            used to register with a digital wallet provider and this name is not
            displayed to the buyer.
          example: Gr4vy
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        merchant_display_name:
          description: The consumer facing name of the merchant.
          example: Gr4vy
          nullable: true
          type: string
        merchant_country_code:
          description: The country code where the merchant is registered.
          example: US
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        merchant_url:
          description: The main URL of the merchant.
          example: https://example.com
          type: string
      title: Digital Wallet (Update)
      type: object
      x-tags:
      - Request Bodies
    ErrorGeneric:
      description: A generic client error.
      properties:
        type:
          default: error
          description: The type of this object. This is always `error`.
          enum:
          - error
          example: error
          type: string
        code:
          description: A custom code to further describe the type of error being returned.
            This code provides further specification within the HTTP `status` code
            and can be used by a program to define logic based on the error.
          example: incorrect_json
          type: string
        status:
          description: The HTTP status code of this error.
          example: 499
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 200
          type: integer
        message:
          description: 'A human readable message that describes the error. The content
            of this field should not be used to determine any business logic. '
          example: The request body was not valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Generic Error
      type: object
      x-tags:
      - Errors
    Error400BadRequest:
      description: Bad Request (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`bad_request`.'
          enum:
          - bad_request
          example: bad_request
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: |-
            Describes the fields that are missing or incorrectly formatted in the API
            request.
          example: Missing '****' field
          type: string
        details:
          description: A list of detail objects that further clarify the reason for
            the error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Bad Request
      type: object
      x-tags:
      - Errors
    Error400IncorrectJson:
      description: Incorrect JSON (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`incorrect_json`.'
          enum:
          - incorrect_json
          example: incorrect_json
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: Incorrect JSON. The request body could not be parsed as valid
            JSON.
          example: Incorrect JSON. The request body could not be parsed as valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Incorrect JSON
      type: object
      x-tags:
      - Errors
    Error400InvalidCredentials:
      description: Invalid credentials (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`invalid_credentials`.'
          enum:
          - invalid_credentials
          example: invalid_credentials
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: The provided credentials are invalid.
          example: The provided credentials are invalid
          type: string
      title: Invalid credentials
      type: object
      x-tags:
      - Errors
    Error401Unauthorized:
      description: Unauthorized Error (HTTP 401).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`unauthorized`.'
          enum:
          - unauthorized
          example: unauthorized
          type: string
        status:
          description: '`401`.'
          enum:
          - 401
          example: 401
          type: integer
        message:
          description: No valid API authentication found.
          enum:
          - No valid API authentication found
          example: No valid API authentication found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Unauthorized Error
      type: object
      x-tags:
      - Errors
    Error403Forbidden:
      description: Forbidden Error (HTTP 403).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`forbidden`.'
          enum:
          - forbidden
          example: forbidden
          type: string
        status:
          description: '`403`.'
          enum:
          - 403
          example: 403
          type: integer
        message:
          description: Invalid credentials.
          enum:
          - Invalid credentials
          example: Invalid credentials
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Forbidden Error
      type: object
      x-tags:
      - Errors
    Error404PendingCreation:
      description: Pending Creation Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`pending_creation`.'
          enum:
          - pending_creation
          example: pending_creation
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource is still pending.
          enum:
          - The resource is still pending
          example: The resource is still pending
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Pending Creation Error
      type: object
      x-tags:
      - Errors
    Error404NotFound:
      description: Not Found Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`not_found`.'
          enum:
          - not_found
          example: not_found
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource could not be found.
          enum:
          - The resource could not be found
          example: The resource could not be found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Not Found Error
      type: object
      x-tags:
      - Errors
    Error409DuplicateRecord:
      description: Duplicate Record Error (HTTP 409).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`duplicate_record`.'
          enum:
          - duplicate_record
          example: duplicate_record
          type: string
        status:
          description: '`409`.'
          enum:
          - 409
          example: 409
          type: integer
        message:
          description: Further details on the field that triggered the error.
          example: A duplicate record exists with this external_identifier value
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Duplicate Record Error
      type: object
      x-tags:
      - Errors
    Error429TooManyRequests:
      description: Too Many Requests Error (HTTP 429).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`too_many_requests`.'
          enum:
          - too_many_requests
          example: too_many_requests
          type: string
        status:
          description: '`429`.'
          enum:
          - 429
          example: 429
          type: integer
        message:
          description: Further details on the field that triggered the error.
          example: Too many requests
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Too Many Requests Error
      type: object
      x-tags:
      - Errors
    ErrorDetail:
      description: Additional detail about the part of a request body that caused
        an issue.
      properties:
        location:
          description: The location where the error caused an issue.
          enum:
          - query
          - body
          - path
          - header
          example: body
          type: string
        type:
          description: A unique identifier for the type of error that occurred.
          example: value_error.missing
          type: string
        pointer:
          description: |-
            The exact item for which the validation did not succeed. This is a JSON
            pointer for request bodies, while for query, path, and header parameters
            it is the name of the parameter.
          example: /payment_method/number
          type: string
        message:
          description: A human readable message for this error detail.
          example: field required
          type: string
      title: Error details
      type: object
      x-tags:
      - Errors
    GiftCard:
      description: A gift card stored for a buyer, or used in a transaction.
      example:
        last4: "1234"
        updated_at: 2013-07-16T19:23:00Z
        service:
          gift_card_service_definition_id: qwikcilver-gift-card
          updated_at: 2012-12-12T10:53:43Z
          merchant_account_id: default
          active: true
          created_at: 2012-12-12T10:53:43Z
          id: 6c020bf3-179b-4f4f-858d-84e39e196e0f
          type: gift-card-service
          display_name: Qwikcilver UK
          fields:
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
        bin: "412345"
        merchant_account_id: default
        created_at: 2013-07-16T19:23:00Z
        id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        type: gift-card
        expiration_date: 2013-07-16T19:23:00Z
        sub_bin: "554"
        buyer: ""
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card
          example: gift-card
          type: string
        id:
          description: The ID of this gift card.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        service:
          $ref: '#/components/schemas/GiftCardService'
        bin:
          description: The first 6 digits of the full gift card number.
          example: "412345"
          type: string
        sub_bin:
          description: The 3 digits after the `bin` of the full gift card number.
          example: "554"
          type: string
        last4:
          description: The last 4 digits for the gift card.
          example: "1234"
          type: string
        expiration_date:
          description: |-
            The date and time when this gift card expires. This is a full
            date/time and may be more accurate than the actual expiry date
            received by the gift card service.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer'
          description: The optional buyer for which this payment method has been stored.
          nullable: true
        created_at:
          description: The date and time when this gift card was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this gift card was last updated in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: A gift card
      type: object
      x-tags:
      - Gift Cards
    GiftCards:
      description: A list of stored gift cards.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - last4: "1234"
          updated_at: 2013-07-16T19:23:00Z
          service:
            gift_card_service_definition_id: qwikcilver-gift-card
            updated_at: 2012-12-12T10:53:43Z
            merchant_account_id: default
            active: true
            created_at: 2012-12-12T10:53:43Z
            id: 6c020bf3-179b-4f4f-858d-84e39e196e0f
            type: gift-card-service
            display_name: Qwikcilver UK
            fields:
            - value: sk_test_26PHem9AhJZvU623DfE1x4sd
              key: secret_key
            - value: sk_test_26PHem9AhJZvU623DfE1x4sd
              key: secret_key
          bin: "412345"
          merchant_account_id: default
          created_at: 2013-07-16T19:23:00Z
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
          type: gift-card
          expiration_date: 2013-07-16T19:23:00Z
          sub_bin: "554"
          buyer: ""
        - last4: "1234"
          updated_at: 2013-07-16T19:23:00Z
          service:
            gift_card_service_definition_id: qwikcilver-gift-card
            updated_at: 2012-12-12T10:53:43Z
            merchant_account_id: default
            active: true
            created_at: 2012-12-12T10:53:43Z
            id: 6c020bf3-179b-4f4f-858d-84e39e196e0f
            type: gift-card-service
            display_name: Qwikcilver UK
            fields:
            - value: sk_test_26PHem9AhJZvU623DfE1x4sd
              key: secret_key
            - value: sk_test_26PHem9AhJZvU623DfE1x4sd
              key: secret_key
          bin: "412345"
          merchant_account_id: default
          created_at: 2013-07-16T19:23:00Z
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
          type: gift-card
          expiration_date: 2013-07-16T19:23:00Z
          sub_bin: "554"
          buyer: ""
      properties:
        items:
          description: A list of stored gift cards.
          items:
            $ref: '#/components/schemas/GiftCard'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Gift Cards
      type: object
      x-tags:
      - Gift Cards
    GiftCard--Snapshot:
      description: A snapshot of a gift card used in a transaction.
      example:
        last4: "1234"
        bin: "412345"
        id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        type: gift-card
        sub_bin: "554"
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card
          example: gift-card
          type: string
        id:
          description: |-
            The ID of this gift card. This may be `null` if the gift
            card is not stored.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          nullable: true
          type: string
        bin:
          description: The first 6 digits of the full gift card number.
          example: "412345"
          type: string
        sub_bin:
          description: The 3 digits after the `bin` of the full gift card number.
          example: "554"
          type: string
        last4:
          description: The last 4 digits for the gift card.
          example: "1234"
          type: string
      title: Gift card (Snapshot)
      type: object
      x-tags:
      - Gift Cards
    GiftCard--Summary:
      description: A gift card stored for a buyer.
      example:
        balance_raw_error_code: "10363"
        last4: "1234"
        balance: 1299
        bin: "412345"
        merchant_account_id: default
        balance_raw_error_message: This currency is not supported by the merchant.
        currency: USD
        balance_error_code: incorrect_currency
        id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        type: gift-card
        expiration_date: 2013-07-16T19:23:00Z
        sub_bin: "554"
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card
          example: gift-card
          type: string
        id:
          description: The ID of this gift card.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          nullable: true
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        bin:
          description: The first 6 digits of the full gift card number.
          example: "412345"
          type: string
        sub_bin:
          description: The 3 digits after the `bin` of the full gift card number.
          example: "554"
          type: string
        last4:
          description: The last 4 digits for the gift card.
          example: "1234"
          type: string
        expiration_date:
          description: |-
            The date and time when this gift card expires. This is a full
            date/time and may be more accurate than the actual expiry date
            received by the gift card service.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        balance:
          description: |-
            The amount remaining on the balance for this gift card according to the
            gift card service. This may be `null` if the balance could not be fetched.
          example: 1299
          maximum: 99999999
          minimum: 0
          nullable: true
          type: integer
        currency:
          description: The ISO-4217 currency code that this gift card has a balance
            for.
          example: USD
          nullable: true
          type: string
        balance_error_code:
          description: |-
            If the last balance update failed, this will contain the
            internal code for this error.
          enum:
          - expired_card
          - inactive_card
          - incorrect_currency
          - insufficient_funds
          - invalid_amount
          - invalid_gift_card
          - invalid_service_configuration
          - invalid_service_credentials
          - operation_canceled
          - service_error
          - service_network_error
          - unknown_error
          example: incorrect_currency
          nullable: true
          type: string
        balance_raw_error_code:
          description: |-
            If the last balance update failed, this will contain the
            the raw error code received from the gift card provider.
          example: "10363"
          nullable: true
          type: string
        balance_raw_error_message:
          description: |-
            If the last balance update failed, this will contain the
            the raw error message received from the gift card provider.
          example: This currency is not supported by the merchant.
          nullable: true
          type: string
      title: A stored gift card (summary)
      type: object
      x-tags:
      - Gift Cards
    GiftCards--Summary:
      description: A list of gift cards in a short format including the latest balance.
      example:
        items:
        - balance_raw_error_code: "10363"
          last4: "1234"
          balance: 1299
          bin: "412345"
          merchant_account_id: default
          balance_raw_error_message: This currency is not supported by the merchant.
          currency: USD
          balance_error_code: incorrect_currency
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
          type: gift-card
          expiration_date: 2013-07-16T19:23:00Z
          sub_bin: "554"
        - balance_raw_error_code: "10363"
          last4: "1234"
          balance: 1299
          bin: "412345"
          merchant_account_id: default
          balance_raw_error_message: This currency is not supported by the merchant.
          currency: USD
          balance_error_code: incorrect_currency
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
          type: gift-card
          expiration_date: 2013-07-16T19:23:00Z
          sub_bin: "554"
      properties:
        items:
          description: A list of stored gift cards.
          items:
            $ref: '#/components/schemas/GiftCard--Summary'
          type: array
      title: Gift Cards (Summary)
      type: object
      x-tags:
      - Gift Cards
    GiftCardBalanceRequest:
      description: Check the balance for a stored/new gift card.
      example:
        number: "4123455541234561234"
        pin: "1234"
        id: e6cdf979-87e2-4796-8ff6-9784d5aed893
      properties:
        id:
          description: |-
            The ID of the gift card to check a balance for.
            Required if `number` is not set.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        number:
          description: |-
            The 16-19 digit number for this gift card.
            Required if `id` is not set.
          example: "4123455541234561234"
          maxLength: 19
          minLength: 16
          pattern: ^[0-9]{16,19}$
          type: string
        pin:
          description: The PIN for this gift card. Required if `number` is set.
          example: "1234"
          type: string
      title: Gift Card Balance (Request)
      type: object
      x-tags:
      - Request Bodies
    GiftCardBalanceNewRequest:
      description: Check the balance for a non-stored gift card.
      properties:
        number:
          description: The 16-19 digit number for this gift card.
          example: "4123455541234561234"
          maxLength: 19
          minLength: 16
          pattern: ^[0-9]{16,19}$
          type: string
        pin:
          description: The PIN for this gift card.
          example: "1234"
          type: string
      required:
      - number
      - pin
      title: Gift Card Balance (New)
      type: object
      x-tags:
      - Request Bodies
    GiftCardBalanceStoredRequest:
      description: Check the balance for a stored gift card.
      properties:
        id:
          description: The ID of the gift card to check a balance for.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
      required:
      - id
      title: Gift Card Balance (Stored)
      type: object
      x-tags:
      - Request Bodies
    GiftCardBalancesRequest:
      description: |-
        A request to check the balance for a set of stored and
        non-stored gift cards.
      example:
        items:
        - number: "4123455541234561234"
          pin: "1234"
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        - number: "4123455541234561234"
          pin: "1234"
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
      properties:
        items:
          description: |-
            One or more gift cards to check balances for, up to a default limit
            of 10 gift cards. Please contact our team to change this limit.
          items:
            $ref: '#/components/schemas/GiftCardBalanceRequest'
          minItems: 1
          type: array
      title: A gift card balance check request
      type: object
      x-tags:
      - Gift Cards
    GiftCardRedemption:
      description: A redemption of a gift card used in a transaction.
      example:
        raw_error_code: "10001"
        amount: 1299
        gift_card:
          last4: "1234"
          bin: "412345"
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
          type: gift-card
          sub_bin: "554"
        gift_card_service_redemption_id: xYqd43gySMtori
        error_code: expired_card
        id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
        type: gift-card-redemption
        raw_error_message: Card expired.
        status: succeeded
        refunded_amount: 1299
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card-redemption
          example: gift-card-redemption
          type: string
        id:
          description: |-
            The ID of this gift card redemption. This may be `null` if the
            no redemption happened.
          example: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
          format: uuid
          nullable: true
          type: string
        status:
          description: The status of the gift card redemption for the `payment_method`.
          enum:
          - succeeded
          - failed
          - skipped
          example: succeeded
          type: string
        amount:
          description: The amount redeemed for this gift card.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
        refunded_amount:
          description: |-
            The amount refunded for this gift card. This can not be larger
            than `amount`.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
        gift_card_service_redemption_id:
          description: The gift card service's unique ID for the redemption.
          example: xYqd43gySMtori
          type: string
        error_code:
          description: |-
            If this gift card redemption resulted in an error, this will
            contain the internal code for the error.
          enum:
          - expired_card
          - inactive_card
          - incorrect_currency
          - insufficient_funds
          - invalid_amount
          - invalid_gift_card
          - invalid_service_configuration
          - invalid_service_credentials
          - operation_canceled
          - service_error
          - service_network_error
          - unknown_error
          example: expired_card
          nullable: true
          type: string
        raw_error_code:
          description: |-
            If this gift card redemption resulted in an error, this will
            contain the raw error code received from the gift card provider.
          example: "10001"
          nullable: true
          type: string
        raw_error_message:
          description: |-
            If this gift card redemption resulted in an error, this will
            contain the raw error message received from the gift card provider.
          example: Card expired.
          nullable: true
          type: string
        gift_card:
          $ref: '#/components/schemas/GiftCard--Snapshot'
      title: Gift card redemption
      type: object
      x-tags:
      - Gift Cards
    GiftCardRedemptionFailed:
      description: This event logs the request and response details of HTTP calls
        made to redeem gift cards, in case the call failed.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `gift-card-redemption-failed`.
          enum:
          - gift-card-redemption-failed
          example: gift-card-redemption-failed
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/GiftCardRedemptionFailed_context'
      title: Gift Cards Redemption - Failure
      type: object
      x-tags:
      - Transactions
    GiftCardRedemptionSucceeded:
      description: This event logs the request and response details of HTTP calls
        made to redeem gift cards, in case the call succeeded.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `gift-card-redemption-succeeded`.
          enum:
          - gift-card-redemption-succeeded
          example: gift-card-redemption-succeeded
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/GiftCardRedemptionSucceeded_context'
      title: Gift Cards Redemption - Succeeded
      type: object
      x-tags:
      - Transactions
    GiftCardRefundFailed:
      description: This event logs the request and response details of HTTP calls
        made to refund gift cards, in case the call failed.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `gift-card-refund-failed`.
          enum:
          - gift-card-refund-failed
          example: gift-card-refund-failed
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/GiftCardRefundFailed_context'
      title: Gift Cards Refund - Failed
      type: object
      x-tags:
      - Transactions
    GiftCardRefundSucceeded:
      description: This event logs the request and response details of HTTP calls
        made to refund gift cards, in case the call succeeded.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `gift-card-refund-succeeded`.
          enum:
          - gift-card-refund-succeeded
          example: gift-card-refund-succeeded
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/GiftCardRedemptionSucceeded_context'
      title: Gift Cards Refund - Succeeded
      type: object
      x-tags:
      - Transactions
    GiftCardService:
      description: An configured gift card service.
      example:
        gift_card_service_definition_id: qwikcilver-gift-card
        updated_at: 2012-12-12T10:53:43Z
        merchant_account_id: default
        active: true
        created_at: 2012-12-12T10:53:43Z
        id: 6c020bf3-179b-4f4f-858d-84e39e196e0f
        type: gift-card-service
        display_name: Qwikcilver UK
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card-service
          example: gift-card-service
          type: string
        id:
          description: The ID of this gift card service.
          example: 6c020bf3-179b-4f4f-858d-84e39e196e0f
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        gift_card_service_definition_id:
          description: |
            The ID of the gift card service definition used to create this service.
          example: qwikcilver-gift-card
          maxLength: 50
          minLength: 1
          type: string
        display_name:
          description: The custom name set for this service.
          example: Qwikcilver UK
          maxLength: 200
          minLength: 1
          type: string
        active:
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field
            configured for this gift card service. Fields marked as `secret`
            are not returned.
          items:
            $ref: '#/components/schemas/GiftCardService_fields'
          type: array
        created_at:
          description: The date and time when this service was created.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this service was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
      title: A gift card service
      type: object
      x-tags:
      - Gift Card Services
    GiftCardService--Snapshot:
      description: A snapshot of a gift card service used in a transaction.
      properties:
        type:
          description: The type of this resource.
          enum:
          - gift-card-service
          example: gift-card-service
          type: string
        id:
          description: The ID of this gift card service.
          example: 6c020bf3-179b-4f4f-858d-84e39e196e0f
          format: uuid
          type: string
        gift_card_service_definition_id:
          description: |
            The ID of the gift card service definition used to create this service.
          example: qwikcilver-gift-card
          maxLength: 50
          minLength: 1
          type: string
        display_name:
          description: The custom name set for this service.
          example: Qwikcilver UK
          maxLength: 200
          minLength: 1
          type: string
      title: Gift card service (Snapshot)
      type: object
      x-tags:
      - Gift Card Services
    GiftCardServiceCreateRequest:
      description: Request body for activating a gift card service.
      example:
        gift_card_service_definition_id: qwikcilver-gift-card
        active: true
        display_name: Qwikcilver UK
        fields:
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
      properties:
        gift_card_service_definition_id:
          description: The ID of the gift card service to use.
          example: qwikcilver-gift-card
          maxLength: 50
          minLength: 1
          type: string
        display_name:
          description: A custom name for the service. This will be shown in the Admin
            UI.
          example: Qwikcilver UK
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field defined
            by the definition for this gift card service.
          items:
            $ref: '#/components/schemas/GiftCardServiceCreateRequest_fields'
          type: array
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
      required:
      - display_name
      - fields
      - gift_card_service_definition_id
      title: Gift Card Service (Create)
      type: object
      x-tags:
      - Request Bodies
    GiftCardServiceUpdateRequest:
      description: Request body for updating a gift card service.
      example:
        active: true
        display_name: Qwikcilver UK
        fields:
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
      properties:
        display_name:
          description: A custom name for the gift card service. This will be shown
            in the Admin UI.
          example: Qwikcilver UK
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field defined
            by the definition for this gift card service.
          items:
            $ref: '#/components/schemas/GiftCardServiceUpdateRequest_fields'
          type: array
        active:
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
      title: Gift Card Service (Update)
      type: object
      x-tags:
      - Request Bodies
    GiftCardServiceVerifyRequest:
      description: Request body for verifying credentials against a gift card service.
      example:
        gift_card_service_definition_id: qwikcilver-gift-card
        fields:
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: pk_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        gift_card_service_id: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
      properties:
        gift_card_service_definition_id:
          description: The ID of the gift card service to use.
          example: qwikcilver-gift-card
          maxLength: 50
          minLength: 1
          type: string
        gift_card_service_id:
          description: |-
            The ID of the gift card service. Required if sending a partial set of
            credentials in the `fields` property. This will merge the provided
            fields with those already on the service.
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        fields:
          description: |-
            A list of fields where each field is a key-value pair that represents a defined field in the definition of the service. You are not required to send the full list of fields if the credentials for the service are already stored.
            For example, if your credentials for `qwikcilver-gift-card` are stored and you only provide a `secret_key` in the request, it will override the stored `secret_key` and verify the resulting set of credentials against the service.
          items:
            $ref: '#/components/schemas/GiftCardServiceVerifyRequest_fields'
          type: array
      required:
      - fields
      - gift_card_service_definition_id
      title: Gift Card Service (Verify)
      type: object
      x-tags:
      - Request Bodies
    GiftCardServiceDefinition:
      description: An available gift card service that can be configured.
      example:
        icon_url: https://cdn.gr4vy.app/stripe.svg
        id: qwikcilver-gift-card
        type: gift-card-service-definition
        display_name: Stripe
        fields:
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
      properties:
        id:
          description: The ID of the gift card service definition.
          example: qwikcilver-gift-card
          type: string
        type:
          default: gift-card-service-definition
          description: '`gift-card-service-definition`.'
          enum:
          - gift-card-service-definition
          example: gift-card-service-definition
          type: string
        display_name:
          description: The display name of this service.
          example: Stripe
          type: string
        fields:
          description: A list of fields that need to be submitted when activating
            the payment. service.
          items:
            $ref: '#/components/schemas/GiftCardServiceDefinition_fields'
          minItems: 1
          type: array
        icon_url:
          description: An icon to display for the payment service.
          example: https://cdn.gr4vy.app/stripe.svg
          type: string
      title: Gift Card Service Definition
      type: object
      x-tags:
      - Discovery
    GiftCardStoreRequest:
      description: The gift card details to store.
      example:
        number: "4123455541234561234"
        buyer_external_identifier: user-789123
        pin: "1234"
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
      properties:
        number:
          description: The 16-19 digit number for this gift card.
          example: "4123455541234561234"
          maxLength: 19
          minLength: 16
          pattern: ^[0-9]{16,19}$
          type: string
        pin:
          description: The PIN for this gift card.
          example: "1234"
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this gift card to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this gift card
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - number
      - pin
      title: Gift Card (Store)
      type: object
      x-tags:
      - Request Bodies
    GooglePayRequest:
      description: Details for a Google Pay payment method.
      properties:
        method:
          description: '`googlepay`.'
          enum:
          - googlepay
          example: googlepay
          type: string
        token:
          description: |-
            The encrypted (opaque) token returned by the Google Pay API that
            represents a payment method.
          type: string
        assurance_details:
          $ref: '#/components/schemas/GooglePayRequest_assurance_details'
        card_holder_name:
          description: Name of the card holder.
          nullable: true
          type: string
        redirect_url:
          description: |-
            We strongly recommend providing a `redirect_url` either when 3-D
            Secure is enabled and `three_d_secure_data` is not provided, or when
            using connections where 3DS is enabled. This value will be appended
            with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has
            completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - method
      - token
      title: Google Pay payment method request
      type: object
      x-tags:
      - Request Bodies
    GooglePaySessionRequest:
      description: Initiates a new session with Google Pay.
      properties:
        origin_domain:
          description: Fully qualified domain name of the merchant.
          type: string
      required:
      - origin_domain
      title: Google Pay session request
      type: object
      x-tags:
      - Request Bodies
    IssueCryptogramRequest:
      description: Request body for issue a cryptogram for a network token.
      example:
        merchant_initiated: false
      properties:
        merchant_initiated:
          default: false
          description: Defines if the request is merchant initiated or not.
          example: false
          type: boolean
      required:
      - merchant_initiated
      title: Issue cryptogram
      type: object
      x-tags:
      - Request Bodies
    MerchantAccount:
      example:
        amex_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_username: gr4vy
        visa_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_url: https://www.example.com/webhook
        created_at: 2022-02-01T14:20:00Z
        visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        type: merchant-account
        display_name: Plantly UK
        mastercard_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        loon_client_key: 7DD771287D0024BA418F8F7ECC7DF1CD
        loon_secret_key: '********'
        updated_at: 2022-02-01T14:20:00Z
        loon_accepted_schemes:
        - mastercard
        - visa
        outbound_webhook_password: '********'
        mastercard_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        amex_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        id: plantly-uk
      properties:
        type:
          description: '`merchant-account`.'
          enum:
          - merchant-account
          example: merchant-account
          type: string
        id:
          description: The ID for this merchant account.
          example: plantly-uk
          type: string
        display_name:
          description: The display name of this merchant account.
          example: Plantly UK
          type: string
        outbound_webhook_url:
          description: The optional URL where webhooks will be received.
          example: https://www.example.com/webhook
          nullable: true
          type: string
        outbound_webhook_username:
          description: |-
            The optional username to use when `outbound_webhook_url` is configured and
            requires basic authentication.
          example: gr4vy
          nullable: true
          type: string
        outbound_webhook_password:
          description: |-
            The optional password to use when `outbound_webhook_url` is configured and
            requires basic authentication.

            If the field is not `null`, the value is masked to avoid exposing sensitive information.
          example: '********'
          nullable: true
          type: string
        visa_network_tokens_requestor_id:
          description: Requestor ID provided for Visa after onboarding to use Network
            Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        visa_network_tokens_app_id:
          description: |-
            Application ID provided for Visa after onboarding to use Network
            Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        amex_network_tokens_requestor_id:
          description: Requestor ID provided for Amex after onboarding to use Network
            Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        amex_network_tokens_app_id:
          description: Application ID provided for Amex after onboarding to use Network
            Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        mastercard_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Mastercard after onboarding to use Network
            Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        mastercard_network_tokens_app_id:
          description: |-
            Application ID provided for Mastercard after onboarding to use
            Network Tokens.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          nullable: true
          type: string
        loon_client_key:
          description: |-
            Client key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.
          example: 7DD771287D0024BA418F8F7ECC7DF1CD
          nullable: true
          type: string
        loon_secret_key:
          description: |-
            Secret key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.

            If the field is not `null`, the value is masked to avoid exposing sensitive information.
          example: '********'
          nullable: true
          type: string
        loon_accepted_schemes:
          description: |-
            Card schemes accepted when creating jobs using this set of Loon API keys.
            Loon is the Account Updater service used by Gr4vy.
          example:
          - mastercard
          - visa
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
        created_at:
          description: The date and time when this merchant account was created.
          example: 2022-02-01T14:20:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this merchant account was updated.
          example: 2022-02-01T14:20:00Z
          format: date-time
          type: string
      title: Merchant Account
      type: object
      x-tags:
      - Merchant Account
    MerchantAccounts:
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - amex_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          outbound_webhook_username: gr4vy
          visa_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          outbound_webhook_url: https://www.example.com/webhook
          created_at: 2022-02-01T14:20:00Z
          visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          type: merchant-account
          display_name: Plantly UK
          mastercard_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          loon_client_key: 7DD771287D0024BA418F8F7ECC7DF1CD
          loon_secret_key: '********'
          updated_at: 2022-02-01T14:20:00Z
          loon_accepted_schemes:
          - mastercard
          - visa
          outbound_webhook_password: '********'
          mastercard_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          amex_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          id: plantly-uk
        - amex_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          outbound_webhook_username: gr4vy
          visa_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          outbound_webhook_url: https://www.example.com/webhook
          created_at: 2022-02-01T14:20:00Z
          visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          type: merchant-account
          display_name: Plantly UK
          mastercard_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          loon_client_key: 7DD771287D0024BA418F8F7ECC7DF1CD
          loon_secret_key: '********'
          updated_at: 2022-02-01T14:20:00Z
          loon_accepted_schemes:
          - mastercard
          - visa
          outbound_webhook_password: '********'
          mastercard_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          amex_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
          id: plantly-uk
      properties:
        items:
          description: A list of merchant accounts.
          items:
            $ref: '#/components/schemas/MerchantAccount'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Merchant Accounts
      type: object
      x-tags:
      - Merchant Accounts
    MerchantAccountCreate:
      description: A request to create a merchant account.
      example:
        amex_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_username: gr4vy
        visa_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_url: https://www.example.com/webhook
        visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        display_name: Plantly UK
        mastercard_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        loon_client_key: loon_client_key
        loon_secret_key: loon_secret_key
        loon_accepted_schemes:
        - visa
        - visa
        outbound_webhook_password: super-secret-password
        mastercard_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        amex_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        id: plantly-uk
      properties:
        id:
          description: The unique ID for the merchant account.
          example: plantly-uk
          maxLength: 22
          minLength: 1
          nullable: false
          type: string
        display_name:
          description: The human-readable name of the merchant account.
          example: Plantly UK
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        outbound_webhook_url:
          description: The optional URL where webhooks will be received.
          example: https://www.example.com/webhook
          nullable: true
          type: string
        outbound_webhook_username:
          description: |-
            The optional username to use when `outbound_webhook_url` is configured and
            requires basic authentication.
          example: gr4vy
          nullable: true
          type: string
        outbound_webhook_password:
          description: |-
            The optional password to use when `outbound_webhook_url` is configured and
            requires basic authentication.
          example: super-secret-password
          nullable: true
          type: string
        visa_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Visa after onboarding to use Network Tokens.
            The requestor ID must be unique across all schemes and merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        visa_network_tokens_app_id:
          description: |-
            Application ID provided for Visa after onboarding to use Network
            Tokens. The application ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        amex_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Amex after onboarding to use Network Tokens.
            The requestor ID must be unique across all schemes and merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        amex_network_tokens_app_id:
          description: Application ID provided for Amex after onboarding to use Network
            Tokens. The application ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        mastercard_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Mastercard after onboarding to use Network
            Tokens. The requestor ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        mastercard_network_tokens_app_id:
          description: |-
            Application ID provided for Mastercard after onboarding to use
            Network Tokens. The application ID must be unique across all schemes and
            merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        loon_client_key:
          description: |-
            Client key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          minLength: 1
          nullable: true
          type: string
        loon_secret_key:
          description: |-
            Secret key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          minLength: 1
          nullable: true
          type: string
        loon_accepted_schemes:
          description: |-
            Card schemes accepted when creating jobs using this set of Loon API keys.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set or if it's set to `null`, the Account Updater service doesn't get configured.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
      title: Merchant Account (Create)
      type: object
      x-tags:
      - Merchant Accounts
    MerchantAccountUpdate:
      description: A request to update a merchant account.
      example:
        amex_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_username: gr4vy
        visa_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        outbound_webhook_url: https://www.example.com/webhook
        visa_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        display_name: Plantly UK
        mastercard_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        loon_client_key: loon_client_key
        loon_secret_key: loon_secret_key
        loon_accepted_schemes:
        - visa
        - visa
        outbound_webhook_password: super-secret-password
        mastercard_network_tokens_requestor_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
        amex_network_tokens_app_id: e50fa0da-903d-4d54-aacc-4cac57d48df2
      properties:
        display_name:
          description: The human-readable name of the merchant account.
          example: Plantly UK
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        outbound_webhook_url:
          description: The optional URL where webhooks will be received.
          example: https://www.example.com/webhook
          nullable: true
          type: string
        outbound_webhook_username:
          description: |-
            The optional username to use when `outbound_webhook_url` is configured and
            requires basic authentication.
          example: gr4vy
          nullable: true
          type: string
        outbound_webhook_password:
          description: |-
            The optional password to use when `outbound_webhook_url` is configured and
            requires basic authentication.
          example: super-secret-password
          nullable: true
          type: string
        visa_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Visa after onboarding to use Network Tokens.
            The requestor ID must be unique across all schemes and merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        visa_network_tokens_app_id:
          description: |-
            Application ID provided for Visa after onboarding to use Network
            Tokens. The application ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        amex_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Amex after onboarding to use Network Tokens.
            The requestor ID must be unique across all schemes and merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        amex_network_tokens_app_id:
          description: Application ID provided for Amex after onboarding to use Network
            Tokens. The application ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        mastercard_network_tokens_requestor_id:
          description: |-
            Requestor ID provided for Mastercard after onboarding to use Network
            Tokens. The requestor ID must be unique across all schemes and merchant
            accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        mastercard_network_tokens_app_id:
          description: |-
            Application ID provided for Mastercard after onboarding to use
            Network Tokens. The application ID must be unique across all schemes and
            merchant accounts.
          example: e50fa0da-903d-4d54-aacc-4cac57d48df2
          maxLength: 300
          nullable: true
          type: string
        loon_client_key:
          description: |-
            Client key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set, the Account Updater service configuration is not updated.
            * If the field is set to `null`, the Account Updater service is disabled.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          minLength: 1
          nullable: true
          type: string
        loon_secret_key:
          description: |-
            Secret key provided by Pagos to authenticate to the Loon API.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set, the Account Updater service configuration is not updated.
            * If the field is set to `null`, the Account Updater service is disabled.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          minLength: 1
          nullable: true
          type: string
        loon_accepted_schemes:
          description: |-
            Card schemes accepted when creating jobs using this set of Loon API keys.
            Loon is the Account Updater service used by Gr4vy.

            * If the field is not set, the Account Updater service configuration is not updated.
            * If the field is set to `null`, the Account Updater service is disabled.
            * If the field is set to `null`, the other `loon_*` fields must be set to `null` as well.
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
      title: Merchant Account (Update)
      type: object
      x-tags:
      - Merchant Accounts
    MerchantProfileScheme:
      description: Merchant profile for a specific scheme.
      properties:
        merchant_acquirer_bin:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 11
          type: string
        merchant_url:
          description: URL to send when calling 3DS through this scheme.
          type: string
        merchant_acquirer_id:
          description: Merchant ID to use when calling 3DS through this scheme.
          maxLength: 35
          type: string
        merchant_name:
          description: Merchant name to use when calling 3DS through this scheme.
          maxLength: 40
          type: string
        merchant_country_code:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 3
          minLength: 3
          type: string
        merchant_category_code:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 4
          type: string
      title: Merchant Profile (single scheme)
      type: object
    MerchantProfile:
      description: Merchant profile for the different card schemes.
      properties:
        amex:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Amex.
          nullable: true
          type: object
        discover:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Discover.
          nullable: true
          type: object
        mastercard:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Mastercard.
          nullable: true
          type: object
        visa:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Visa.
          nullable: true
          type: object
      title: Merchant Profile
      type: object
    NetworkToken:
      description: A network token generated by an open-loop PSP.
      example:
        payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
        updated_at: 2021-01-01T12:34:00Z
        created_at: 2021-01-01T12:34:00Z
        id: d6ad71d5-6908-45d6-ab65-39c55475dd08
        type: network-token
        expiration_date: 01/30
        status: active
        token: token
      properties:
        type:
          description: The type of this resource.
          enum:
          - network-token
          example: network-token
          type: string
        id:
          description: The unique ID of the token.
          example: d6ad71d5-6908-45d6-ab65-39c55475dd08
          format: uuid
          type: string
        payment_method_id:
          description: The unique ID of the payment method.
          example: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          format: uuid
          type: string
        status:
          description: |-
            The state of the network token.

            - `active` - The network token is active and ready to be used.
            - `inactive` - The network token is being deactivated.
            - `suspended` - The network token is suspended.
            - `deleted` - The network token is deleted.
          enum:
          - active
          - inactive
          - suspended
          - deleted
          example: active
          type: string
        token:
          description: The value of the network token.
          type: string
        expiration_date:
          description: The expiration date for the network token.
          example: 01/30
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        created_at:
          description: |-
            The date and time when this network token was first created in our
            system.
          example: 2021-01-01T12:34:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this network token was last updated
            in our system.
          example: 2021-01-01T12:34:00Z
          format: date-time
          type: string
      title: Network Token
      type: object
      x-tags:
      - Tokens
    NetworkTokenRequest:
      description: Request body for provision a network token.
      example:
        security_code: "123"
        is_subsequent_payment: true
        merchant_initiated: false
      properties:
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            The security code can only be set if the stored payment method
            represents a card.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        merchant_initiated:
          description: Defines if the request is merchant initiated or not.
          example: false
          type: boolean
        is_subsequent_payment:
          description: Defines if the request is a subsequent of another request or
            not.
          example: true
          type: boolean
      required:
      - is_subsequent_payment
      - merchant_initiated
      title: Network Token (Provision)
      type: object
      x-tags:
      - Request Bodies
    NetworkTokens:
      description: A list of network tokens.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          updated_at: 2021-01-01T12:34:00Z
          created_at: 2021-01-01T12:34:00Z
          id: d6ad71d5-6908-45d6-ab65-39c55475dd08
          type: network-token
          expiration_date: 01/30
          status: active
          token: token
        - payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          updated_at: 2021-01-01T12:34:00Z
          created_at: 2021-01-01T12:34:00Z
          id: d6ad71d5-6908-45d6-ab65-39c55475dd08
          type: network-token
          expiration_date: 01/30
          status: active
          token: token
      properties:
        items:
          description: A list of network tokens.
          items:
            $ref: '#/components/schemas/NetworkToken'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Network Tokens
      type: object
      x-tags:
      - Tokens
    NetworkTokenCryptogramProvisionFailed:
      description: This event logs the request and response details of HTTP calls
        made to provision a cryptogram for a network token, in case the call failed.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `network-token-cryptogram-provision-failed`.
          enum:
          - network-token-cryptogram-provision-failed
          example: network-token-cryptogram-provision-failed
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/NetworkTokenCryptogramProvisionFailed_context'
      title: Network Token Cryptogram Provision - Failure
      type: object
      x-tags:
      - Transactions
    NetworkTokenCryptogramProvisionSucceeded:
      description: This event logs the request and response details of HTTP calls
        made to provision a cryptogram for a network token, in case the call succeeded.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `network-token-cryptogram-provision-succeeded`.
          enum:
          - network-token-cryptogram-provision-succeeded
          example: network-token-cryptogram-provision-succeeded
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/NetworkTokenCryptogramProvisionSucceeded_context'
      title: Network Token Cryptogram Provision - Succeeded
      type: object
      x-tags:
      - Transactions
    NetworkTokenProvisionFailed:
      description: This event logs the request and response details of HTTP calls
        made to provision a network token, in case the call failed.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `network-token-provision-failed`.
          enum:
          - network-token-provision-failed
          example: network-token-provision-failed
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/NetworkTokenProvisionFailed_context'
      title: Network Token Provision - Failure
      type: object
      x-tags:
      - Transactions
    NetworkTokenProvisionSucceeded:
      description: This event logs the request and response details of HTTP calls
        made to provision a network token, in case the call succeeded.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `network-token-provision-succeeded`.
          enum:
          - network-token-provision-succeeded
          example: network-token-provision-succeeded
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/NetworkTokenCryptogramProvisionSucceeded_context'
      title: Network Token Provision - Succeeded
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionAuthorizationSucceededEvent:
      description: |-
        This event logs the exact details parsed details for a succeeded authorization
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-authorization-succeeded`.
          enum:
          - payment-connector-response-transaction-authorization-succeeded
          example: payment-connector-response-transaction-authorization-succeeded
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionAuthorizationSucceededEvent_context'
      title: Authorization
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionAuthorizationFailedEvent:
      description: |-
        This event logs the exact details parsed details for a failed authorization
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-authorization-failed`.
          enum:
          - payment-connector-response-transaction-authorization-failed
          example: payment-connector-response-transaction-authorization-failed
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionAuthorizationFailedEvent_context'
      title: Authorization - Failed
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionDeclinedEvent:
      description: |-
        This event logs the exact details parsed details for a declined transaction
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-declined`.
          enum:
          - payment-connector-response-transaction-declined
          example: payment-connector-response-transaction-declined
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionDeclinedEvent_context'
      title: Authorization - Declined
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionCaptureSucceededEvent:
      description: |-
        This event logs the exact details parsed details for a succeeded capture
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-capture-succeeded`.
          enum:
          - payment-connector-response-transaction-capture-succeeded
          example: payment-connector-response-transaction-capture-succeeded
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureSucceededEvent_context'
      title: Capture - Succeeded
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionCaptureDeclinedEvent:
      description: |-
        This event logs the exact details parsed details for a declined capture
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-capture-declined`.
          enum:
          - payment-connector-response-transaction-capture-declined
          example: payment-connector-response-transaction-capture-declined
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureDeclinedEvent_context'
      title: Capture - Declined
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionCaptureFailedEvent:
      description: |-
        This event logs the exact details parsed details for a failed capture
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-capture-failed`.
          enum:
          - payment-connector-response-transaction-capture-failed
          example: payment-connector-response-transaction-capture-failed
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureDeclinedEvent_context'
      title: Capture - Failed
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionVoidSucceededEvent:
      description: |-
        This event logs the exact details parsed details for a succeeded void
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-void-succeeded`.
          enum:
          - payment-connector-response-transaction-void-succeeded
          example: payment-connector-response-transaction-void-succeeded
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidSucceededEvent_context'
      title: Void - Succeeded
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionVoidDeclinedEvent:
      description: |-
        This event logs the exact details parsed details for a declined void
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-void-declined`.
          enum:
          - payment-connector-response-transaction-void-declined
          example: payment-connector-response-transaction-void-declined
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidDeclinedEvent_context'
      title: Void - Declined
      type: object
      x-tags:
      - Transactions
    PaymentConnectorResponseTransactionVoidFailedEvent:
      description: |-
        This event logs the exact details parsed details for a failed void
        as reported by our connector.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-response-transaction-void-failed`.
          enum:
          - payment-connector-response-transaction-void-failed
          example: payment-connector-response-transaction-void-failed
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidFailedEvent_context'
      title: Void - Failed
      type: object
      x-tags:
      - Transactions
    PaymentConnectorExternalTransactionRequest:
      description: |-
        This event logs the exact details parsed details for an external
        transaction request.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `payment-connector-external-transaction-request`.
          enum:
          - payment-connector-external-transaction-request
          example: payment-connector-external-transaction-request
          type: string
        created_at:
          description: The date and time when this event was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/PaymentConnectorExternalTransactionRequest_context'
      title: External Transaction Request
      type: object
      x-tags:
      - Transactions
    PaymentMethod:
      description: A generic payment method.
      example:
        country: US
        external_identifier: user-789123
        method: card
        scheme: visa
        created_at: 2013-07-16T19:23:00Z
        has_replacement: false
        label: john@example.com
        type: payment-method
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        expiration_date: 07/24
        buyer: ""
        mode: card
        approval_target: any
        updated_at: 2013-07-16T19:23:00Z
        merchant_account_id: default
        currency: USD
        details:
          bin: "412345"
          card_type: credit
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        additional_schemes:
        - visa
        - visa
        last_replaced_at: 2023-07-26T19:23:00Z
        status: succeeded
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        additional_schemes:
          description: Additional schemes of the card. Only applies to card payment
            methods.
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer'
          description: The optional buyer for which this payment method has been stored.
          nullable: true
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
        created_at:
          description: |-
            The date and time when this payment method was first created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        details:
          $ref: '#/components/schemas/PaymentMethodDetailsCard'
        expiration_date:
          description: The expiration date for the payment method.
          example: 07/24
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        has_replacement:
          description: |-
            Whether this card has a pending replacement that hasn't been applied yet.

            When the Account Updater determines that new card details are available, existing details are not
            changed immediately, but this field is set to `true`. There are three scenarios in which the actual
            replacement occurs:

            1. When this card has expired.
            2. When only the expiration date changed.
            3. When a transaction using this card is declined with any of the following codes:
                * `canceled_payment_method`
                * `expired_payment_method`
                * `unavailable_payment_method`
                * `unknown_payment_method`

            When the replacement is applied, this field is set to `false`.
            For non-card payment methods, the value of this field is always set to `false`.
          example: false
          nullable: false
          type: boolean
        label:
          description: |-
            A label for the card or the account. For a `paypal` payment method this
            is the user's email address. For a card it is the last 4 digits of the
            card.
          example: john@example.com
          nullable: true
          type: string
        last_replaced_at:
          description: |-
            The date and time when this card was last replaced.

            When the Account Updater determines that new card details are available, existing details are not
            changed immediately. There are three scenarios in which the actual replacement occurs:

            1. When this card has expired.
            2. When only the expiration date changed.
            3. When a transaction using this card is declined with any of the following codes:
                * `canceled_payment_method`
                * `expired_payment_method`
                * `unavailable_payment_method`
                * `unknown_payment_method`

            When the replacement is applied, this field is updated.
            For non-card payment methods, the value of this field is always set to `null`.
          example: 2023-07-26T19:23:00Z
          format: date-time
          nullable: true
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        method:
          description: The type of this payment method.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        mode:
          description: The mode to use with this payment method.
          enum:
          - card
          - redirect
          - applepay
          - googlepay
          example: card
          type: string
        scheme:
          description: The scheme of the card. Only applies to card payments.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        status:
          description: |-
            The state of the payment method.

            - `processing` - The payment method is stored but has not been used yet.
            - `buyer_approval_required` - Storing the payment method requires
              the buyer to provide approval. Follow the `approval_url` for next steps.
            - `succeeded` - The payment method is stored and has been used.
            - `failed` - The payment method could not be stored, or failed first use.
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        updated_at:
          description: The date and time when this payment method was last updated
            in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Payment method
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Tokenized:
      description: A mini format version of a payment method.
      example:
        country: US
        method: card
        scheme: visa
        has_replacement: false
        label: "1111"
        type: payment-method
        expiration_date: 11/25
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        approval_target: any
        merchant_account_id: default
        currency: USD
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        additional_schemes:
        - visa
        - visa
        last_replaced_at: 2023-07-26T19:23:00Z
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        method:
          description: The type of this payment method.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        label:
          description: |-
            A label for the payment method. For a `card` payment method this is the
            last 4 digits on the card. For others it would be the email address.
          example: "1111"
          type: string
        scheme:
          description: The type of the card, if the payment method is a card.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        additional_schemes:
          description: Additional schemes of the card. Only applies to card payment
            methods.
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
        expiration_date:
          description: The expiration date for the payment method.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
        last_replaced_at:
          description: |-
            The date and time when this card was last replaced.

            When the Account Updater determines that new card details are available, existing details are not
            changed immediately. There are three scenarios in which the actual replacement occurs:

            1. When this card has expired.
            2. When only the expiration date changed.
            3. When a transaction using this card is declined with any of the following codes:
                * `canceled_payment_method`
                * `expired_payment_method`
                * `unavailable_payment_method`
                * `unknown_payment_method`

            When the replacement is applied, this field is updated.
            For non-card payment methods, the value of this field is always set to `null`.
          example: 2023-07-26T19:23:00Z
          format: date-time
          nullable: true
          type: string
        has_replacement:
          description: |-
            Whether this card has a pending replacement that hasn't been applied yet.

            When the Account Updater determines that new card details are available, existing details are not
            changed immediately, but this field is set to `true`. There are three scenarios in which the actual
            replacement occurs:

            1. When this card has expired.
            2. When only the expiration date changed.
            3. When a transaction using this card is declined with any of the following codes:
                * `canceled_payment_method`
                * `expired_payment_method`
                * `unavailable_payment_method`
                * `unknown_payment_method`

            When the replacement is applied, this field is set to `false`.
            For non-card payment methods, the value of this field is always set to `false`.
          example: false
          nullable: false
          type: boolean
      title: Payment Method (Summary)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods:
      description: A list of stored payment methods.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - country: US
          external_identifier: user-789123
          method: card
          scheme: visa
          created_at: 2013-07-16T19:23:00Z
          has_replacement: false
          label: john@example.com
          type: payment-method
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          expiration_date: 07/24
          buyer: ""
          mode: card
          approval_target: any
          updated_at: 2013-07-16T19:23:00Z
          merchant_account_id: default
          currency: USD
          details:
            bin: "412345"
            card_type: credit
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          additional_schemes:
          - visa
          - visa
          last_replaced_at: 2023-07-26T19:23:00Z
          status: succeeded
        - country: US
          external_identifier: user-789123
          method: card
          scheme: visa
          created_at: 2013-07-16T19:23:00Z
          has_replacement: false
          label: john@example.com
          type: payment-method
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          expiration_date: 07/24
          buyer: ""
          mode: card
          approval_target: any
          updated_at: 2013-07-16T19:23:00Z
          merchant_account_id: default
          currency: USD
          details:
            bin: "412345"
            card_type: credit
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          additional_schemes:
          - visa
          - visa
          last_replaced_at: 2023-07-26T19:23:00Z
          status: succeeded
      properties:
        items:
          description: A list of stored payment methods.
          items:
            $ref: '#/components/schemas/PaymentMethod'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment Methods
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Snapshot:
      description: |-
        Snapshot of a payment method, as used when embedded inside other
        resources.
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          nullable: true
          type: string
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        details:
          $ref: '#/components/schemas/PaymentMethodDetailsCard'
        expiration_date:
          description: |-
            The expiration date for this payment method. This is mostly used by cards
            where the card might have an expiration date.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        label:
          description: |-
            A label for the payment method. This can be the last 4 digits for a card,
            or the email address for an alternative payment method.
          example: "1111"
          type: string
        last_replaced_at:
          description: |-
            The date and time when this card was last replaced.

            When the Account Updater determines that new card details are available, existing details are not
            changed immediately. There are three scenarios in which the actual replacement occurs:

            1. When this card has expired.
            2. When only the expiration date changed.
            3. When a transaction using this card is declined with any of the following codes:
                * `canceled_payment_method`
                * `expired_payment_method`
                * `unavailable_payment_method`
                * `unknown_payment_method`

            When the replacement is applied, this field is updated.
            For non-card payment methods, the value of this field is always set to `null`.
          example: 2023-07-26T19:23:00Z
          format: date-time
          nullable: true
          type: string
        method:
          description: The type of this payment method.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        payment_account_reference:
          description: |-
            The payment account reference (PAR) returned by the card scheme. This is a unique
            reference to the underlying account that has been used to fund this payment method.
            This value will be unique if the same underlying account was used, regardless of
            the actual payment method used. For example, a network token or an Apple Pay device
            token will return the same PAR when possible.

            The uniqueness of this value will depend on the card scheme, please refer to their documentation
            for further details. The availability of the PAR in our API depends on the availability
            of its value in the API of the payment service used for the transaction.
          example: V0010014629724763377327521982
          nullable: true
          type: string
        scheme:
          description: |-
            An additional label used to differentiate different sub-types of a payment
            method. Most notably this can include the type of card used in a
            transaction. This field is `null` for the non-card payment methods.
            This represents the card scheme sent to the connector and it could be different from the
            actual card scheme that is being used by the PSP to process the transaction
            in the following situations: 1. `use_additional_scheme` transformation is used
            with the `PAN` instrument but we already have a PSP token for the card.
            2. `use_additional_scheme` transformation is used but PSP has fallen back to the
            main card scheme internally.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      title: Payment method (Snapshot)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods--Tokenized:
      description: A list of stored payment methods in summarized format.
      example:
        items:
        - country: US
          method: card
          scheme: visa
          has_replacement: false
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          approval_target: any
          merchant_account_id: default
          currency: USD
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          additional_schemes:
          - visa
          - visa
          last_replaced_at: 2023-07-26T19:23:00Z
        - country: US
          method: card
          scheme: visa
          has_replacement: false
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          approval_target: any
          merchant_account_id: default
          currency: USD
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          additional_schemes:
          - visa
          - visa
          last_replaced_at: 2023-07-26T19:23:00Z
      properties:
        items:
          description: A list of stored payment methods in summarized format.
          items:
            $ref: '#/components/schemas/PaymentMethod--Tokenized'
          type: array
      title: Payment Methods (Summary)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethodDetailsCard:
      description: A credit or debit card payment method.
      example:
        bin: "412345"
        card_type: credit
      properties:
        card_type:
          description: The type of card, one of `credit`, `debit` or `prepaid`.
          enum:
          - credit
          - debit
          - prepaid
          example: credit
          type: string
        bin:
          description: The first 6 digits of the full card number (the BIN).
          example: "412345"
          type: string
      title: Card
      type: object
      x-tags:
      - Payment Methods
    PaymentMethodRequest:
      description: |-
        Payment method details used to register
        a new payment method.
      example:
        number: "4111111111111111"
        country: US
        external_identifier: account-23423423
        buyer_external_identifier: user-789123
        method: card
        currency: USD
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        expiration_date: 11/15
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          description: |-
            The type of the funding source, e.g. `card`, `paypal`,
            or `checkout-session`.
          example: card
          type: string
        id:
          description: The ID of a Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        number:
          description: |-
            The 13-19 digit number for this credit card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.
          example: 11/15
          maxLength: 5
          minLength: 5
          pattern: ^\d\d/\d\d$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to store this payment method for. This is
            used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to store this payment method for.
            This is used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: US
          type: string
      required:
      - method
      title: Payment method request
      type: object
      x-tags:
      - Request Bodies
    PaymentMethodDefinition:
      description: Definitions of a payment method including icon, label, etc.
      example:
        icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
        method: BACS
        id: bank
        long_display_name: Bank (BACS)
        display_name: Bank
      properties:
        id:
          description: The mode of this payment method.
          example: bank
          type: string
        icon_url:
          description: The icon for this payment method.
          example: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          type: string
        display_name:
          description: The display name of this payment method.
          example: Bank
          type: string
        long_display_name:
          description: The long display name of this payment method.
          example: Bank (BACS)
          type: string
        method:
          description: The method, or type, for this payment method.
          example: BACS
          type: string
      title: Payment Method Definition
      type: object
      x-tags:
      - Payment Method Definitions
    PaymentMethodDefinitions:
      description: A list of available payment method definitions.
      example:
        items:
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          method: BACS
          id: bank
          long_display_name: Bank (BACS)
          display_name: Bank
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          method: BACS
          id: bank
          long_display_name: Bank (BACS)
          display_name: Bank
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentMethodDefinition'
          type: array
      title: Payment Method Definitions
      type: object
      x-tags:
      - Payment Method Definitions
    PaymentOptionsRequest:
      description: A request to get list of payment options.
      example:
        country: US
        amount: 1299
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        currency: USD
        locale: en-US
      properties:
        amount:
          description: |-
            The monetary amount to create an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            If the `intent` is set to `capture`, an amount greater than zero must
            be supplied.
          example: 1299
          nullable: true
          type: integer
        locale:
          default: en
          description: |-
            An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
            determines the language for the labels returned for every payment option.
          example: en-US
          nullable: true
          pattern: ^[a-z]{2}(?:-[A-Z]{2})?$
          type: string
        currency:
          description: |
            A supported ISO-4217 currency code.

            For redirect requests, this value must match the one specified for
            `currency` in `payment_method`.
          example: USD
          nullable: true
          type: string
        country:
          description: |
            Filters the results to only the items which support this country code. A
            country is formatted as 2-letter ISO country code.
          example: US
          nullable: true
          type: string
        metadata:
          additionalProperties:
            type: string
          description: |-
            Used by the Flow engine to filter available options based on various
            client-defined parameters. If present, this must be a string representing
            a valid JSON dictionary.
          example:
            key: value
          maxProperties: 20
          nullable: true
          type: object
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxItems: 249
          nullable: true
          type: array
      title: Payment Options (List)
      type: object
      x-tags:
      - Request Bodies
    PaymentService:
      description: An active, configured payment service.
      example:
        method: card
        webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
        active: true
        created_at: 2012-12-12T10:53:43Z
        payment_method_tokenization_enabled: true
        type: payment-service
        display_name: Stripe (Main)
        merchant_profile: '{}'
        payment_service_definition_id: stripe-card
        three_d_secure_enabled: true
        updated_at: 2012-12-12T10:53:43Z
        merchant_account_id: default
        accepted_countries:
        - DE
        network_tokens_enabled: true
        id: faaad066-30b4-4997-a438-242b0752d7e1
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
        accepted_currencies:
        - EUR
        open_loop: true
        status: pending
      properties:
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        id:
          description: The ID of this payment service.
          example: faaad066-30b4-4997-a438-242b0752d7e1
          format: uuid
          maxLength: 200
          minLength: 1
          type: string
        accepted_countries:
          description: |-
            A list of countries for which this service is enabled, in ISO two-letter
            code format.
          example:
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: |-
            A list of currencies for which this service is enabled, in ISO 4217
            three-letter code format.
          example:
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        created_at:
          description: The date and time when this service was created.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        display_name:
          description: The custom name set for this service.
          example: Stripe (Main)
          maxLength: 200
          minLength: 1
          type: string
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field
            configured for this payment service. Fields marked as `secret`
            (see Payment Service Definition) are not returned.
          items:
            $ref: '#/components/schemas/GiftCardService_fields'
          type: array
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: |-
            An object containing a key for each supported card scheme (Amex,
            Discover, Mastercard and Visa), and for each key an object with
            the merchant profile for this service and the corresponding scheme.
          nullable: true
          type: object
        method:
          description: The payment method that this service handles.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.
          example: true
          type: boolean
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.
          example: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        status:
          description: |
            The current status of this service. This will start off as pending, move
            to created, and might eventually move to an error status if and when the
            credentials are no longer valid.
          enum:
          - pending
          - created
          - failed
          type: string
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        updated_at:
          description: The date and time when this service was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        webhook_url:
          description: |-
            The URL that needs to be configured with this payment service as the
            receiving endpoint for webhooks from the service to Gr4vy. Currently,
            Gr4vy does not yet automatically register webhooks on setup, and
            therefore webhooks need to be registered manually by the merchant.
          example: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          format: url
          nullable: true
          type: string
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentService--Snapshot:
      description: An active, configured payment service.
      properties:
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        id:
          description: The ID of this payment service.
          example: stripe-card-faaad066-30b4-4997-a438-242b0752d7e1
          maxLength: 200
          minLength: 1
          type: string
        display_name:
          description: The custom name set for this service.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        method:
          description: The payment method that this services handles.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentServices:
      description: A list of active, configured payment services.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - method: card
          webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          active: true
          created_at: 2012-12-12T10:53:43Z
          payment_method_tokenization_enabled: true
          type: payment-service
          display_name: Stripe (Main)
          merchant_profile: '{}'
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          updated_at: 2012-12-12T10:53:43Z
          merchant_account_id: default
          accepted_countries:
          - DE
          network_tokens_enabled: true
          id: faaad066-30b4-4997-a438-242b0752d7e1
          fields:
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          accepted_currencies:
          - EUR
          open_loop: true
          status: pending
        - method: card
          webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          active: true
          created_at: 2012-12-12T10:53:43Z
          payment_method_tokenization_enabled: true
          type: payment-service
          display_name: Stripe (Main)
          merchant_profile: '{}'
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          updated_at: 2012-12-12T10:53:43Z
          merchant_account_id: default
          accepted_countries:
          - DE
          network_tokens_enabled: true
          id: faaad066-30b4-4997-a438-242b0752d7e1
          fields:
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          accepted_currencies:
          - EUR
          open_loop: true
          status: pending
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentService'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: A list of active payment services
      type: object
      x-tags:
      - Payment Services
    PaymentServiceRequest:
      description: Request body for activating a payment service.
      example:
        three_d_secure_enabled: true
        accepted_countries:
        - US
        - GB
        - DE
        active: true
        payment_method_tokenization_enabled: true
        network_tokens_enabled: true
        display_name: Stripe (Main)
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        accepted_currencies:
        - EUR
        - USD
        - GBP
        open_loop: true
        payment_service_definition_id: stripe-card
        merchant_profile: '{}'
      properties:
        payment_service_definition_id:
          description: The ID of the payment service to use.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        display_name:
          description: A custom name for the payment service. This will be shown in
            the Admin UI.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: A list of fields, each containing a key-value pair for each
            field defined by the definition for this payment service e.g. for stripe-card
            `secret_key` is required and so must be sent within this field.
          items:
            $ref: '#/components/schemas/PaymentServiceRequest_fields'
          type: array
        accepted_countries:
          description: A list of countries that this payment service needs to support
            in ISO two-letter code format.
          example:
          - US
          - GB
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: A list of currencies that this payment service needs to support
            in ISO 4217 three-letter code format.
          example:
          - EUR
          - USD
          - GBP
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: Configuration for each supported card scheme.
          nullable: true
          type: object
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.

            If this value is not provided or is set to `null`, it will be set
            to the value of `open_loop` in the payment service definition.

            If `open_loop_toggle` is `false` in the payment service definition,
            `open_loop` should either not be provided or set to `null`, or it
            will fail with a validation error.
          example: true
          nullable: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.

            If this value is not provided or is set to `null`, it will be set
            to the value of `network_tokens_default` in the payment service
            definition.

            If `network_tokens_toggle` is `false` in the payment service definition,
            `network_tokens_enabled` should either not be provided or set to `null`,
            or it will fail with a validation error.
          example: true
          nullable: true
          type: boolean
      required:
      - accepted_countries
      - accepted_currencies
      - display_name
      - fields
      - payment_service_definition_id
      title: Payment Service (Create)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceToken:
      description: A payment service token.
      example:
        payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
        payment_service_id: 50f2e61f-caac-4e12-8d79-30eaf8250423
        updated_at: 2021-01-01T12:34:00Z
        created_at: 2021-01-01T12:34:00Z
        id: d6ad71d5-6908-45d6-ab65-39c55475dd08
        type: payment-service-token
        approval_url: https://api.example.app.gr4vy.com/payment-methods/f4fb0dd1-4ff9-46fb-965e-11de34aa6806/approve
        status: succeeded
        token: token
      properties:
        type:
          description: The type of this resource.
          enum:
          - payment-service-token
          example: payment-service-token
          type: string
        id:
          description: The unique ID of the token.
          example: d6ad71d5-6908-45d6-ab65-39c55475dd08
          format: uuid
          type: string
        payment_method_id:
          description: The unique ID of the payment method.
          example: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          format: uuid
          type: string
        payment_service_id:
          description: The unique ID of the payment service.
          example: 50f2e61f-caac-4e12-8d79-30eaf8250423
          format: uuid
          type: string
        status:
          description: |-
            The state of the token.

            - `processing` - The payment method is still being stored.
            - `buyer_approval_required` - Storing the payment method requires
              the buyer to provide approval. Follow the `approval_url` for next steps.
            - `succeeded` - The payment method is approved and stored with all
              relevant payment services.
            - `failed` - Storing the payment method did not succeed.
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/f4fb0dd1-4ff9-46fb-965e-11de34aa6806/approve
          nullable: true
          type: string
        token:
          description: The token value.
          type: string
        created_at:
          description: |-
            The date and time when this token was first created in our
            system.
          example: 2021-01-01T12:34:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this token was last updated in our system.
          example: 2021-01-01T12:34:00Z
          format: date-time
          type: string
      title: Payment Service Token
      type: object
      x-tags:
      - Tokens
    PaymentServiceTokenRequest:
      description: Request body for provision a payment service token.
      example:
        security_code: "123"
        payment_service_id: a7d6b829-aea5-407d-ab7f-138784b5ad2c
        redirect_url: https://example.com/callback
      properties:
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            The security code can only be set if the stored payment method
            represents a card.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        payment_service_id:
          description: The ID of the payment service.
          example: a7d6b829-aea5-407d-ab7f-138784b5ad2c
          format: uuid
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            payment method. This only applies to payment methods that require buyer approval.
          example: https://example.com/callback
          type: string
      required:
      - payment_service_id
      - redirect_url
      - security_code
      title: Payment Service Token (Provision)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceTokens:
      description: A list of payment service tokens.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          payment_service_id: 50f2e61f-caac-4e12-8d79-30eaf8250423
          updated_at: 2021-01-01T12:34:00Z
          created_at: 2021-01-01T12:34:00Z
          id: d6ad71d5-6908-45d6-ab65-39c55475dd08
          type: payment-service-token
          approval_url: https://api.example.app.gr4vy.com/payment-methods/f4fb0dd1-4ff9-46fb-965e-11de34aa6806/approve
          status: succeeded
          token: token
        - payment_method_id: 9bdc4bc4-005e-4658-8eee-a309fc43cd4d
          payment_service_id: 50f2e61f-caac-4e12-8d79-30eaf8250423
          updated_at: 2021-01-01T12:34:00Z
          created_at: 2021-01-01T12:34:00Z
          id: d6ad71d5-6908-45d6-ab65-39c55475dd08
          type: payment-service-token
          approval_url: https://api.example.app.gr4vy.com/payment-methods/f4fb0dd1-4ff9-46fb-965e-11de34aa6806/approve
          status: succeeded
          token: token
      properties:
        items:
          description: A list of payment service tokens.
          items:
            $ref: '#/components/schemas/PaymentServiceToken'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment Service Tokens
      type: object
      x-tags:
      - Tokens
    PaymentServiceUpdate:
      description: Request body for updating an active payment service.
      example:
        three_d_secure_enabled: true
        accepted_countries:
        - US
        - GB
        - DE
        active: true
        payment_method_tokenization_enabled: true
        network_tokens_enabled: true
        display_name: Stripe (Main)
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        accepted_currencies:
        - EUR
        - USD
        - GBP
        open_loop: true
        merchant_profile: '{}'
      properties:
        display_name:
          description: A custom name for the payment service. This will be shown in
            the Admin UI.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: A list of fields, each containing a key-value pair for each
            field defined by the definition for this payment service e.g. for stripe-card
            `secret_key` is required and so must be sent within this field.
          items:
            $ref: '#/components/schemas/PaymentServiceRequest_fields'
          type: array
        accepted_countries:
          description: A list of countries that this payment service needs to support
            in ISO two-letter code format.
          example:
          - US
          - GB
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: A list of currencies that this payment service needs to support
            in ISO 4217 three-letter code format.
          example:
          - EUR
          - USD
          - GBP
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: |-
            Configuration for each supported card scheme.
            When updating a Payment Service, a key not being present will
            indicate no updates to be done on that scheme, whereas an object being
            sent as Null for a key will empty the configuration for that scheme.
          nullable: true
          type: object
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.

            If this value is set to `null`, it will be set to the value of
            `open_loop` in the payment service definition.

            If `open_loop_toggle` is `false` in the payment service definition,
            `open_loop` should either not be provided or set to `null`, or it
            will fail with a validation error.
          example: true
          nullable: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.

            If this value is set to `null`, it will be set to the value of
            `network_tokens_default` in the payment service definition.

            If `network_tokens_toggle` is `false` in the payment service definition,
            `network_tokens_enabled` should either not be provided or set to `null`,
            or it will fail with a validation error.
          example: true
          nullable: true
          type: boolean
      title: Payment Service (Update)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceDefinitionConfiguration:
      description: Configuration items for the payment service.
      example:
        approval_ui_height: 300px
        approval_ui_width: 300px
        approval_ui_target: any
      properties:
        approval_ui_height:
          description: Height of the approval interface in either pixels or view height
            (vh).
          example: 300px
          type: string
        approval_ui_width:
          description: Width of the approval interface in either pixels or view width
            (vw).
          example: 300px
          type: string
        approval_ui_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
      title: Payment Service Definition Context
      type: object
    PaymentServiceDefinition:
      description: An available payment service that can be configured.
      example:
        mode: card
        icon_url: https://cdn.gr4vy.app/stripe.svg
        method: card
        configuration:
          approval_ui_height: 300px
          approval_ui_width: 300px
          approval_ui_target: any
        supported_features:
          requires_webhook_setup: true
          network_tokens_toggle: false
          payment_method_tokenization: true
          void: true
          digital_wallets: false
          payment_method_tokenization_toggle: false
          refunds: true
          delayed_capture: false
          three_d_secure_hosted: true
          open_loop_toggle: false
          network_tokens_default: true
          three_d_secure_pass_through: false
          open_loop: true
          partial_refunds: false
          verify_credentials: false
        supported_countries:
        - US
        - GB
        - DE
        id: stripe-card
        type: payment-service-definition
        display_name: Stripe
        fields:
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
        supported_currencies:
        - USD
        - GBP
        - EUR
      properties:
        id:
          description: The ID of the payment service. This is the underlying provider
            followed by a dash followed by the payment method ID.
          example: stripe-card
          type: string
        type:
          default: payment-service-definition
          description: '`payment-service-definition`.'
          enum:
          - payment-service-definition
          example: payment-service-definition
          type: string
        display_name:
          description: The display name of this service.
          example: Stripe
          type: string
        method:
          description: The ID of the payment method that this services handles.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        fields:
          description: A list of fields that need to be submitted when activating
            the payment. service.
          items:
            $ref: '#/components/schemas/GiftCardServiceDefinition_fields'
          minItems: 1
          type: array
        supported_currencies:
          description: A list of three-letter ISO currency codes that this service
            supports.
          example:
          - USD
          - GBP
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        supported_countries:
          description: A list of two-letter ISO country codes that this service supports.
          example:
          - US
          - GB
          - DE
          items:
            type: string
          minItems: 1
          type: array
        mode:
          description: The mode of this payment service.
          enum:
          - card
          - redirect
          - applepay
          - googlepay
          example: card
          type: string
        supported_features:
          $ref: '#/components/schemas/PaymentServiceDefinition_supported_features'
        icon_url:
          description: An icon to display for the payment service.
          example: https://cdn.gr4vy.app/stripe.svg
          nullable: true
          type: string
        configuration:
          $ref: '#/components/schemas/PaymentServiceDefinitionConfiguration'
      title: Payment Service Definition
      type: object
      x-tags:
      - Discovery
    PaymentServiceDefinitions:
      description: A list of available payment services definitions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - mode: card
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: card
          configuration:
            approval_ui_height: 300px
            approval_ui_width: 300px
            approval_ui_target: any
          supported_features:
            requires_webhook_setup: true
            network_tokens_toggle: false
            payment_method_tokenization: true
            void: true
            digital_wallets: false
            payment_method_tokenization_toggle: false
            refunds: true
            delayed_capture: false
            three_d_secure_hosted: true
            open_loop_toggle: false
            network_tokens_default: true
            three_d_secure_pass_through: false
            open_loop: true
            partial_refunds: false
            verify_credentials: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
        - mode: card
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: card
          configuration:
            approval_ui_height: 300px
            approval_ui_width: 300px
            approval_ui_target: any
          supported_features:
            requires_webhook_setup: true
            network_tokens_toggle: false
            payment_method_tokenization: true
            void: true
            digital_wallets: false
            payment_method_tokenization_toggle: false
            refunds: true
            delayed_capture: false
            three_d_secure_hosted: true
            open_loop_toggle: false
            network_tokens_default: true
            three_d_secure_pass_through: false
            open_loop: true
            partial_refunds: false
            verify_credentials: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentServiceDefinition'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment service definitions
      type: object
      x-tags:
      - Discovery
    PaymentOptionApprovalUI:
      description: Configuration for the approval interface that should be shown to
        the buyer.
      example:
        width: 300px
        height: 300px
      properties:
        height:
          description: Height of the approval interface in either pixels or view height
            (vh).
          example: 300px
          type: string
        width:
          description: Width of the approval interface in either pixels or view width
            (vw).
          example: 300px
          type: string
      title: Payment Option Approval UI
      type: object
    PaymentOption:
      description: An available payment option for a locale.
      example:
        icon_url: https://cdn.gr4vy.app/card.svg
        mode: card
        method: card
        context:
          required_fields:
            email_address: true
            address:
              country: true
              city: true
              state: true
              postal_code: true
              line1: true
              house_number_or_name: true
            last_name: true
            phone_number: true
            first_name: true
            tax_id: true
          gateway_merchant_id: gateway_merchant_id
          approval_ui:
            width: 300px
            height: 300px
          merchant_name: merchant_name
          supported_schemes:
          - null
          - null
          gateway: gateway
        label: Pay by Card
        type: payment-option
        can_delay_capture: true
        can_store_payment_method: true
      properties:
        type:
          description: '`payment-option`.'
          enum:
          - payment-option
          example: payment-option
          type: string
        method:
          description: The type of payment method that is available.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        icon_url:
          description: An icon to display for the payment option.
          example: https://cdn.gr4vy.app/card.svg
          nullable: true
          type: string
        mode:
          description: The mode to use with this payment option.
          enum:
          - card
          - redirect
          - applepay
          - googlepay
          example: card
          type: string
        label:
          description: |-
            A label that describes this payment option. This label is returned in the
            language defined by the `locale` query parameter. The label can be used
            to display a list of payment options to the buyer in their language.
          example: Pay by Card
          type: string
        can_store_payment_method:
          description: A flag to indicate if storing the payment method is supported.
          type: boolean
        can_delay_capture:
          description: A flag to indicate if delayed capture is supported.
          type: boolean
        context:
          $ref: '#/components/schemas/PaymentOption_context'
      title: Payment option
      type: object
      x-tags:
      - Payment Option
    PaymentOptions:
      description: A list of payment options.
      example:
        items:
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: card
          method: card
          context:
            required_fields:
              email_address: true
              address:
                country: true
                city: true
                state: true
                postal_code: true
                line1: true
                house_number_or_name: true
              last_name: true
              phone_number: true
              first_name: true
              tax_id: true
            gateway_merchant_id: gateway_merchant_id
            approval_ui:
              width: 300px
              height: 300px
            merchant_name: merchant_name
            supported_schemes:
            - null
            - null
            gateway: gateway
          label: Pay by Card
          type: payment-option
          can_delay_capture: true
          can_store_payment_method: true
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: card
          method: card
          context:
            required_fields:
              email_address: true
              address:
                country: true
                city: true
                state: true
                postal_code: true
                line1: true
                house_number_or_name: true
              last_name: true
              phone_number: true
              first_name: true
              tax_id: true
            gateway_merchant_id: gateway_merchant_id
            approval_ui:
              width: 300px
              height: 300px
            merchant_name: merchant_name
            supported_schemes:
            - null
            - null
            gateway: gateway
          label: Pay by Card
          type: payment-option
          can_delay_capture: true
          can_store_payment_method: true
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentOption'
          type: array
      title: A list of payment options
      type: object
      x-tags:
      - Payment Options
    RedirectRequest:
      description: Details to register a new redirect payment method.
      properties:
        method:
          description: |-
            The method to use, this can be any of the methods that
            support redirect requests.

            When storing a new payment method, only `gocardless` and `stripedd`
            are currently supported.
          enum:
          - paypal
          - banked
          - bitpay
          - gocardless
          - stripedd
          example: paypal
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: US
          type: string
        external_identifier:
          description: An external identifier that can be used to match the account
            against your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - country
      - currency
      - method
      - redirect_url
      title: Redirect
      type: object
      x-tags:
      - Request Bodies
    Refund:
      description: |-
        A refund record.

        A refund is always associated with a single transaction, while a transaction
        can potentially have several refunds.
      example:
        transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        amount: 1299
        payment_service_refund_id: refund_xYqd43gySMtori
        updated_at: 2013-07-16T19:23:00Z
        target_type: payment-method
        created_at: 2013-07-16T19:23:00Z
        currency: USD
        target_id: c23ea83f-1b1c-4584-a0e8-78ef8c041949
        id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        type: refund
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `refund`.
          enum:
          - refund
          example: refund
          type: string
        id:
          description: The unique ID of the refund.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        transaction_id:
          description: The ID of the transaction associated with this refund.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        payment_service_refund_id:
          description: The payment service's unique ID for the refund.
          example: refund_xYqd43gySMtori
          type: string
        status:
          description: |-
            The status of the refund.
            It may change over time as asynchronous processing events occur.

            - `processing` - The refund is being processed.
            - `succeeded` - The refund was successful.
            - `declined` - The refund was declined by the underlying PSP.
            - `failed` - The refund could not proceed due to a technical issue.
            - `voided` - The refund was voided and will not proceed.
          enum:
          - processing
          - succeeded
          - declined
          - failed
          - voided
          example: processing
          type: string
        currency:
          description: |-
            The currency code for this refund.
            Will always match that of the associated transaction.
          example: USD
          type: string
        amount:
          description: The amount requested for this refund.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        created_at:
          description: The date and time when this refund was created.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this refund was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        target_type:
          description: The type of the instrument that was refunded.
          enum:
          - payment-method
          - gift-card-redemption
          example: payment-method
          type: string
        target_id:
          description: |-
            The optional ID of the instrument that was refunded. This may be `null` if
            the instrument was not stored.
          example: c23ea83f-1b1c-4584-a0e8-78ef8c041949
          nullable: true
          type: string
      title: Refund
      type: object
      x-tags:
      - Transactions
    Refunds:
      description: A list of refunds.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          amount: 1299
          payment_service_refund_id: refund_xYqd43gySMtori
          updated_at: 2013-07-16T19:23:00Z
          target_type: payment-method
          created_at: 2013-07-16T19:23:00Z
          currency: USD
          target_id: c23ea83f-1b1c-4584-a0e8-78ef8c041949
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: refund
          status: processing
        - transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          amount: 1299
          payment_service_refund_id: refund_xYqd43gySMtori
          updated_at: 2013-07-16T19:23:00Z
          target_type: payment-method
          created_at: 2013-07-16T19:23:00Z
          currency: USD
          target_id: c23ea83f-1b1c-4584-a0e8-78ef8c041949
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: refund
          status: processing
      properties:
        items:
          description: A list of refunds.
          items:
            $ref: '#/components/schemas/Refund'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Refunds
      type: object
      x-tags:
      - Transactions
    Report:
      allOf:
      - $ref: '#/components/schemas/ReportSummary'
      description: A report record.
      example:
        schedule: monthly
        schedule_timezone: schedule_timezone
        next_execution_at: 2023-01-01T00:00:00Z
        updated_at: 2013-07-16T19:23:00Z
        latest_execution: ""
        schedule_enabled: true
        created_at: 2013-07-16T19:23:00Z
        description: Transactions that failed to authorize in April 2022
        spec: ""
      properties:
        created_at:
          description: The date and time this report was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time this report was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        next_execution_at:
          description: |-
            The date and time this report will next be executed, provided
            that `schedule_enabled` is `true`. This value is null if this
            is a one-off report.
          example: 2023-01-01T00:00:00Z
          format: date-time
          nullable: true
          type: string
        description:
          description: The description of this report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule:
          description: |-
            Specifies the schedule of this report.

            If this is a one-off report, this value is `once`.

            If this is a recurring report, this value is set to the
            frequency by which the report will be executed. For example, a
            `monthly` schedule means that this report will be periodically
            executed at the start of each month.

            Note that a `weekly` schedule means that the report is executed
            at the start of every Monday.
          enum:
          - daily
          - monthly
          - once
          - weekly
          example: monthly
          type: string
        schedule_enabled:
          description: |-
            Indicates whether this report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            When this value is set to `true`, this report will be executed at
            the `next_execution_at` date and time.

            When this value is set to `false`, future executions of this
            report are paused until this value is set to `true` again.
          example: true
          type: boolean
        schedule_timezone:
          description: |-
            The time zone in which the next execution will be scheduled. This
            value is used to calculate this report's `next_execution_at` value
            and is only relevant if this is a recurring report. This time zone
            is also used to calculate the timestamp range for reports that use
            date-time placeholders. Date-time placeholders are dynamic
            timestamps that change with every report execution.
          type: string
        spec:
          allOf:
          - $ref: '#/components/schemas/ReportSpec'
          description: The specifications of this report.
        latest_execution:
          allOf:
          - $ref: '#/components/schemas/ReportExecutionSummary'
          description: Details of the latest execution of this report.
          nullable: true
      title: Report
      type: object
      x-tags:
      - Reports
    ReportCreate:
      description: A request to create a report.
      example:
        schedule: monthly
        schedule_timezone: Europe/London
        name: Failed Authorizations 042022
        schedule_enabled: true
        description: Transactions that failed to authorize in April 2022
        spec: ""
      properties:
        name:
          description: The name of the report.
          example: Failed Authorizations 042022
          maxLength: 100
          nullable: false
          type: string
        description:
          description: The description of the report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule:
          default: once
          description: |-
            Specifies the schedule of the report.

            If this is a one-off report, set this value to `once`.

            If this is a recurring report, this value should be set to the
            frequency by which the report will be executed. For example, a
            `monthly` schedule means that the report will be periodically
            executed at the start of each month.

            Note that a `weekly` schedule means that the report will be
            executed at the start of every Monday.
          enum:
          - daily
          - monthly
          - once
          - weekly
          example: monthly
          nullable: false
          type: string
        schedule_enabled:
          description: |-
            Indicates whether the report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            If this value is set to `true`, the report will be executed at
            the `next_execution_at` date and time.

            If this is a recurring report and this value is set to `false`,
            executions of the report will not occur until this value is set
            to `true`.

            If this value is not provided, `schedule_enabled` will
            automatically be set to `false` if `schedule` is `once` and set to
            `true` otherwise.
          example: true
          nullable: true
          type: boolean
        schedule_timezone:
          default: Etc/UTC
          description: |-
            The time zone in which the report's executions will be scheduled.
            This value is used to compute the report's `next_execution_at`
            value and is only relevant when this is a recurring report. This
            time zone is also used to calculate the timestamp range for reports
            that use date-time placeholders. Date-time placeholders are dynamic
            timestamps that change with every report execution.

            This value must be set to the time zone's name as presented in
            the IANA time zone database. For example, to schedule reports in
            the time zone of New York, set this value to `America/New_York`.
          example: Europe/London
          nullable: false
          type: string
        spec:
          allOf:
          - $ref: '#/components/schemas/ReportSpec'
          description: The specifications of the report.
          nullable: false
      required:
      - name
      - spec
      title: Report (Create)
      type: object
      x-tags:
      - Reports
    ReportExecution:
      allOf:
      - $ref: '#/components/schemas/ReportExecutionSummary'
      description: A report execution.
      example:
        report: '{}'
      properties:
        report:
          allOf:
          - $ref: '#/components/schemas/ReportSummary'
          description: The report associated with this report execution.
          type: object
      title: Report Execution
      type: object
      x-tags:
      - Reports
    ReportExecutionSummary:
      description: A report execution summary.
      properties:
        type:
          description: The type of this resource. Is always `report-execution`.
          enum:
          - report-execution
          example: report-execution
          type: string
        id:
          description: The unique identifier for this report execution.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        created_at:
          description: The date and time this report execution was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time this report execution was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        status:
          description: The status of this report execution.
          enum:
          - dispatched
          - failed
          - pending
          - processing
          - succeeded
          example: succeeded
          type: string
        context:
          $ref: '#/components/schemas/ReportExecutionSummary_context'
      title: Report Execution Summary
      type: object
      x-tags:
      - Reports
    ReportExecutionUrl:
      description: |-
        The temporary signed URL to download the result of a report execution
        and its expiration date and time.
      example:
        expires_at: 2013-07-16T19:23:00Z
        url: https://example.com/download
      properties:
        url:
          description: The URL to download the report execution.
          example: https://example.com/download
          type: string
        expires_at:
          description: The date and time when the download URL expires.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Report Execution URL
      type: object
      x-tags:
      - Reports
    ReportExecutions:
      description: A list of report executions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - report: '{}'
        - report: '{}'
      properties:
        items:
          description: A list of report executions.
          items:
            $ref: '#/components/schemas/ReportExecution'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Report Executions
      type: object
      x-tags:
      - Reports
    ReportSpec:
      description: The specification of a report.
      properties:
        model:
          description: |-
            The model (dataset) that the data used for the report is retrieved
            from.
          enum:
          - transactions
          example: transactions
          type: string
        params:
          additionalProperties: true
          description: |-
            Parameters used to configure the report. Acceptable values for
            this property depend on the value specified for `model`.
          properties:
            fields:
              description: A list of fields for the report.
              example:
              - id
              - external_identifier
              items:
                enum:
                - id
                - external_identifier
                - status
                - created_at
                - updated_at
                - authorized_at
                - captured_at
                - voided_at
                - amount
                - currency
                - captured_amount
                - refunded_amount
                - method
                - scheme
                - payment_service_transaction_id
                - payment_service_id
                - payment_service_definition_id
                - payment_service_display_name
                - auth_response_code
                - raw_response_code
                - raw_response_description
                - metadata
                - three_d_secure_status
                - three_d_secure_eci
                - three_d_secure_auth_resp
                - three_d_secure_method
                - buyer_external_identifier
                - billing_details_first_name
                - billing_details_last_name
                - billing_details_email_address
                - billing_details_phone_number
                - billing_details_address_city
                - billing_details_address_country
                - billing_details_address_postal_code
                - billing_details_address_state
                - billing_details_address_state_code
                - billing_details_address_house_number_or_name
                - billing_details_address_line1
                - billing_details_address_line2
                - billing_details_address_organization
                - billing_details_tax_id
                - billing_details_tax_id_kind
                type: string
              type: array
            filters:
              description: The filters for the report.
              example:
                status:
                - authorization_failed
              properties:
                status:
                  description: A list of status' to filter by.
                  example:
                  - authorization_failed
                  items:
                    type: string
                  type: array
                created_at:
                  description: The created date and time to filter by.
                  type: string
                updated_at:
                  description: The updated date and time to filter by.
                  type: string
                authorized_at:
                  description: The authorized date and time to filter by.
                  type: string
                captured_at:
                  description: The captured date and time to filter by.
                  type: string
                voided_at:
                  description: The voided date and time to filter by.
                  type: string
                currency:
                  description: A list of currencies to filter by.
                  example:
                  - GBP
                  items:
                    type: string
                  type: array
                method:
                  description: A list of methods to filter by.
                  example:
                  - card
                  items:
                    type: string
                  type: array
                scheme:
                  description: A list of schemes to filter by.
                  example:
                  - visa
                  items:
                    type: string
                  type: array
                metadata:
                  description: A list of metadata to filter by.
                  items:
                    type: string
                  type: array
                three_d_secure_status:
                  description: A list of 3DS status to filter by.
                  items:
                    type: string
                  type: array
                three_d_secure_eci:
                  description: A list of electric commerce indicators to filter by.
                  example:
                  - "05"
                  items:
                    type: string
                  type: array
                three_d_secure_auth_resp:
                  description: A list of 3DS responses to filter by.
                  example:
                  - "N"
                  items:
                    type: string
                  type: array
              type: object
            sort:
              description: A list of fields to sort the report.
              example:
              - field: captured_at
                order: desc
              items:
                type: object
              type: array
          type: object
      required:
      - model
      - params
      title: Report Specification
      type: object
      x-tags:
      - Reports
    ReportSummary:
      description: A report record summary.
      properties:
        type:
          description: The type of this resource. Is always `report`.
          enum:
          - report
          example: report
          type: string
        id:
          description: The unique identifier for this report.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        merchant_account_id:
          description: The unique ID for a merchant account.
          example: default
          type: string
        name:
          description: The name of this report.
          example: Failed Authorizations 042022
          maxLength: 100
          type: string
        creator_id:
          description: The unique identifier for the creator of this report.
          example: bd5d40d1-913b-419c-bd62-84efc46e0026
          format: uuid
          nullable: true
          type: string
        creator_display_name:
          description: The name of the creator of this report.
          example: John Doe
          maxLength: 1000
          nullable: true
          type: string
        creator_type:
          description: The type of the creator of this report.
          enum:
          - user
          - private_key
          nullable: true
          type: string
      title: Report Summary
      type: object
      x-tags:
      - Reports
    ReportUpdate:
      description: Request body to update a report.
      example:
        name: Failed Authorizations 042022
        schedule_enabled: true
        description: Transactions that failed to authorize in April 2022
      properties:
        name:
          description: The name of the report.
          example: Failed Authorizations 042022
          maxLength: 100
          nullable: false
          type: string
        description:
          description: The description of the report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule_enabled:
          description: |-
            Indicates whether the report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            When this value is set to `true`, the report will be executed at
            the `next_execution_at` date and time.

            When this value is set to `false`, future executions of the
            report are paused until this value is set to `true` again.

            If scheduling is enabled after being disabled, then the
            `next_execution_at` value is updated if and only if its current
            value is a past date-time. The `next_execution_at` value is then
            set to the next closest date-time in the future depending on the
            values of `schedule` and `schedule_timezone`.
          example: true
          nullable: false
          type: boolean
      title: Report (Update)
      type: object
      x-tags:
      - Request Bodies
    Reports:
      description: A list of reports.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - schedule: monthly
          schedule_timezone: schedule_timezone
          next_execution_at: 2023-01-01T00:00:00Z
          updated_at: 2013-07-16T19:23:00Z
          latest_execution: ""
          schedule_enabled: true
          created_at: 2013-07-16T19:23:00Z
          description: Transactions that failed to authorize in April 2022
          spec: ""
        - schedule: monthly
          schedule_timezone: schedule_timezone
          next_execution_at: 2023-01-01T00:00:00Z
          updated_at: 2013-07-16T19:23:00Z
          latest_execution: ""
          schedule_enabled: true
          created_at: 2013-07-16T19:23:00Z
          description: Transactions that failed to authorize in April 2022
          spec: ""
      properties:
        items:
          description: A list of reports.
          items:
            $ref: '#/components/schemas/Report'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Reports
      type: object
      x-tags:
      - Reports
    Role:
      example:
        permissions:
          allow:
          - buyers.read
          - payment-methods.read
          - transactions.read
        name: Support
        description: Customer support agents
        id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
        type: role
      properties:
        type:
          description: The type of this resource. Always `role`.
          enum:
          - role
          example: role
          type: string
        id:
          description: The unique ID for this role.
          example: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          format: uuid
          type: string
        name:
          description: The unique name for this role.
          example: Support
          type: string
        description:
          description: The description for this role.
          example: Customer support agents
          type: string
        permissions:
          $ref: '#/components/schemas/RolePermissions'
      title: Role
      type: object
      x-tags:
      - Roles
    Roles:
      description: A list of roles.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
        - permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
      properties:
        items:
          description: A list of roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Roles
      type: object
      x-tags:
      - Roles
    RoleAssignment:
      example:
        role:
          permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
        id: 1cdac457-400f-4866-8da6-5c193a8db158
        assignee:
          id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          type: user
        type: role-assignment
      properties:
        type:
          description: The type of this resource. Always `role-assignment`.
          enum:
          - role-assignment
          example: role-assignment
          type: string
        id:
          description: The unique ID for this role assignment.
          example: 1cdac457-400f-4866-8da6-5c193a8db158
          format: uuid
          type: string
        role:
          $ref: '#/components/schemas/Role'
        assignee:
          $ref: '#/components/schemas/RoleAssignment_assignee'
      title: Role Assignment
      type: object
      x-tags:
      - Roles
    RoleAssignments:
      description: A list of role assignments.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - role:
            permissions:
              allow:
              - buyers.read
              - payment-methods.read
              - transactions.read
            name: Support
            description: Customer support agents
            id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
            type: role
          id: 1cdac457-400f-4866-8da6-5c193a8db158
          assignee:
            id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
            type: user
          type: role-assignment
        - role:
            permissions:
              allow:
              - buyers.read
              - payment-methods.read
              - transactions.read
            name: Support
            description: Customer support agents
            id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
            type: role
          id: 1cdac457-400f-4866-8da6-5c193a8db158
          assignee:
            id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
            type: user
          type: role-assignment
      properties:
        items:
          description: A list of role assignments.
          items:
            $ref: '#/components/schemas/RoleAssignment'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Role Assignments
      type: object
      x-tags:
      - Roles
    RoleAssignmentRequest:
      description: A request to create a role assignment.
      example:
        role:
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
        assignee:
          id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          type: user
      properties:
        role:
          $ref: '#/components/schemas/RoleAssignmentRequest_role'
        assignee:
          $ref: '#/components/schemas/RoleAssignmentRequest_assignee'
      required:
      - assignee
      - role
      title: Role Assignment (Create)
      type: object
      x-tags:
      - Roles
    RolePermissions:
      description: The permissions associated with a role.
      example:
        allow:
        - buyers.read
        - payment-methods.read
        - transactions.read
      properties:
        allow:
          description: The list of permissions to allow for a role.
          example:
          - buyers.read
          - payment-methods.read
          - transactions.read
          items:
            type: string
          type: array
      title: Role permissions
      type: object
      x-tags:
      - Roles
    ShippingDetail:
      description: Shipping detail for a buyer.
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        type: shipping-details
        buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        first_name: John
      properties:
        type:
          description: The type of this resource. Is always `shipping-details`.
          enum:
          - shipping-details
          example: shipping-details
          type: string
        id:
          description: The unique ID for a buyer's shipping detail.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        buyer_id:
          description: The unique ID for a buyer.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        first_name:
          description: The first name(s) or given name of the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address of the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number of the buyer. This number is formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail
      type: object
      x-tags:
      - Buyers
    ShippingDetails:
      description: A list of shipping details.
      example:
        items:
        - email_address: john@example.com
          address: ""
          last_name: Lunn
          phone_number: +1234567890
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: shipping-details
          buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          first_name: John
        - email_address: john@example.com
          address: ""
          last_name: Lunn
          phone_number: +1234567890
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: shipping-details
          buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          first_name: John
      properties:
        items:
          description: A list of shipping details.
          items:
            $ref: '#/components/schemas/ShippingDetail'
          type: array
      title: Shipping details
      type: object
      x-tags:
      - Transactions
    ShippingDetailRequest:
      description: Shipping detail associated to a buyer.
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        first_name: John
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail (Create)
      type: object
      x-tags:
      - Buyers
    ShippingDetailUpdateRequest:
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        first_name: John
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail (Update)
      type: object
      x-tags:
      - Buyers
    StatementDescriptor:
      description: |-
        The statement descriptor is the text to be shown on the buyer's statements.

        The specific usage of these fields will depend on the capabilities of
        the underlying PSP and bank. As a typical example, 'name' and
        'description' could be concatenated using '* ' as a separator, and
        then the resulting descriptor would be truncated to 22 characters by
        the issuing bank.
      properties:
        name:
          description: |-
            Reflects your doing business as (DBA) name.

            Other validations:

            1. Contains only Latin characters.
            2. Contain at least one letter
            3. Does not contain any of the special characters `< > \ ' " *`
            4. Supports:
              1. Lower case: `a-z`
              2. Upper case: `A-Z`
              3. Numbers: `0-9`
              4. Spaces: ` `
              5. Special characters: `. , _ - ? + /`.
          example: GR4VY
          maxLength: 22
          minLength: 5
          nullable: true
          type: string
        description:
          description: |-
            A short description about the purchase.

            Other validations:
            1. Contains only Latin characters.
            2. Contain at least one letter
            3. Does not contain any of the special characters `< > \ ' " *`
            4. Supports:
              1. Lower case: `a-z`
              2. Upper case: `A-Z`
              3. Numbers: `0-9`
              4. Spaces: ` `
              5. Special characters: `. , _ - ? + /`.
          example: Card payment
          maxLength: 22
          minLength: 5
          nullable: true
          type: string
        city:
          description: City from which the charge originated.
          example: London
          maxLength: 13
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The value in the phone number field of a customer's statement which
            should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 20
          minLength: 5
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        url:
          description: The value in the URL/web address field of a customer's statement.
          example: www.gr4vy.com
          maxLength: 13
          minLength: 1
          nullable: true
          type: string
      title: Statement descriptor
      type: object
    TaxId:
      description: The tax ID information associated to a buyer.
      properties:
        value:
          description: The tax ID for the buyer.
          example: "12345678931"
          maxLength: 50
          minLength: 1
          type: string
        kind:
          description: The kind of tax ID.
          enum:
          - ae.trn
          - au.abn
          - ar.dni
          - ar.cuil
          - ar.cuit
          - br.cnpj
          - br.cpf
          - ca.bn
          - ca.gst_hst
          - ca.pst_bc
          - ca.pst_mb
          - ca.pst_sk
          - ca.qst
          - ch.vat
          - cl.tin
          - es.cif
          - eu.vat
          - gb.vat
          - hk.br
          - id.nik
          - id.npwp
          - in.gst
          - jp.cn
          - jp.rn
          - kr.brn
          - li.uid
          - mx.curp
          - my.frp
          - my.itn
          - my.nric
          - my.sst
          - no.vat
          - nz.gst
          - ph.tin
          - ru.inn
          - ru.kpp
          - sa.vat
          - sg.gst
          - sg.uen
          - th.id
          - th.vat
          - tw.vat
          - us.ein
          - za.vat
          example: gb.vat
          type: string
      required:
      - kind
      - value
      title: Tax ID
      type: object
      x-tags:
      - Buyers
    ThreeDSecureData:
      properties:
        cavv:
          description: The cardholder authentication value or AAV.
          example: 3q2+78r+ur7erb7vyv66vv8=
          type: string
        eci:
          description: The electronic commerce indicator for the 3DS transaction.
          example: "05"
          maxLength: 2
          minLength: 1
          pattern: ^0?\d$
          type: string
        version:
          description: The version of 3-D Secure that was used.
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        directory_response:
          description: For 3-D Secure version 1, the enrolment response. For 3-D Secure
            version , the transaction status from the `ARes`.
          example: C
          maxLength: 1
          type: string
      required:
      - cavv
      - directory_response
      - eci
      - version
      title: 3-D Secure Data
      type: object
    ThreeDSecureDataV1:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV1_allOf'
      title: 3-D Secure Data Version 1
      type: object
    ThreeDSecureDataV2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV2_allOf'
      title: 3-D Secure Data Version 2
      type: object
    ThreeDSecureDataV1V2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureDataV1'
      - $ref: '#/components/schemas/ThreeDSecureDataV2'
      title: 3-D Secure Data Version 1 & 2
      type: object
    ThreeDSecureV2:
      properties:
        cavv:
          description: The cardholder authentication value or AAV.
          example: 3q2+78r+ur7erb7vyv66vv8=
          nullable: true
          type: string
        eci:
          description: The electronic commerce indicator for the 3DS transaction.
          example: "05"
          maxLength: 2
          minLength: 1
          nullable: true
          pattern: ^0?\d$
          type: string
        version:
          description: The version of 3-D Secure that was used.
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        authentication_response:
          description: |-
            The transaction status after a the 3DS challenge. This will
            be null in case of a frictionless 3DS flow.
          enum:
          - "Y"
          - A
          - "N"
          - R
          - U
          example: "Y"
          maxLength: 1
          nullable: true
          type: string
        directory_response:
          description: The transaction status received as part of the authentication
            request.
          enum:
          - C
          - "Y"
          - A
          - "N"
          - R
          - U
          example: C
          maxLength: 1
          nullable: true
          type: string
        directory_transaction_id:
          description: The transaction identifier.
          example: c4e59ceb-a382-4d6a-bc87-385d591fa09d
          nullable: true
          type: string
        transaction_reason:
          description: The reason identifier for a declined transaction.
          example: "05"
          nullable: true
          type: string
      title: 3-D Secure Data Version 2
      type: object
    ThreeDSecureError:
      description: Details about the error resulting from 3DS processing a Transaction.
      properties:
        description:
          description: The error description.
          example: Invalid ThreeDSCompInd
          maxLength: 2048
          nullable: true
          type: string
        detail:
          description: Detail for the error.
          example: The threeDSCompInd must be 'Y' when successful
          maxLength: 2048
          nullable: true
          type: string
        code:
          description: The error code.
          example: "305"
          maxLength: 3
          minLength: 3
          nullable: true
          type: string
        component:
          description: Code indicating the 3-D Secure component that identified the
            error..
          example: C
          maxLength: 1
          minLength: 1
          nullable: true
          type: string
      required:
      - code
      - component
      - description
      - detail
      title: 3-D Secure Error Data
      type: object
      x-tags:
      - Transactions
    ThreeDSecureAuthenticationRequestEvent:
      description: The result and raw data for a 3DS authorization call.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `three-d-secure-authentication-request`.
          enum:
          - three-d-secure-authentication-request
          example: three-d-secure-authentication-request
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/ThreeDSecureAuthenticationRequestEvent_context'
      title: 3DS - Authentication
      type: object
      x-tags:
      - Transactions
    ThreeDSecurePreparationRequestEvent:
      description: The result and raw data for a 3DS pre-authorization call.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `three-d-secure-preparation-request`.
          enum:
          - three-d-secure-preparation-request
          example: three-d-secure-preparation-request
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/ThreeDSecurePreparationRequestEvent_context'
      title: 3DS - Pre-authentication
      type: object
      x-tags:
      - Transactions
    ThreeDSecureResultRequestEvent:
      description: The result and raw data for a 3DS post-authorization call.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `three-d-secure-result-request`.
          enum:
          - three-d-secure-result-request
          example: three-d-secure-result-request
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/ThreeDSecureResultRequestEvent_context'
      title: 3DS - Post-authentication
      type: object
      x-tags:
      - Transactions
    ThreeDSecureRequestErrorEvent:
      description: Error details for a failed 3DS call.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `three-d-secure-request-error`.
          enum:
          - three-d-secure-request-error
          example: three-d-secure-request-error
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/ThreeDSecureRequestErrorEvent_context'
      title: 3DS - Error
      type: object
      x-tags:
      - Transactions
    ThreeDSecureSuccessEvent:
      description: Details related to 3DS processing.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource. Is always `three-d-secure-success`.
          enum:
          - three-d-secure-success
          example: three-d-secure-success
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          $ref: '#/components/schemas/ThreeDSecureSuccessEvent_context'
      title: 3DS - Authentication (Deprecated)
      type: object
      x-tags:
      - Transactions
    ThreeDSecureSummary:
      description: |-
        The 3-D Secure data that was sent to the payment
        service for the transaction.
      example:
        method: challenge
        version: 2.1.0
        status: setup_error
        error_data: '{}'
      properties:
        version:
          description: The version of 3DS used for this transaction.
          example: 2.1.0
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        status:
          description: The status of the 3DS challenge for this transaction.
          enum:
          - setup_error
          - error
          - declined
          - cancelled
          - complete
          type: string
        method:
          description: The method used for 3DS authentication for this transaction.
          enum:
          - challenge
          - frictionless
          type: string
        error_data:
          allOf:
          - $ref: '#/components/schemas/ThreeDSecureError'
          description: |-
            The error data received from our 3DS server. This will not be
            populated if the customer failed the authentication with a
            status code of `N`, `R`, or `U`.  To see full details about
            the 3DS calls in those situations please use our transaction
            events API.
          nullable: true
          type: object
        response_data:
          $ref: '#/components/schemas/ThreeDSecureDataV1V2'
      title: 3-D Secure data
      type: object
    TokenizedRequest:
      description: Details for a previously stored payment method.
      properties:
        method:
          description: '`id`.'
          enum:
          - id
          example: id
          type: string
        id:
          description: |-
            A ID that represents a previously stored payment method.
            This ID can represent any type of payment method.
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        redirect_url:
          description: |-
            This value is mandatory for stored redirect payment methods.
            For stored cards, we strongly recommend providing a `redirect_url`
            either when 3-D Secure is enabled and `three_d_secure_data`
            is not provided, or when using connections where 3DS is enabled.
            This value will be appended with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure
            has completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            The security code can only be set if the stored payment method
            represents a card.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
      required:
      - id
      - method
      title: Stored payment method request
      type: object
      x-tags:
      - Request Bodies
    Transaction:
      description: A transaction record.
      example:
        country: US
        payment_service_transaction_id: charge_xYqd43gySMtori
        voided_at: 2013-07-16T19:23:00Z
        external_identifier: user-789123
        metadata:
          key: value
        pending_review: true
        payment_service: ""
        intent_outcome: pending
        reconciliation_id: 7jZXl4gBUNl0CnaLEnfXbt
        auth_response_code: "00"
        cvv_response_code: match
        shipping_details: ""
        captured_at: 2013-07-16T19:23:00Z
        created_at: 2013-07-16T19:23:00Z
        is_subsequent_payment: true
        raw_response_code: incorrect-zip
        type: transaction
        authorized_at: 2013-07-16T19:23:00Z
        statement_descriptor: ""
        gift_card_redemptions:
        - raw_error_code: "10001"
          amount: 1299
          gift_card:
            last4: "1234"
            bin: "412345"
            id: e6cdf979-87e2-4796-8ff6-9784d5aed893
            type: gift-card
            sub_bin: "554"
          gift_card_service_redemption_id: xYqd43gySMtori
          error_code: expired_card
          id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
          type: gift-card-redemption
          raw_error_message: Card expired.
          status: succeeded
          refunded_amount: 1299
        - raw_error_code: "10001"
          amount: 1299
          gift_card:
            last4: "1234"
            bin: "412345"
            id: e6cdf979-87e2-4796-8ff6-9784d5aed893
            type: gift-card
            sub_bin: "554"
          gift_card_service_redemption_id: xYqd43gySMtori
          error_code: expired_card
          id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
          type: gift-card-redemption
          raw_error_message: Card expired.
          status: succeeded
          refunded_amount: 1299
        updated_at: 2013-07-16T19:23:00Z
        captured_amount: 999
        merchant_account_id: default
        authorized_amount: 1299
        currency: USD
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        payment_source: recurring
        payment_method: ""
        gift_card_service: ""
        amount: 1299
        method: card
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        avs_response_code: partial_match_address
        scheme_transaction_id: "123456789012345"
        intent: authorize
        buyer: ""
        refunded_amount: 100
        error_code: missing_redirect_url
        merchant_initiated: true
        checkout_session_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        raw_response_description: |-
          The card's postal code is incorrect. Check the card's postal code or use a
          different card.
        three_d_secure:
          method: challenge
          version: 2.1.0
          status: setup_error
          error_data: '{}'
        multi_tender: true
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        amount:
          description: |-
            The total amount for this transaction across all funding sources
            including gift cards.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        auth_response_code:
          description: This is the response description received from the processor.
          example: "00"
          nullable: true
          type: string
        authorized_amount:
          description: |-
            The amount for this transaction that has been authorized for the `payment_method`.
            This can be less than the `amount` if gift cards were used.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        authorized_at:
          description: |-
            The date and time when this transaction was authorized in the payment
            service.

            Don't use this field to determine whether the transaction was authorized.
            A `null` value doesn't necessarily imply that the transaction wasn't
            authorized, it can mean that the payment service doesn't provide this
            value, that it didn't provide it at the time the transaction was
            authorized or that the transaction was authorized before the introduction
            of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer--Snapshot'
          description: The buyer used for this transaction.
          nullable: true
        captured_amount:
          description: |-
            The captured amount for this transaction. This can be the full value
            of the `authorized_amount` or less.
          example: 999
          maximum: 99999999
          minimum: 0
          type: integer
        captured_at:
          description: |-
            The date and time when this transaction was captured in the payment
            service.

            Don't use this field to determine whether the transaction was captured.
            A `null` value doesn't necessarily imply that the transaction wasn't
            captured, it can mean that the payment service doesn't provide this value,
            that it didn't provide it at the time the transaction was captured or that
            the transaction was captured before the introduction of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxLength: 249
          type: array
        checkout_session_id:
          description: The identifier for the checkout session this transaction is
            associated with.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.
          example: US
          nullable: true
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        currency:
          description: The currency code for this transaction.
          example: USD
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          - not_provided
          example: match
          nullable: true
          type: string
        error_code:
          description: This is an error code set by Gr4vy.
          example: missing_redirect_url
          nullable: true
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        gift_card_service:
          allOf:
          - $ref: '#/components/schemas/GiftCardService--Snapshot'
          description: The gift card service used for this transaction.
        gift_card_redemptions:
          description: The gift cards redeemed for this transaction.
          items:
            $ref: '#/components/schemas/GiftCardRedemption'
          type: array
        intent:
          description: |-
            The original `intent` used when the transaction was
            [created](#operation/authorize-new-transaction).
          enum:
          - authorize
          - capture
          example: authorize
          type: string
        intent_outcome:
          description: |-
            The outcome of the original intent of a transaction.

            This allows you to understand if the intent of the transaction
            (e.g. `capture` or `authorize`) has been achieved when dealing with multiple
            payment instruments.

            If all payment instruments (`payment_method` and/or `gift_cards`)
            have succeeded to get an authorization or direct sale **at any point
            in time** then this will return a `succeeded` value.

            If any of the payment instruments fails or declines then this will
            return a `failed` value.

            If any payment instruments is still in a `pending` or `processing` state
            then the result will be `pending`.

            Please note that if any of the payment instruments are voided or refunded
            after the result reaches a `succeeded` state  then the result will remain
            unchanged.
          enum:
          - pending
          - succeeded
          - failed
          example: pending
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note there are some restrictions on how this flag may be
            used.

            The flag can only be `false` (or not set) when the transaction meets
            one of the following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `card_on_file`.

            The flag can only be set to `true` when the transaction meets one of the
            following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `recurring` or `installment` and
            `merchant_initiated` is set to `true`.
            * `payment_source` is set to `card_on_file`.
          example: true
          type: boolean
        merchant_account_id:
          description: The ID of the merchant account to which this transaction belongs
            to.
          example: default
          maximum: 22
          minimum: 1
          type: string
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: Additional information about the transaction stored as key-value
            pairs.
          example:
            key: value
          type: object
        method:
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        multi_tender:
          description: |-
            Defines if this transaction has been split across multiple payment instruments
            such as a `payment_method` and one or more `gift_cards`, or multiple `gift_cards`
            without a `payment_method`.
          example: true
          type: boolean
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethod--Snapshot'
          description: The payment method used for this transaction.
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          description: The payment service used for this transaction.
        payment_service_transaction_id:
          description: The payment service's unique ID for the transaction.
          example: charge_xYqd43gySMtori
          type: string
        payment_source:
          description: The source of the transaction. Defaults to `ecommerce`.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: recurring
          type: string
        pending_review:
          description: Whether a manual review is pending.
          example: true
          nullable: false
          type: boolean
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        reconciliation_id:
          description: |-
            The base62 encoded transaction ID. This represents a shorter version
            of this transaction's `id` which is sent to payment services, anti-fraud services,
            and other connectors. You can use this ID to reconcile a payment service's
            transaction against our system.

            This ID is sent instead of the transaction ID because not all services
            support 36 digit identifiers.
          example: 7jZXl4gBUNl0CnaLEnfXbt
          type: string
        refunded_amount:
          description: |-
            The refunded amount for this transaction. This can be the full value
            of the `captured_amount` or less.
          example: 100
          maximum: 99999999
          minimum: 0
          type: integer
        scheme_transaction_id:
          default: "null"
          description: |-
            An identifier for the transaction used by the scheme itself, when
            available.

            e.g. the Visa Transaction Identifier, or Mastercard Trace ID.
          example: "123456789012345"
          nullable: true
          type: string
        shipping_details:
          allOf:
          - $ref: '#/components/schemas/ShippingDetail'
          description: The shipping details associated with the transaction.
          nullable: true
        statement_descriptor:
          allOf:
          - $ref: '#/components/schemas/StatementDescriptor'
          nullable: true
        status:
          description: |-
            The status of the transaction for the `payment_method`. The status
            may change over time as asynchronous processing events occur.

            Please note that the possible statuses returned will depend on the
            operation performed. For example, a captured transaction will never
            move to a `authorization_voided` status.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
        three_d_secure:
          $ref: '#/components/schemas/ThreeDSecureSummary'
        updated_at:
          description: Defines when the transaction was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        voided_at:
          description: |-
            The date and time when this transaction was voided in the payment service.

            Don't use this field to determine whether the transaction was voided.
            A `null` value doesn't necessarily imply that the transaction wasn't
            voided, it can mean that the payment service doesn't provide this value,
            that it didn't provide it at the time the transaction was voided or that
            the transaction was voided before the introduction of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    TransactionHistoryEvent:
      description: A generic transaction history event.
      properties:
        type:
          description: The type of this resource. Is always `transaction-event`.
          enum:
          - transaction-event
          example: transaction-event
          type: string
        id:
          description: The unique identifier for this event.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this resource.
          enum:
          - anti-fraud-decision-error
          - anti-fraud-decision-skipped
          - anti-fraud-decision
          - anti-fraud-transaction-status-update
          - anti-fraud-transaction-status-update-error
          - anti-fraud-webhook
          - bin-lookup-request
          - digital-wallet-apple-pay-token-decrypted
          - digital-wallet-google-pay-token-decrypted
          - digital-wallet-click-to-pay-token-decrypted
          - gift-card-redemption-failed
          - gift-card-redemption-succeeded
          - gift-card-refund-failed
          - gift-card-refund-succeeded
          - network-token-cryptogram-provision-failed
          - network-token-cryptogram-provision-succeeded
          - network-token-provision-failed
          - network-token-provision-succeeded
          - payment-connector-response-transaction-authorization-failed
          - payment-connector-response-transaction-authorization-succeeded
          - payment-connector-response-transaction-capture-declined
          - payment-connector-response-transaction-capture-failed
          - payment-connector-response-transaction-capture-succeeded
          - payment-connector-response-transaction-declined
          - payment-connector-response-transaction-void-declined
          - payment-connector-response-transaction-void-failed
          - payment-connector-response-transaction-void-succeeded
          - payment-connector-external-transaction-request
          - three-d-secure-authentication-request
          - three-d-secure-preparation-request
          - three-d-secure-request-error
          - three-d-secure-result-request
          - three-d-secure-success
          example: anti-fraud-decision
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        context:
          additionalProperties: true
          description: A list of key/values with additional data.
          type: object
      title: Transaction history event
      type: object
      x-tags:
      - Transactions
    TransactionHistoryEvents:
      description: A list of transaction history events.
      properties:
        items:
          description: A list of events related to processing a transaction.
          items:
            anyOf:
            - $ref: '#/components/schemas/BINLookupRequest'
            - $ref: '#/components/schemas/ThreeDSecureAuthenticationRequestEvent'
            - $ref: '#/components/schemas/ThreeDSecureSuccessEvent'
            - $ref: '#/components/schemas/ThreeDSecureRequestErrorEvent'
            - $ref: '#/components/schemas/ThreeDSecurePreparationRequestEvent'
            - $ref: '#/components/schemas/ThreeDSecureResultRequestEvent'
            - $ref: '#/components/schemas/AntiFraudDecisionEvent'
            - $ref: '#/components/schemas/AntiFraudDecisionErrorEvent'
            - $ref: '#/components/schemas/AntiFraudDecisionSkippedEvent'
            - $ref: '#/components/schemas/AntiFraudTransactionStatusUpdateEvent'
            - $ref: '#/components/schemas/AntiFraudTransactionStatusUpdateErrorEvent'
            - $ref: '#/components/schemas/AntiFraudWebhookEvent'
            - $ref: '#/components/schemas/DigitalWalletApplePayTokenDecrypted'
            - $ref: '#/components/schemas/DigitalWalletClickToPayTokenDecrypted'
            - $ref: '#/components/schemas/DigitalWalletGooglePayTokenDecrypted'
            - $ref: '#/components/schemas/GiftCardRedemptionFailed'
            - $ref: '#/components/schemas/GiftCardRedemptionSucceeded'
            - $ref: '#/components/schemas/GiftCardRefundFailed'
            - $ref: '#/components/schemas/GiftCardRefundSucceeded'
            - $ref: '#/components/schemas/NetworkTokenCryptogramProvisionFailed'
            - $ref: '#/components/schemas/NetworkTokenCryptogramProvisionSucceeded'
            - $ref: '#/components/schemas/NetworkTokenProvisionFailed'
            - $ref: '#/components/schemas/NetworkTokenProvisionSucceeded'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionAuthorizationSucceededEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionDeclinedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionAuthorizationFailedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureDeclinedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureFailedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionCaptureSucceededEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidDeclinedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidFailedEvent'
            - $ref: '#/components/schemas/PaymentConnectorResponseTransactionVoidSucceededEvent'
            - $ref: '#/components/schemas/PaymentConnectorExternalTransactionRequest'
            x-model-name: TransactionHistoryEvent
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Transaction History Events
      type: object
      x-tags:
      - Transactions
    TransactionStatusSummary:
      description: A transaction record.
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous processing events occur.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    TransactionSummary:
      description: A transaction record.
      example:
        country: US
        amount: 1299
        external_identifier: user-789123
        pending_review: true
        method: card
        payment_service: ""
        reconciliation_id: 7jZXl4gBUNl0CnaLEnfXbt
        created_at: 2013-07-16T19:23:00Z
        raw_response_code: incorrect-zip
        type: transaction
        intent: authorize
        buyer: ""
        refunded_amount: 100
        gift_card_redemptions:
        - raw_error_code: "10001"
          amount: 1299
          gift_card:
            last4: "1234"
            bin: "412345"
            id: e6cdf979-87e2-4796-8ff6-9784d5aed893
            type: gift-card
            sub_bin: "554"
          gift_card_service_redemption_id: xYqd43gySMtori
          error_code: expired_card
          id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
          type: gift-card-redemption
          raw_error_message: Card expired.
          status: succeeded
          refunded_amount: 1299
        - raw_error_code: "10001"
          amount: 1299
          gift_card:
            last4: "1234"
            bin: "412345"
            id: e6cdf979-87e2-4796-8ff6-9784d5aed893
            type: gift-card
            sub_bin: "554"
          gift_card_service_redemption_id: xYqd43gySMtori
          error_code: expired_card
          id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
          type: gift-card-redemption
          raw_error_message: Card expired.
          status: succeeded
          refunded_amount: 1299
        updated_at: 2013-07-16T19:23:00Z
        captured_amount: 999
        merchant_account_id: default
        authorized_amount: 1299
        currency: USD
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        checkout_session_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        raw_response_description: |-
          The card's postal code is incorrect. Check the card's postal code or use a
          different card.
        payment_method: ""
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        amount:
          description: |-
            The authorized amount for this transaction. This can be more than the
            actual captured amount and part of this amount may be refunded.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        authorized_amount:
          description: |-
            The amount for this transaction that has been authorized for the `payment_method`.
            This can be less than the `amount` if gift cards were used.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer--Snapshot'
          description: The buyer used for this transaction.
          nullable: true
        captured_amount:
          description: |-
            The captured amount for this transaction. This can be the full value
            of the `authorized_amount` or less.
          example: 999
          maximum: 99999999
          minimum: 0
          type: integer
        checkout_session_id:
          description: The identifier for the checkout session this transaction is
            associated with.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.
          example: US
          nullable: true
          type: string
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        currency:
          description: The currency code for this transaction.
          example: USD
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        gift_card_redemptions:
          description: The gift cards redeemed for this transaction.
          items:
            $ref: '#/components/schemas/GiftCardRedemption'
          type: array
        intent:
          description: |-
            The original `intent` used when the transaction was
            [created](#operation/authorize-new-transaction).
          enum:
          - authorize
          - capture
          example: authorize
          type: string
        merchant_account_id:
          description: The ID of the merchant account to which this transaction belongs
            to.
          example: default
          maximum: 22
          minimum: 1
          type: string
        method:
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethod--Snapshot'
          description: The payment method used for this transaction.
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          description: The payment service used for this transaction.
        pending_review:
          description: Whether a manual review is pending.
          example: true
          nullable: false
          type: boolean
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        reconciliation_id:
          description: |-
            The base62 encoded transaction ID. This represents a shorter version
            of this transaction's `id` which is sent to payment services, anti-fraud services,
            and other connectors. You can use this ID to reconcile a payment service's
            transaction against our system.

            This ID is sent instead of the transaction ID because not all services
            support 36 digit identifiers.
          example: 7jZXl4gBUNl0CnaLEnfXbt
          type: string
        refunded_amount:
          description: |-
            The refunded amount for this transaction. This can be the full value
            of the `captured_amount` or less.
          example: 100
          maximum: 99999999
          minimum: 0
          type: integer
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous processing events occur.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
        updated_at:
          description: Defines when the transaction was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    Transactions:
      description: A list of transactions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - country: US
          amount: 1299
          external_identifier: user-789123
          pending_review: true
          method: card
          payment_service: ""
          reconciliation_id: 7jZXl4gBUNl0CnaLEnfXbt
          created_at: 2013-07-16T19:23:00Z
          raw_response_code: incorrect-zip
          type: transaction
          intent: authorize
          buyer: ""
          refunded_amount: 100
          gift_card_redemptions:
          - raw_error_code: "10001"
            amount: 1299
            gift_card:
              last4: "1234"
              bin: "412345"
              id: e6cdf979-87e2-4796-8ff6-9784d5aed893
              type: gift-card
              sub_bin: "554"
            gift_card_service_redemption_id: xYqd43gySMtori
            error_code: expired_card
            id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
            type: gift-card-redemption
            raw_error_message: Card expired.
            status: succeeded
            refunded_amount: 1299
          - raw_error_code: "10001"
            amount: 1299
            gift_card:
              last4: "1234"
              bin: "412345"
              id: e6cdf979-87e2-4796-8ff6-9784d5aed893
              type: gift-card
              sub_bin: "554"
            gift_card_service_redemption_id: xYqd43gySMtori
            error_code: expired_card
            id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
            type: gift-card-redemption
            raw_error_message: Card expired.
            status: succeeded
            refunded_amount: 1299
          updated_at: 2013-07-16T19:23:00Z
          captured_amount: 999
          merchant_account_id: default
          authorized_amount: 1299
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          checkout_session_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          raw_response_description: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          payment_method: ""
          status: processing
        - country: US
          amount: 1299
          external_identifier: user-789123
          pending_review: true
          method: card
          payment_service: ""
          reconciliation_id: 7jZXl4gBUNl0CnaLEnfXbt
          created_at: 2013-07-16T19:23:00Z
          raw_response_code: incorrect-zip
          type: transaction
          intent: authorize
          buyer: ""
          refunded_amount: 100
          gift_card_redemptions:
          - raw_error_code: "10001"
            amount: 1299
            gift_card:
              last4: "1234"
              bin: "412345"
              id: e6cdf979-87e2-4796-8ff6-9784d5aed893
              type: gift-card
              sub_bin: "554"
            gift_card_service_redemption_id: xYqd43gySMtori
            error_code: expired_card
            id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
            type: gift-card-redemption
            raw_error_message: Card expired.
            status: succeeded
            refunded_amount: 1299
          - raw_error_code: "10001"
            amount: 1299
            gift_card:
              last4: "1234"
              bin: "412345"
              id: e6cdf979-87e2-4796-8ff6-9784d5aed893
              type: gift-card
              sub_bin: "554"
            gift_card_service_redemption_id: xYqd43gySMtori
            error_code: expired_card
            id: bc3f0d5a-3529-4d31-b2b4-848d14926bbc
            type: gift-card-redemption
            raw_error_message: Card expired.
            status: succeeded
            refunded_amount: 1299
          updated_at: 2013-07-16T19:23:00Z
          captured_amount: 999
          merchant_account_id: default
          authorized_amount: 1299
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          checkout_session_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          raw_response_description: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          payment_method: ""
          status: processing
      properties:
        items:
          description: A list of transactions.
          items:
            $ref: '#/components/schemas/TransactionSummary'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Transactions
      type: object
      x-tags:
      - Transactions
    TransactionsBatchCaptureRequest:
      description: A request to capture multiple previously authorized transactions.
      properties:
        amount:
          description: |-
            The (partial) amount to capture.

            When left blank, this will capture the entire amount.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: |
            A supported ISO-4217 currency code.
          example: USD
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          type: string
        transaction_id:
          description: The ID of the transaction to capture.
          type: string
      required:
      - amount
      - currency
      - transaction_id
      title: Batch Capture (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionRequest:
      description: A request to create a transaction.
      example:
        country: US
        amount: 1299
        buyer_external_identifier: user-789123
        external_identifier: user-789123
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        shipping_details_id: 47da6902-5eae-4b4b-88fd-856802d627d6
        connection_options: '{}'
        is_subsequent_payment: true
        store: true
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        previous_scheme_transaction_id: "123456789012345"
        intent: capture
        statement_descriptor: '{}'
        gift_cards:
        - number: "4123455541234561234"
          amount: 1299
          pin: "1234"
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        - number: "4123455541234561234"
          amount: 1299
          pin: "1234"
          id: e6cdf979-87e2-4796-8ff6-9784d5aed893
        async_capture: true
        browser_info: '{}'
        anti_fraud_fingerprint: yGeBAFYgFmM=
        currency: USD
        merchant_initiated: true
        payment_source: recurring
        payment_method:
          number: "4111111111111111"
          country: US
          external_identifier: user-789123
          security_code: "123"
          method: card
          card_holder_name: card_holder_name
          currency: USD
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          expiration_date: 11/15
          redirect_url: https://example.com/callback
          assurance_details:
            card_holder_authenticated: false
            account_verified: false
          token: '{}'
      properties:
        amount:
          description: |-
            The monetary amount for this transaction, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            If the `intent` is set to `capture`, an amount greater than zero must
            be supplied.

            All gift card amounts are subtracted from this amount before the
            remainder is charged to the provided `payment_method`.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: |
            A supported ISO-4217 currency code.

            For redirect requests, this value must match the one specified for
            `currency` in `payment_method`.
          example: USD
          type: string
        payment_method:
          $ref: '#/components/schemas/TransactionPaymentMethodRequest'
        anti_fraud_fingerprint:
          default: "null"
          description: |-
            This field represents the fingerprint data to be passed to the active
            anti-fraud service.
          example: yGeBAFYgFmM=
          nullable: true
          type: string
        async_capture:
          default: false
          description: |-
            Whether to capture the transaction asynchronously.

            - When `async_capture` is `false` (default), the transaction is captured
              in the same request.
            - When `async_capture` is `true`, the transaction is automatically
              captured at a later time.

            Redirect transactions are not affected by this flag.

            This flag can only be set to `true` when `intent` is set to `capture`.
          example: true
          type: boolean
        browser_info:
          allOf:
          - $ref: '#/components/schemas/BrowserInfo'
          description: Information about the browser used by the buyer.
          nullable: true
          type: object
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.

            If a stored payment method or gift card is provided, then the buyer for
            that payment method needs to match the buyer for this field.
          example: user-789123
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.

            If a stored payment method or gift card is provided, then the buyer for
            that payment method needs to match the buyer for this field.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxItems: 249
          type: array
        connection_options:
          allOf:
          - $ref: '#/components/schemas/ConnectionOptions'
          description: |-
            Allows for passing optional configuration per connection to take
            advantage of connection specific features. When provided, the data
            is only passed to the target connection type to prevent sharing
            configuration across connections.

            Please note that each of the keys this object are in kebab-case, for
            example `cybersource-anti-fraud` as they represent the ID of the
            connector. All the other keys will be snake-case, for example
            `merchant_defined_data`.
          nullable: true
          type: object
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.

            If this value is provided for redirect requests and it's not `null`, it
            must match the one specified for `country` in `payment_method`. Otherwise,
            the value specified for `country` in `payment_method` will be assumed
            implicitly.
          example: US
          nullable: true
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        gift_cards:
          description: |-
            The optional gift card(s) to use for this transaction. At least one gift card is required if no other `payment_method` has been added.
            By default, only a maximum limit of 10 gift cards may be used in a single transaction. Please contact our team to change this limit.
          items:
            $ref: '#/components/schemas/TransactionGiftCardRequest'
          nullable: true
          type: array
        intent:
          default: authorize
          description: |-
            Defines the intent of this API call. This determines the desired initial
            state of the transaction.

            * `authorize` - (Default) Optionally approves and then authorizes a
            transaction but does not capture the funds.
            * `capture` - Optionally approves and then authorizes and captures the
            funds of the transaction.
          enum:
          - authorize
          - capture
          example: capture
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note there are some restrictions on how this flag may be
            used.

            The flag can only be `false` (or not set) when the transaction meets
            one of the following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `card_on_file`.

            The flag can only be set to `true` when the transaction meets one of the
            following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `recurring` or `installment` and
            `merchant_initiated` is set to `true`.
            * `payment_source` is set to `card_on_file`.
          example: true
          type: boolean
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it.
          example:
            key: value
          maxProperties: 20
          type: object
        payment_source:
          description: The source of the transaction. Defaults to `ecommerce`.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: recurring
          type: string
        previous_scheme_transaction_id:
          default: "null"
          description: |-
            A scheme's transaction identifier to use in connecting a merchant
            initiated transaction to a previous customer initiated transaction.

            If not provided, and a qualifying customer initiated transaction has been
            previously made, then Gr4vy will populate this value with the identifier
            returned for that transaction.

            e.g. the Visa Transaction Identifier, or Mastercard Trace ID.
          example: "123456789012345"
          nullable: true
          type: string
        shipping_details_id:
          description: |-
            The unique identifier of a set of shipping details stored for the buyer.

            If provided, the created transaction will include a copy of the details
            at the point of transaction creation; i.e. it will not be affected by
            later changes to the detail in the database.
          example: 47da6902-5eae-4b4b-88fd-856802d627d6
          format: uuid
          nullable: true
          type: string
        statement_descriptor:
          allOf:
          - $ref: '#/components/schemas/StatementDescriptor'
          nullable: true
          type: object
        store:
          default: false
          description: |-
            Whether or not to also try and store the payment method with us so that
            it can be used again for future use. This is only supported for payment
            methods that support this feature. There are also a few restrictions on
            how the flag may be set:

            * The flag has to be set to `true` when the `payment_source` is set to
            `recurring` or `installment`, and `merchant_initiated` is set to `false`.

            * The flag has to be set to `false` (or not set) when using a previously
            vaulted payment method.
          example: true
          type: boolean
        three_d_secure_data:
          $ref: '#/components/schemas/ThreeDSecureDataV1V2'
      required:
      - amount
      - currency
      title: Transaction (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionCaptureRequest:
      description: A request to capture a transaction.
      example:
        amount: 1299
      properties:
        amount:
          description: |-
            The monetary amount to capture an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            When omitted blank, this will capture the entire amount.

            Capturing an amount that is greater than the authorized amount is not
            supported.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      title: Capture a transaction
      type: object
      x-tags:
      - Request Bodies
    TransactionRefundRequest:
      description: A request to refund a transaction.
      example:
        amount: 1299
        target_type: gift-card-redemption
        target_id: c23ea83f-1b1c-4584-a0e8-78ef8c041949
      properties:
        amount:
          description: |-
            The amount requested to refund.

            If omitted, a full refund will be requested for the main payment method.

            When set, the amount must be lower than or equal to the remaining balance
            in the associated transaction. Negative and zero-amount refunds are not
            supported.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
        target_type:
          default: payment-method
          description: |-
            The target type to refund for. This can be used to target a gift card
            to refund to instead of the main payment method.
          enum:
          - payment-method
          - gift-card-redemption
          example: gift-card-redemption
          nullable: true
          type: string
        target_id:
          description: |-
            The optional ID of the instrument to refund for. This is only required when
            the `target_type` is set to `gift-card-redemption`.
          example: c23ea83f-1b1c-4584-a0e8-78ef8c041949
          format: uuid
          nullable: true
          type: string
      title: Transaction Refund Request
      type: object
      x-tags:
      - Request Bodies
    TransactionPaymentMethodRequest:
      description: |-
        Payment method details to use in a transaction or to register
        a new payment method.
      example:
        number: "4111111111111111"
        country: US
        external_identifier: user-789123
        security_code: "123"
        method: card
        card_holder_name: card_holder_name
        currency: USD
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        expiration_date: 11/15
        redirect_url: https://example.com/callback
        assurance_details:
          card_holder_authenticated: false
          account_verified: false
        token: '{}'
      properties:
        method:
          description: The method to use for this request.
          enum:
          - afterpay
          - alipay
          - alipayhk
          - applepay
          - bacs
          - bancontact
          - banked
          - becs
          - bitpay
          - boleto
          - boost
          - card
          - checkout-session
          - click-to-pay
          - clearpay
          - dana
          - dcb
          - eps
          - fortumo
          - gcash
          - giropay
          - gocardless
          - googlepay
          - gopay
          - grabpay
          - ideal
          - id
          - kakaopay
          - klarna
          - laybuy
          - linepay
          - linkaja
          - maybankqrpay
          - multibanco
          - oney_3x
          - oney_4x
          - oney_6x
          - oney_10x
          - oney_12x
          - ovo
          - oxxo
          - paymaya
          - paypal
          - paypalpaylater
          - pix
          - rabbitlinepay
          - razorpay
          - scalapay
          - sepa
          - shopeepay
          - singteldash
          - sofort
          - stripedd
          - thaiqr
          - touchngo
          - truemoney
          - trustly
          - venmo
          - waave
          - wechat
          - zippay
          example: card
          type: string
        number:
          description: |-
            The 13-19 digit number for this credit card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          nullable: true
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.
          example: 11/15
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d\d/\d\d$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          nullable: true
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: user-789123
          nullable: true
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          nullable: true
          type: string
        id:
          description: |-
            An identifier for a previously tokenized payment method or checkout-session.
            This id can represent any type of payment method or checkout-session.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: US
          nullable: true
          type: string
        token:
          description: |-
            The encrypted (opaque) token that was passed to the `onpaymentauthorized`
            callback by the Apple Pay integration.
          nullable: true
          type: object
        assurance_details:
          $ref: '#/components/schemas/GooglePayRequest_assurance_details'
        card_holder_name:
          description: Name of the card holder.
          nullable: true
          type: string
      required:
      - method
      title: Transaction payment method request
      type: object
      x-tags:
      - Request Bodies
    TransactionGiftCardRequest:
      description: Create a transaction with this gift card.
      example:
        number: "4123455541234561234"
        amount: 1299
        pin: "1234"
        id: e6cdf979-87e2-4796-8ff6-9784d5aed893
      properties:
        id:
          description: |-
            The ID of the gift card to check a balance for.
            Required if `number` is not set.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        number:
          description: |-
            The 16-19 digit number for this gift card.
            Required if `id` is not set.
          example: "4123455541234561234"
          maxLength: 19
          minLength: 16
          pattern: ^[0-9]{16,19}$
          type: string
        pin:
          description: The PIN for this gift card. Required if `number` is set.
          example: "1234"
          type: string
        amount:
          description: |-
            The monetary amount to charge for this gift card, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            All gift card amounts are subtracted from the total transaction amount. The
            remainder is charged to the provided `payment_method`.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      required:
      - amount
      title: Transaction gift card (Request)
      type: object
      x-tags:
      - Request Bodies
    TransactionGiftCardNewRequest:
      description: Create a transaction with this gift card.
      properties:
        number:
          description: The 16-19 digit number for this gift card.
          example: "4123455541234561234"
          maxLength: 19
          minLength: 16
          pattern: ^[0-9]{16,19}$
          type: string
        pin:
          description: The PIN for this gift card.
          example: "1234"
          type: string
        amount:
          description: |-
            The monetary amount to charge for this gift card, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            All gift card amounts are subtracted from the total transaction amount. The
            remainder is charged to the provided `payment_method`.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      required:
      - amount
      - number
      - pin
      title: Transaction gift card request (New)
      type: object
      x-tags:
      - Request Bodies
    TransactionGiftCardStoredRequest:
      description: Create a transaction with a stored gift card.
      properties:
        id:
          description: The ID of the gift card to check a balance for.
          example: e6cdf979-87e2-4796-8ff6-9784d5aed893
          format: uuid
          type: string
        amount:
          description: |-
            The monetary amount to charge for this gift card, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            All gift card amounts are subtracted from the total transaction amount. The
            remainder is charged to the provided `payment_method`.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      required:
      - amount
      - id
      title: Transaction gift card request (Stored)
      type: object
      x-tags:
      - Request Bodies
    TransactionCardRequest:
      description: Card payment method details to use in a transaction.
      properties:
        method:
          description: '`card`.'
          enum:
          - card
          example: card
          type: string
        number:
          description: |-
            The 13-19 digit number for this card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: The expiration date of the card, formatted `MM/YY`.
          example: 11/25
          maxLength: 5
          minLength: 5
          pattern: ^\d{2}/\d{2}$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records. This can only be set if the `store` flag is set to `true`.
          example: card-323444
          nullable: true
          type: string
        redirect_url:
          description: |-
            We strongly recommend providing a `redirect_url` either when 3-D
            Secure is enabled and `three_d_secure_data` is not provided, or when
            using connections where 3DS is enabled. This value will be appended
            with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has
            completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - expiration_date
      - method
      - number
      - security_code
      title: Card
      type: object
      x-tags:
      - Request Bodies
    TransactionRedirectRequest:
      description: Redirect payment method details to use in a transaction.
      properties:
        method:
          description: |-
            The method to use, this can be any of the methods that
            support redirect requests.

            When storing a new payment method, only `gocardless` and `stripedd`
            are currently supported.
          enum:
          - paypal
          - banked
          - bitpay
          - gocardless
          - stripedd
          example: paypal
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: US
          type: string
        external_identifier:
          description: An external identifier that can be used to match the account
            against your own records. This can only be set if the `store` flag is
            set to `true`.
          example: account-23423423
          nullable: true
          type: string
      required:
      - country
      - currency
      - method
      - redirect_url
      title: Redirect
      type: object
      x-tags:
      - Request Bodies
    TransactionCheckoutSessionRequest:
      description: Checkout Session payment method details to use in a transaction.
      properties:
        method:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records. This can only be set if the `store` flag is set to `true`.
          example: card-323444
          nullable: true
          type: string
        redirect_url:
          description: |-
            We strongly recommend providing a `redirect_url` either when 3-D
            Secure is enabled and `three_d_secure_data` is not provided, or when
            using connections where 3DS is enabled. This value will be appended
            with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has
            completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - id
      - method
      title: Checkout Session
      type: object
      x-tags:
      - Request Bodies
    UserCurrentUpdate:
      description: A request to update the current user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give a user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          type: string
      title: User (Update Current)
      type: object
      x-tags:
      - Users
    UserRequest:
      description: A request to create a user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give an user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          nullable: false
          type: string
        email_address:
          description: The email address for this user.
          example: john@example.com
          maxLength: 200
          minLength: 1
          nullable: false
          type: string
        role_ids:
          description: A list of role ids that will be assigned to the user being
            created. The creator must have `roles.write` or the role that is being
            assigned.
          example:
          - 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          items:
            format: uuid
            type: string
          minItems: 1
          nullable: false
          type: array
        merchant_account_ids:
          description: A list of merchant account IDs that the user being created
            will be assigned to.
          example:
          - default
          - plantly-uk
          items:
            type: string
          nullable: true
          type: array
      title: User (Create)
      type: object
      x-tags:
      - Users
    UserUpdate:
      description: A request to update a user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give a user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          type: string
        role_ids:
          description: The IDs of the roles to assign to the user. Sending an empty
            list will remove all roles assigned to the user.
          example:
          - 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          items:
            format: uuid
            type: string
          type: array
        merchant_account_ids:
          description: A list of merchant account IDs that the user is assigned to.
          example:
          - default
          - plantly-uk
          items:
            type: string
          nullable: true
          type: array
      title: User (Update)
      type: object
      x-tags:
      - Users
    UserRole:
      allOf:
      - $ref: '#/components/schemas/Role'
      title: User Role
      type: object
      x-tags:
      - Users
    SetPasswordRequest:
      description: A request to set a password for a user.
      properties:
        reset_token:
          description: Unique reset token valid for 7 days.
          example: nXyWSHq2r5q_8F1_NXtppEStY7KbBHqwU9T8pdmOQa_LYJxpxxXcjOXL58xpHLy5gh1k6s0Myl3ygA6SnsxIjLXBKO3x1EZX3igq
          maxLength: 100
          minLength: 100
          nullable: false
          type: string
        password:
          description: The password the user to log in with.
          example: this-is-n0t-a-secure-passw0rd
          type: string
      title: Set Password (Create)
      type: object
      x-tags:
      - Users
    ResetPasswordRequest:
      description: A request to reset a password for a user.
      properties:
        email_address:
          description: The email address of the user account to reset.
          example: john@example.com
          type: string
      title: Reset Password (Create)
      type: object
      x-tags:
      - Users
    AntiFraudDecisionEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        anti_fraud_service_check_id:
          description: The external ID of the decision.
          example: decision-1234
          type: string
        request:
          description: The HTTP body sent to fetch a decision.
          type: string
        response:
          description: The HTTP body received from the anti-fraud provider.
          type: string
        response_status_code:
          description: The HTTP response status code from the anti-fraud provider.
          type: number
        decision:
          description: The parsed decision response from the anti-fraud provider response.
          example: ACCEPT
          type: string
      type: object
    AntiFraudDecisionErrorEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        status_code:
          description: The HTTP response status code from the anti-fraud provider,
            if we received any.
          type: number
        reason:
          description: The reason we could not get the anti-fraud decision.
          example: Network Error
          type: string
      type: object
    AntiFraudDecisionSkippedEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        reason:
          description: The reason we could not get the anti-fraud decision.
          example: Missing billing address
          type: string
      type: object
    AntiFraudTransactionStatusUpdateEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        request:
          description: The HTTP body sent to fetch a decision.
          type: string
        response:
          description: The HTTP body received from the anti-fraud provider.
          type: string
        response_status_code:
          description: The HTTP response status code from the anti-fraud provider.
          type: number
      type: object
    AntiFraudTransactionStatusUpdateErrorEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        reason:
          description: The reason we could not get the anti-fraud decision.
          example: Network Error
          type: string
        request:
          description: The HTTP body sent to fetch a decision.
          nullable: true
          type: string
        response:
          description: The HTTP body received from the anti-fraud provider.
          nullable: true
          type: string
        response_status_code:
          description: The HTTP response status code from the anti-fraud provider.
          nullable: true
          type: number
      type: object
    AntiFraudWebhookEvent_context:
      description: Additional context for this event.
      properties:
        anti_fraud_service_id:
          description: The unique ID of the anti-fraud service used.
          format: uuid
          type: string
        anti_fraud_service_name:
          description: The name of the anti-fraud service used.
          type: string
        anti_fraud_service_definition_id:
          description: The anti-fraud service definition used.
          type: string
        anti_fraud_service_check_id:
          description: The external ID of the decision that's being updated.
          example: decision-1234
          type: string
        content:
          description: The raw payload sent as a webhook.
          example: '{ "decision": "ACCEPT", "id": "decision-1234", "reason": "Manually
            verified" }'
          type: string
        content_type:
          description: The content type of the payload sent as a webhook.
          example: application/json
          type: string
        decision:
          description: The parsed decision response from the anti-fraud provider webhook.
          example: ACCEPT
          type: string
        comment:
          description: Any comment that may have come with the webhook event.
          example: Manually verified
          type: string
      type: object
    AntiFraudServiceUpdate_fields:
      description: A key-value pair that represents a field defined in the definition
        for this anti-fraud service.
      properties:
        key:
          description: The key of the field to set a value for.
          example: api_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 1
          type: string
      required:
      - key
      - value
      type: object
    ApiLog_response_body_details:
      description: Details of the log entry, stack trace and endpoint.
      example:
        pointer: /payment_method/number
        location: body
        message: ensure this value has at least 13 characters
        type: value_error.any_str.min_length
      properties:
        pointer:
          description: Log's pointer.
          example: /payment_method/number
          type: string
        message:
          description: Detailed message on the log entry.
          example: ensure this value has at least 13 characters
          type: string
        location:
          description: Location on where the error happened.
          example: body
          type: string
        type:
          description: Detailed error type that is specified in the log entry.
          example: value_error.any_str.min_length
          type: string
      type: object
    ApiLog_response_body:
      description: The JSON response body for the log entry.
      example:
        code: bad_request
        details:
          pointer: /payment_method/number
          location: body
          message: ensure this value has at least 13 characters
          type: value_error.any_str.min_length
        message: Request failed validation
        type: error
        status: 400
      properties:
        code:
          description: The error code.
          example: bad_request
          type: string
        message:
          description: The error message.
          example: Request failed validation
          type: string
        status:
          description: The HTTP error code.
          example: 400
          type: number
        type:
          description: Type of the log entry.
          example: error
          type: string
        details:
          $ref: '#/components/schemas/ApiLog_response_body_details'
      type: object
    AuditLog_user:
      description: The user who performed the action.
      example:
        email_address: john@example.com
        name: John L
        staff: false
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        status: active
      properties:
        id:
          description: The ID of the user.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        name:
          description: The name of the user.
          example: John L
          type: string
        email_address:
          description: The email address for this user.
          example: john@example.com
          nullable: true
          type: string
        staff:
          description: Whether the user is Gr4vy staff.
          example: false
          type: boolean
        status:
          description: The status of the user.
          enum:
          - active
          - pending
          - deleted
          example: active
          type: string
      type: object
    AuditLog_resource:
      description: The resource that was changed.
      example:
        name: Samuel J
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: buyer
      properties:
        type:
          description: The type of the resource.
          example: buyer
          type: string
        id:
          description: The ID of the resource.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The descriptive name of the resource.
          example: Samuel J
          type: string
      type: object
    BINLookupRequest_context:
      description: BIN lookup request context.
      properties:
        response:
          description: The response body received from the `url`.
          example: '{}'
          nullable: true
          type: string
        response_status_code:
          description: The response status code received from the `url`.
          example: 200
          type: integer
        success:
          description: Whether the BIN lookup was successful or not.
          type: boolean
        bin:
          description: The value used to lookup BIN details.
          nullable: true
          type: string
        type:
          description: The type of card, i.e. credit or debit, from the lookup response.
          nullable: true
          type: string
        scheme:
          description: The card scheme result from the lookup response.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        additional_schemes:
          description: The card additional schemes from the lookup response.
          items:
            enum:
            - accel
            - amex
            - bancontact
            - carte-bancaire
            - cirrus
            - culiance
            - dankort
            - diners-club
            - discover
            - eftpos-australia
            - elo
            - hipercard
            - jcb
            - maestro
            - mastercard
            - nyce
            - other
            - pulse
            - rupay
            - star
            - unionpay
            - visa
            example: visa
            type: string
          nullable: true
          type: array
        country_code:
          description: The card country code result from the lookup response.
          nullable: true
          type: string
        account_updater:
          description: Whether Account Updater is enabled for this card.
          nullable: true
          type: boolean
        issuer_tokenization:
          description: Whether the issuing bank supports network tokenization for
            this card.
          nullable: true
          type: boolean
      type: object
    DigitalWalletApplePayTokenDecrypted_context:
      description: Apple Pay decrypted token context.
      properties:
        version:
          description: Version information about the payment token.
          example: EC_v1
          type: string
        type:
          description: The type of payment instrument.
          enum:
          - dpan
          - fpan
          example: dpan
          nullable: true
          type: string
        expiration_date:
          description: Expiration of the decrypted data.
          type: string
        has_cryptogram:
          description: Online payment cryptogram, as defined by 3D Secure.
          type: boolean
        eci:
          description: ECI indicator, as defined by 3D Secure.
          nullable: true
          type: string
        application_data:
          description: Hash of the application data property of the original request.
          nullable: true
          type: string
        transaction_identifier:
          description: The unique identifier from Apple Pay.
          type: string
        cardholder_name:
          description: The cardholder name.
          nullable: true
          type: string
        currency_code:
          description: ISO 4217 numeric currency code for the transaction.
          example: "840"
          type: string
        transaction_amount:
          description: The amount for the transaction.
          type: integer
        device_manufacturer_identifier:
          description: Hex-encoded device manufacturer identifier which initiated
            the transaction.
          type: string
        payment_data_type:
          description: Either "3DSecure" or "EMV".
          example: 3DSecure
          type: string
        merchant_token_identifier:
          description: For a merchant token request, the provisioned merchant token
            identifier from the payment network.
          nullable: true
          type: string
        card_expiration_date:
          description: Expiration date of card.
          nullable: true
          type: string
        card_suffix:
          description: Last four digits of card PAN.
          nullable: true
          type: string
      type: object
    DigitalWalletClickToPayTokenDecrypted_context:
      description: Click to Pay decrypted token context.
      properties:
        correlation_id:
          description: Correlation ID for transaction.
          example: ba7a2034-3c9e-4d74-b0e9-d77435fd35d7
          type: string
        merchant_transaction_id:
          description: Merchant Checkout Transaction Identifier which links the client-side
            JavaScript calls and server-side API calls for a specific transaction.
          example: 0a4e0d3.34f4a04b.47ee82c373dd4fd5398f3980b39eb6d648b9687c
          type: string
        type:
          description: The type of payment instrument.
          enum:
          - dpan
          - fpan
          example: dpan
          type: string
        expiration_date:
          description: Expiration of the card/token.
          type: string
        has_cryptogram:
          description: Online payment cryptogram, as defined by 3-D Secure.
          type: boolean
        cardholder_name:
          description: The cardholder name.
          nullable: true
          type: string
        card_bin:
          description: First six digits of underlying card.
          example: "424242"
          type: string
        card_last_four:
          description: Last four digits of underlying card.
          type: string
        card_expiration_date:
          description: Expiration date of underlying card.
          type: string
        card_type:
          description: Card type.
          example: CREDIT
          type: string
        billing_line1:
          description: Address line 1.
          nullable: true
          type: string
        billing_line2:
          description: Address line 2.
          nullable: true
          type: string
        billing_city:
          description: Address city.
          nullable: true
          type: string
        billing_state:
          description: Address state.
          nullable: true
          type: string
        billing_zip:
          description: Address zip/postal code.
          nullable: true
          type: string
        billing_country_code:
          description: ISO 3166-1 alpha 2 address country code.
          nullable: true
          type: string
      type: object
    DigitalWalletGooglePayTokenDecrypted_context:
      description: Google Pay decrypted token context.
      properties:
        version:
          description: Version information about the payment token.
          example: ECv2
          type: string
        type:
          description: The type of payment instrument.
          enum:
          - dpan
          - fpan
          example: dpan
          nullable: true
          type: string
        expiration_date:
          description: Expiration of the decrypted data.
          type: string
        has_cryptogram:
          description: Online payment cryptogram, as defined by 3D Secure.
          type: boolean
        eci:
          description: ECI indicator, as defined by 3D Secure.
          nullable: true
          type: string
        message_expiration:
          description: Date and time at which the message expires as UTC milliseconds
            since epoch.
          type: string
        message_id:
          description: A unique ID that identifies the message in case it needs to
            be revoked or located at a later time.
          type: string
        payment_method:
          description: The type of the payment credential.
          example: CARD
          type: string
      type: object
    RequiredFields_address:
      description: The billing address of the buyer.
      example:
        country: true
        city: true
        state: true
        postal_code: true
        line1: true
        house_number_or_name: true
      properties:
        city:
          description: The city for the billing address.
          readOnly: true
          type: boolean
        country:
          description: The country for the billing address.
          readOnly: true
          type: boolean
        postal_code:
          description: The postal code or zip code for the billing address.
          readOnly: true
          type: boolean
        state:
          description: The state, county, or province for the billing address.
          readOnly: true
          type: boolean
        house_number_or_name:
          description: |-
            The house number or name for the billing address. Not all payment
            services use this field but some do.
          readOnly: true
          type: boolean
        line1:
          description: The first line of the billing address.
          readOnly: true
          type: boolean
      type: object
    ConnectionOptions_cybersource_card:
      description: Additional options for Cybersource payment gateway.
      nullable: true
      properties:
        meta_key_merchant_id:
          description: |-
            An override for the merchant ID configured for the connector,
            used in combination with meta keys.
          nullable: true
          type: string
      type: object
    ConnectionOptions_cybersource_anti_fraud:
      description: Additional options for Cybersource Decision Manager (anti-fraud).
      nullable: true
      properties:
        meta_key_merchant_id:
          description: |-
            An override for the merchant ID configured for the connector,
            used in combination with meta keys.
          nullable: true
          type: string
        merchant_defined_data:
          additionalProperties:
            type: string
          description: |-
            This is a key-value object for merchant defined data. Each key needs to be a
            numeric string identifying the MDD field to set. For example, for field 1 set
            the key to "1".
          example:
            "1": John Doe
            "2": trusted
            "99": recurring
          maxProperties: 100
          type: object
      type: object
    ConnectionOptions_forter_anti_fraud_basic_item_data:
      description: General data regarding item such as name, price, etc.
      properties:
        type:
          description: Tangible if physical item, non-tangible if any other product.
          enum:
          - TANGIBLE
          - NON_TANGIBLE
          example: TANGIBLE
          maxLength: 12
          type: string
      type: object
    ConnectionOptions_forter_anti_fraud_delivery_details:
      description: General data regarding item such as name, price, etc.
      properties:
        delivery_type:
          description: |-
            Value to populate the `deliveryType` field for this cart item. This overrides
            the type set at the wider level.

            Represents the type of delivery. This can be set to `PHYSICAL` for any
            type of shipped goods, `DIGITAL` for non-shipped goods (services,
            gift cards etc.), or `HYBRID` for others.
          enum:
          - PHYSICAL
          - DIGITAL
          - HYBRID
          example: PHYSICAL
          nullable: true
          type: string
        delivery_method:
          description: |-
            Value to populate the `deliveryMethod` field for this cart item. This overrides
            the method set at the wider level.

            Represents the delivery method chosen by customer such as postal service,
            email, in game transfer, etc.
          example: USPS - Ground Mail
          type: string
      type: object
    ConnectionOptions_forter_anti_fraud_personal_details:
      description: |-
        Personal details are those which contribute to building up a picture
        of the person as an individual, such as name, title, etc.
      properties:
        first_name:
          description: First name.
          example: John
          maxLength: 75
          type: string
        last_name:
          description: Last name.
          example: Smith
          maxLength: 75
          type: string
        email:
          description: Email address.
          example: john@example.com
          maxLength: 256
          type: string
      type: object
    ConnectionOptions_forter_anti_fraud_address:
      description: Address details for the beneficiary.
      nullable: true
      properties:
        country:
          description: Country, two-letter ISO 3166-1 alpha 2 country code.
          example: US
          maxLength: 2
          type: string
        address1:
          description: Street-level address. Required when full address details are
            available.
          example: 235 Montgomery st.
          maxLength: 255
          nullable: true
          type: string
        address2:
          description: Unit-level address.
          example: Ste. 1110
          maxLength: 255
          nullable: true
          type: string
        zip:
          description: Zipcode.
          example: "94104"
          maxLength: 20
          nullable: true
          type: string
        region:
          description: |-
            Top-level administrative subdivision - state/province/department/etc.
            Can be either abbreviated format or full name (NY/New York).
          example: CA
          maxLength: 200
          nullable: true
          type: string
        company:
          description: Company name.
          example: Generic Corp. ltd.
          maxLength: 255
          nullable: true
          type: string
        city:
          description: City. Required when full address details are available.
          example: San Francisco
          maxLength: 200
          nullable: true
          type: string
      required:
      - country
      type: object
    ConnectionOptions_forter_anti_fraud_phone:
      properties:
        phone:
          description: Phone number including all country and local access codes.
          example: "15557654321"
          maxLength: 25
          type: string
      required:
      - phone
      type: object
    ConnectionOptions_forter_anti_fraud_comments:
      description: Comments to merchant or beneficiary written by customer.
      nullable: true
      properties:
        user_comments_to_merchant:
          description: Comments the customer left to the merchant.
          example: Please wrap with care!!
          maxLength: 600
          nullable: true
          type: string
        message_to_beneficiary:
          description: Comments the customer left to the beneficiary of the purchase
            made.
          example: Enjoy the gift John!
          maxLength: 600
          nullable: true
          type: string
        merchant_comments:
          description: Comments by the merchant.
          example: Shipping delayed
          maxLength: 600
          nullable: true
          type: string
      type: object
    ConnectionOptions_forter_anti_fraud_beneficiaries:
      properties:
        personal_details:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_personal_details'
        address:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_address'
        phone:
          description: List of all phone numbers for the beneficiary.
          items:
            $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_phone'
          type: array
        comments:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_comments'
      required:
      - personal_details
      type: object
    ConnectionOptions_forter_anti_fraud_cart_items:
      properties:
        basic_item_data:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_basic_item_data'
        delivery_details:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_delivery_details'
        beneficiaries:
          description: List of all entities receiving or using the purchased cart
            item.
          items:
            $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_beneficiaries'
          type: array
      type: object
    ConnectionOptions_forter_anti_fraud_total_discount_coupon_discount_amount:
      description: A monetary amount in USD or local currency.
      nullable: true
      properties:
        amount_usd:
          description: Transaction amount in USD.
          example: "99.95"
          maxLength: 12
          type: string
        amount_local_currency:
          description: Transaction amount in currency chosen by the buyer.
          example: "105.55"
          maxLength: 20
          type: string
        currency:
          description: Transaction currency chosen by the buyer, 3-letter ISO-4217
            format currency code.
          example: CAD
          maxLength: 3
          type: string
      required:
      - coupon_code
      - discount_type
      type: object
    ConnectionOptions_forter_anti_fraud_total_discount:
      description: |-
        The `totalDiscount` object that's sent to Forter's validation API.
        It represents the discount that was given to the customer.
      nullable: true
      properties:
        coupon_code_used:
          description: The coupon code used.
          example: FATHERSDAY2015
          maxLength: 150
          type: string
        discount_type:
          description: The discount type.
          example: COUPON
          maxLength: 250
          type: string
        coupon_discount_amount:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_total_discount_coupon_discount_amount'
        coupon_discount_percent:
          description: Coupon discount percentage.
          example: 20%
          nullable: true
          type: string
      required:
      - coupon_code
      - discount_type
      type: object
    ConnectionOptions_forter_anti_fraud:
      description: Additional options for Forter (anti-fraud).
      nullable: true
      properties:
        delivery_type:
          description: |-
            Value to populate the `deliveryType` field in `primaryDeliveryDetails`.

            Represents the type of delivery. This can be set to `PHYSICAL` for any
            type of shipped goods, `DIGITAL` for non-shipped goods (services,
            gift cards etc.), or `HYBRID` for others.
          enum:
          - PHYSICAL
          - DIGITAL
          - HYBRID
          nullable: true
          type: string
        delivery_method:
          description: |-
            Value to populate the `deliveryMethod` field in `primaryDeliveryDetails`.

            Represents the delivery method chosen by customer such as postal service,
            email, in game transfer, etc.
          nullable: true
          type: string
        is_guest_buyer:
          default: false
          description: |-
            Defines if this is a guest check-out. This will redact the `accountId` and
            `created` fields from the `accountOwner` details sent to Forter.
          type: boolean
        cart_items:
          description: |-
            A list of Forter cart item objects. These will be merged into the `cart_items`
            passed to the transaction. Every cart item here will be merged with a cart item
            on the transaction with the same index.

            Together, these will augment the `cartItems` values sent to the Forter validation
            API.
          items:
            $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_cart_items'
          type: array
        total_discount:
          $ref: '#/components/schemas/ConnectionOptions_forter_anti_fraud_total_discount'
      type: object
    ConnectionOptions_adyen_card:
      description: |-
        Additional options to be passed through to Adyen when processing
        card transactions.
      nullable: true
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: |-
            A key-value object representing additional data to be passed
            to Adyen.
          example:
            riskdata.operatorCode: operatorCode,
            riskdata.operatorCountry: operatorCountry
          type: object
      type: object
    ConnectionOptions_paypal_paypal_additional_data:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    ConnectionOptions_paypal_paypal:
      description: |-
        Additional options to be passed through to PayPal when processing
        transactions.
      nullable: true
      properties:
        additional_data:
          description: |-
            An array with key-value objects representing additional
            data to be passed to PayPal.
          example:
          - key: test
            value: abc
          items:
            $ref: '#/components/schemas/ConnectionOptions_paypal_paypal_additional_data'
          type: array
      type: object
    ConnectionOptions_stripe_card_stripe_connect:
      description: Stripe Connect configuration options.
      nullable: true
      properties:
        stripe_account:
          description: The ID of the connected Stripe account to process for.
          nullable: true
          type: string
        application_fee_amount:
          description: The application fee to charge when processing for a connected
            account.
          nullable: true
          type: number
      type: object
    ConnectionOptions_stripe_card:
      description: |-
        Additional options to be passed through to Stripe when processing
        transactions.
      nullable: true
      properties:
        error_on_requires_action:
          default: false
          description: |-
            Defines if Stripe should automatically fail the payment if it
            requires two-factor authentication from the user.
          type: boolean
        stripe_connect:
          $ref: '#/components/schemas/ConnectionOptions_stripe_card_stripe_connect'
      type: object
    CheckoutSession_payment_method_details:
      example:
        bin: "411111"
        card_country: US
        card_type: credit
      nullable: true
      properties:
        bin:
          description: First six digits of PAN.
          example: "411111"
          nullable: true
          type: string
        card_type:
          enum:
          - credit
          - debit
          - prepaid
          example: credit
          nullable: true
          type: string
        card_country:
          description: ISO 3166 two letter country code.
          example: US
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
      type: object
    CheckoutSession_payment_method:
      description: Details about the payment method for card type only.
      example:
        method: card
        scheme: visa
        details:
          bin: "411111"
          card_country: US
          card_type: credit
        id: id
        label: "4242"
        type: payment_method
      nullable: true
      properties:
        type:
          example: payment_method
          type: string
        id:
          description: Unique ID for the payment method.
          nullable: true
          type: string
        method:
          description: Payment method type.
          enum:
          - card
          example: card
          type: string
        scheme:
          description: The scheme/brand of the card.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        label:
          description: Last four digits of PAN.
          example: "4242"
          nullable: true
          type: string
        details:
          $ref: '#/components/schemas/CheckoutSession_payment_method_details'
      type: object
    GiftCardRedemptionFailed_context:
      description: Additional context for this event.
      properties:
        gift_card_service_id:
          description: The unique ID of the Gift Card service used.
          format: uuid
          type: string
        gift_card_service_name:
          description: The name of the Gift Card service used.
          type: string
        gift_card_service_definition_id:
          description: The Gift Card service definition used.
          type: string
        url:
          description: The endpoint for the request, if performed.
          nullable: true
          type: string
        request:
          description: The HTTP body sent to the Gift Card provider, if performed.
          nullable: true
          type: string
        response:
          description: The HTTP body received from the Gift Card provider, if any.
          nullable: true
          type: string
        response_status_code:
          description: The HTTP response status code from the Gift Card provider,
            if any.
          nullable: true
          type: number
        reason:
          description: The reason we could not redeem the gift cards.
          example: Network Error
          type: string
      type: object
    GiftCardRedemptionSucceeded_context:
      description: Additional context for this event.
      properties:
        gift_card_service_id:
          description: The unique ID of the Gift Card service used.
          format: uuid
          type: string
        gift_card_service_name:
          description: The name of the Gift Card service used.
          type: string
        gift_card_service_definition_id:
          description: The Gift Card service definition used.
          type: string
        url:
          description: The endpoint for the request.
          nullable: true
          type: string
        request:
          description: The HTTP body sent to the Gift Card provider.
          type: string
        response:
          description: The HTTP body received from the Gift Card provider.
          type: string
        response_status_code:
          description: The HTTP response status code from the Gift Card provider.
          type: number
      type: object
    GiftCardRefundFailed_context:
      description: Additional context for this event.
      properties:
        gift_card_service_id:
          description: The unique ID of the Gift Card service used.
          format: uuid
          type: string
        gift_card_service_name:
          description: The name of the Gift Card service used.
          type: string
        gift_card_service_definition_id:
          description: The Gift Card service definition used.
          type: string
        url:
          description: The endpoint for the request, if performed.
          nullable: true
          type: string
        request:
          description: The HTTP body sent to the Gift Card provider, if performed.
          nullable: true
          type: string
        response:
          description: The HTTP body received from the Gift Card provider, if any.
          nullable: true
          type: string
        response_status_code:
          description: The HTTP response status code from the Gift Card provider,
            if any.
          nullable: true
          type: number
        reason:
          description: The reason we could not refund the gift cards.
          example: Network Error
          type: string
      type: object
    GiftCardService_fields:
      example:
        value: sk_test_26PHem9AhJZvU623DfE1x4sd
        key: secret_key
      properties:
        key:
          description: The key of the field.
          example: secret_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of the field.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 1
          type: string
      type: object
    GiftCardServiceCreateRequest_fields:
      description: A key-value pair that represents a field defined in the definition
        for this gift card service.
      example:
        value: pk_26PHem9AhJZvU623DfE1x4sd
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set.
          example: pk_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 0
          type: string
      required:
      - key
      - value
      type: object
    GiftCardServiceUpdateRequest_fields:
      description: A key-value pair that represents a field defined in the definition
        for this gift card service.
      example:
        value: pk_26PHem9AhJZvU623DfE1x4sd
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set; you can unset optional fields
            by setting this to an empty string `""`.
          example: pk_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 0
          type: string
      required:
      - key
      - value
      type: object
    GiftCardServiceVerifyRequest_fields:
      description: A key-value pair that represents a field defined in the definition
        for this service.
      example:
        value: pk_26PHem9AhJZvU623DfE1x4sd
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set.
          example: pk_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 1
          type: string
      required:
      - key
      - value
      type: object
    GiftCardServiceDefinition_fields:
      description: |-
        A single field that needs to be submitted for a payment service when it
        is created.
      example:
        format: text
        secret: true
        display_name: Private API key
        key: private_api_key
        required: true
      properties:
        key:
          description: The key of a field that needs to be submitted.
          example: private_api_key
          type: string
        display_name:
          description: The name to display for a field in the dashboard.
          example: Private API key
          type: string
        required:
          description: Defines if this field is required when the service is created.
          example: true
          type: boolean
        format:
          description: Defines the type of input that needs to be rendered for this
            field.
          enum:
          - text
          - multiline
          - number
          example: text
          type: string
        secret:
          description: |-
            Defines if this field is secret. When `true` the field is not
            returned when querying the payment service.
          example: true
          type: boolean
      type: object
    GooglePayRequest_assurance_details:
      description: Information about the validation performed on the payment data.
        (See https://developers.google.com/pay/api/web/reference/response-objects#assurance-details-specifications).
      example:
        card_holder_authenticated: false
        account_verified: false
      nullable: true
      properties:
        account_verified:
          description: Indicates that card holder possession validation has been performed.
          example: false
          nullable: true
          type: boolean
        card_holder_authenticated:
          description: Indicates that identification and verifications was performed.
          example: false
          nullable: true
          type: boolean
      type: object
    NetworkTokenCryptogramProvisionFailed_context:
      description: Additional context for this event.
      properties:
        url:
          description: The endpoint for the request, if performed.
          nullable: true
          type: string
        request:
          description: The HTTP body sent to the Network Token provider, if performed.
          nullable: true
          type: string
        response:
          description: The HTTP body received from the Network Token provider, if
            any.
          nullable: true
          type: string
        response_status_code:
          description: The HTTP response status code from the Network Token provider,
            if any.
          nullable: true
          type: number
        reason:
          description: The reason we could not provision the cryptogram.
          example: Network Error
          type: string
      type: object
    NetworkTokenCryptogramProvisionSucceeded_context:
      description: Additional context for this event.
      properties:
        url:
          description: The endpoint for the request.
          type: string
        request:
          description: The HTTP body sent to the Network Token provider.
          type: string
        response:
          description: The HTTP body received from the Network Token provider.
          type: string
        response_status_code:
          description: The HTTP response status code from the Network Token provider.
          type: number
      type: object
    NetworkTokenProvisionFailed_context:
      description: Additional context for this event.
      properties:
        url:
          description: The endpoint for the request, if performed.
          nullable: true
          type: string
        request:
          description: The HTTP body sent to the Network Token provider, if performed.
          nullable: true
          type: string
        response:
          description: The HTTP body received from the Network Token provider, if
            any.
          nullable: true
          type: string
        response_status_code:
          description: The HTTP response status code from the Network Token provider,
            if any.
          nullable: true
          type: number
        reason:
          description: The reason we could not provision the network token.
          example: Network Error
          type: string
      type: object
    PaymentConnectorResponseTransactionAuthorizationSucceededEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        status:
          description: |-
            The new status code for the transaction. This is always
            set to `authorization_succeeded`.
          enum:
          - authorization_succeeded
          example: authorization_succeeded
          type: string
        instrument_type:
          description: The type of instrument used for this transaction.
          enum:
          - pan
          - card_token
          - redirect
          - redirect_token
          - googlepay
          - applepay
          - network_token
          example: pan
          type: string
        retry_rule:
          deprecated: true
          description: This will always be `null` because the transaction succeeded.
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          example: match
          nullable: true
          type: string
        payment_method_scheme:
          description: The card scheme sent to the connector.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionAuthorizationFailedEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        status:
          description: |-
            The new status code for the transaction. This is always
            set to `authorization_failed`.
          enum:
          - authorization_failed
          example: authorization_failed
          type: string
        code:
          description: A raw response code returned for the failure.
          example: INVALID DATA
          nullable: true
          type: string
        instrument_type:
          description: The type of instrument used for this transaction.
          enum:
          - pan
          - card_token
          - redirect
          - redirect_token
          - googlepay
          - applepay
          - network_token
          example: pan
          type: string
        retry_rule:
          description: |-
            Defines why the transaction might be retried. A retry is not guaranteed because
            the maximum number of retries might already have been attempted.

            * `failure` - the transaction will be retried because of a failure calling
              the payment service.
            * `retriable_decline` - the transaction will be retried because a decline code
              was received that can be retried.
            * `payment_method_replacement` - the transaction will be retried because a
              decline code was received that triggered a payment method replacement.
          enum:
          - failure
          - retriable_decline
          - payment_method_replacement
          example: failure
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          example: match
          nullable: true
          type: string
        payment_method_scheme:
          description: The card scheme sent to the connector.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionDeclinedEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        status:
          description: |-
            The new status code for the transaction. This is always
            set to `authorization_declined`.
          enum:
          - authorization_declined
          example: authorization_declined
          type: string
        code:
          description: A raw response code returned for the decline.
          example: INVALID DATA
          nullable: true
          type: string
        instrument_type:
          description: The type of instrument used for this transaction.
          enum:
          - pan
          - card_token
          - redirect
          - redirect_token
          - googlepay
          - applepay
          - network_token
          example: pan
          type: string
        retry_rule:
          description: |-
            Defines why the transaction might be retried. A retry is not guaranteed because
            the maximum number of retries might already have been attempted.

            * `failure` - the transaction will be retried because of a failure calling
              the payment service.
            * `retriable_decline` - the transaction will be retried because a decline code
              was received that can be retried.
            * `payment_method_replacement` - the transaction will be retried because a
              decline code was received that triggered a payment method replacement.
          enum:
          - failure
          - retriable_decline
          - payment_method_replacement
          example: failure
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          example: match
          nullable: true
          type: string
        payment_method_scheme:
          description: The card scheme sent to the connector.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionCaptureSucceededEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        status:
          description: |-
            The new status code for the transaction. This is always
            set to `capture_succeeded`.
          enum:
          - capture_succeeded
          example: capture_succeeded
          type: string
        instrument_type:
          description: The type of instrument used for this transaction.
          enum:
          - pan
          - card_token
          - redirect
          - redirect_token
          - googlepay
          - applepay
          - network_token
          example: pan
          nullable: true
          type: string
        retry_rule:
          deprecated: true
          description: This will always be `null` because the transaction succeeded.
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          example: match
          nullable: true
          type: string
        payment_method_scheme:
          description: The card scheme sent to the connector.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionCaptureDeclinedEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        code:
          description: A raw response code returned for the failure.
          example: INVALID DATA
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          example: match
          nullable: true
          type: string
        payment_method_scheme:
          description: The card scheme sent to the connector.
          enum:
          - accel
          - amex
          - bancontact
          - carte-bancaire
          - cirrus
          - culiance
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - hipercard
          - jcb
          - maestro
          - mastercard
          - nyce
          - other
          - pulse
          - rupay
          - star
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionVoidSucceededEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        voided_at:
          description: The date and time when this transaction was voided.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      type: object
    PaymentConnectorResponseTransactionVoidDeclinedEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
        payment_service_transaction_id:
          description: The external ID of the transaction as set by the payment service.
          example: transaction-1234
          nullable: true
          type: string
        code:
          description: A raw response code returned for the failure.
          example: INVALID DATA
          nullable: true
          type: string
      type: object
    PaymentConnectorResponseTransactionVoidFailedEvent_context:
      description: Additional context for this event.
      properties:
        payment_service_id:
          description: The unique ID of the payment service used.
          format: uuid
          type: string
        payment_service_display_name:
          description: The display name of the payment service used.
          type: string
        payment_service_definition_id:
          description: The payment service definition used.
          type: string
      type: object
    PaymentConnectorExternalTransactionRequest_context:
      description: Additional context for the transaction.
      properties:
        connector_request_id:
          description: The connector request id.
          example: 76f5ed52-8675-491f-b52d-731ca894ed80
          type: string
        request:
          description: The request.
          example: ""
          nullable: true
          type: string
        response:
          description: The response.
          nullable: true
          type: string
        payment_service_definition_id:
          description: The payment service definition id.
          nullable: true
          type: string
        success:
          description: Whether the transaction was successful.
          nullable: true
          type: boolean
        payment_service_id:
          description: The payment service id.
          nullable: true
          type: string
        response_status_code:
          description: The response status code.
          nullable: true
          type: string
        payment_service_display_name:
          description: The payment service display name.
          nullable: true
          type: string
        method:
          description: The HTTP method.
          nullable: true
          type: string
        url:
          description: The endpoint for the request.
          nullable: true
          type: string
      type: object
    PaymentServiceRequest_fields:
      description: A key-value pair that represents a field defined in the definition
        for this payment service.
      example:
        value: sk_test_26PHem9AhJZvU623DfE1x4sd
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set; you can unset optional fields
            by setting this to an empty string `""`.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 0
          type: string
      required:
      - key
      - value
      type: object
    PaymentServiceDefinition_supported_features:
      description: Features supported by the payment definition.
      example:
        requires_webhook_setup: true
        network_tokens_toggle: false
        payment_method_tokenization: true
        void: true
        digital_wallets: false
        payment_method_tokenization_toggle: false
        refunds: true
        delayed_capture: false
        three_d_secure_hosted: true
        open_loop_toggle: false
        network_tokens_default: true
        three_d_secure_pass_through: false
        open_loop: true
        partial_refunds: false
        verify_credentials: false
      properties:
        delayed_capture:
          description: |-
            Supports [capturing](#operation/capture-transaction) authorized
            transactions.
          example: false
          type: boolean
        digital_wallets:
          description: |-
            Supports passing decrypted digital wallet (e.g. Apple Pay)
            tokens to the underlying processor.
          example: false
          type: boolean
        network_tokens_default:
          description: Supports processing network tokens by default.
          example: true
          type: boolean
        network_tokens_toggle:
          description: Supports toggling processing of network tokens on or off.
          example: false
          type: boolean
        open_loop:
          description: |-
            Supports processing transactions with either raw PAN details or
            network tokens.
          example: true
          type: boolean
        open_loop_toggle:
          description: Supports toggling processing as open-loop on or off.
          example: false
          type: boolean
        partial_refunds:
          description: |-
            Supports [partially refunding](#operation/refund-transaction) captured
            transactions.
          example: false
          type: boolean
        payment_method_tokenization:
          description: Supports storing a payment method via tokenization.
          example: true
          type: boolean
        payment_method_tokenization_toggle:
          description: |-
            Supports toggling tokenization for a payment method on or off
            from the dashboard.
          example: false
          type: boolean
        refunds:
          description: |-
            Supports [refunding](#operation/refund-transaction) captured
            transactions.
          example: true
          type: boolean
        requires_webhook_setup:
          description: Requires merchant to set up `webhook_url` manually with provider.
          example: true
          type: boolean
        three_d_secure_hosted:
          description: Supports hosted 3-D Secure with a redirect.
          example: true
          type: boolean
        three_d_secure_pass_through:
          description: Supports passing 3-D Secure data to the underlying processor.
          example: false
          type: boolean
        verify_credentials:
          description: |-
            Supports verifying the credentials entered while setting up the
            underlying processor. This is for internal use only.
          example: false
          type: boolean
        void:
          description: |-
            Supports [voiding](#operation/void-transaction) authorized
            transactions.
          example: true
          type: boolean
      type: object
    PaymentOption_context:
      description: |-
        Additional context specific to the payment option.
        This is currently only returned for Apple Pay and Google Pay.
      example:
        required_fields:
          email_address: true
          address:
            country: true
            city: true
            state: true
            postal_code: true
            line1: true
            house_number_or_name: true
          last_name: true
          phone_number: true
          first_name: true
          tax_id: true
        gateway_merchant_id: gateway_merchant_id
        approval_ui:
          width: 300px
          height: 300px
        merchant_name: merchant_name
        supported_schemes:
        - null
        - null
        gateway: gateway
      properties:
        gateway:
          description: Gateway used for Google Pay payments.
          type: string
        gateway_merchant_id:
          description: Gateway merchant identifier used for Google Pay payments.
          type: string
        merchant_name:
          description: |-
            Display name of the merchant as registered with the digital wallet
            provider.
          type: string
        supported_schemes:
          description: Card schemes supported by the digital wallet provider.
          items:
            $ref: '#/components/schemas/PaymentOptionCardScheme'
          type: array
        approval_ui:
          $ref: '#/components/schemas/PaymentOptionApprovalUI'
        required_fields:
          $ref: '#/components/schemas/RequiredFields'
      type: object
    ReportExecutionSummary_context:
      description: |-
        Contains the context values used to compute the value of date-time
        placeholders such as `month_start` and `month_end` if present in
        the report's specification. Date-time placeholders are dynamic
        timestamps that change with every report execution.
      properties:
        reference_timestamp:
          description: |-
            The date and time used by the system as a reference point to
            compute date-time placeholders.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        reference_timezone:
          description: The time zone used to compute date-time placeholders.
          example: Europe/London
          type: string
      type: object
    RoleAssignment_assignee:
      description: The assignee for this role assignment.
      example:
        id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
        type: user
      properties:
        type:
          description: The type of the assignee.
          enum:
          - user
          example: user
          type: string
        id:
          description: The unique ID of the assignee.
          example: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          format: uuid
          type: string
      type: object
    RoleAssignmentRequest_role:
      description: The role to associate with the role assignment.
      example:
        id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
      properties:
        id:
          description: The ID of the role to associate with the role assignment.
          example: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          format: uuid
          type: string
      required:
      - id
      type: object
    RoleAssignmentRequest_assignee:
      description: The assignee to associate with the role assignment.
      example:
        id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
        type: user
      properties:
        type:
          description: The type of the assignee to associate with the role assignment.
          enum:
          - user
          example: user
          type: string
        id:
          description: The ID of the assignee to associate with the role assignment.
          example: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          format: uuid
          type: string
      required:
      - id
      - type
      type: object
    ThreeDSecureDataV1_allOf:
      properties:
        authentication_response:
          description: The response for the 3DS authentication call.
          example: "Y"
          maxLength: 1
          type: string
        cavv_algorithm:
          description: The CAVV algorithm used.
          maxLength: 1
          type: string
        xid:
          description: The transaction identifier.
          type: string
      required:
      - authentication_response
      - cavv_algorithm
      - xid
    ThreeDSecureDataV2_allOf:
      properties:
        authentication_response:
          description: |-
            The transaction status after a the 3DS challenge. This will
            be null in case of a frictionless 3DS flow.
          enum:
          - "Y"
          - A
          - "N"
          - R
          - U
          example: "Y"
          maxLength: 1
          nullable: true
          type: string
        directory_response:
          description: The transaction status received as part of the authentication
            request.
          enum:
          - C
          - "Y"
          - A
          - "N"
          - R
          - U
          example: C
          maxLength: 1
          type: string
        directory_transaction_id:
          description: The transaction identifier.
          example: c4e59ceb-a382-4d6a-bc87-385d591fa09d
          type: string
      required:
      - directory_transaction_id
    ThreeDSecureAuthenticationRequestEvent_context:
      description: 3DS authentication context.
      properties:
        url:
          description: The URL that was called for this request.
          example: https://3dserver.example/auth
          type: string
        request:
          description: The request body sent to the `url`.
          example: '{}'
          type: string
        response:
          description: The response body received from the `url`.
          example: '{}'
          type: string
        response_status_code:
          description: The response status code received from the `url`.
          example: 200
          type: integer
        cavv:
          description: The 3DS CAVV value parsed from the `response`.
          example: +9YDsoSIbiEgO+PFMdgGSF17Uqk=
          type: string
        eci:
          description: The 3DS ECI value parsed from the `response`.
          example: "05"
          type: string
        directory_response:
          description: The `transStatus` parsed from the `response`.
          example: C
          type: string
        directory_transaction_id:
          description: The `dsTransID` parsed from the `response`.
          example: 8875884a-ac2f-42cb-b3f0-09b3ea3c0042
          type: string
        version:
          description: The version of 3DS used.
          example: 2.2.0
          type: string
      type: object
    ThreeDSecurePreparationRequestEvent_context:
      description: 3DS pre-authentication context.
      properties:
        url:
          description: The URL that was called for this request.
          example: https://3dserver.example/auth
          type: string
        request:
          description: The request body sent to the `url`.
          example: '{}'
          type: string
        response:
          description: The response body received from the `url`.
          example: '{}'
          type: string
        response_status_code:
          description: The response status code received from the `url`.
          example: 200
          type: integer
        is_enrolled:
          description: If the card is enrolled for 3DS.
          example: true
          type: boolean
        version:
          description: The version of 3DS extracted from the `response.
          example: 2.2.0
          type: string
      type: object
    ThreeDSecureResultRequestEvent_context:
      description: 3DS post-authentication context.
      properties:
        url:
          description: The URL that was called for this request.
          example: https://3dserver.example/auth
          type: string
        request:
          description: The request body sent to the `url`.
          example: '{}'
          type: string
        response:
          description: The response body received from the `url`.
          example: '{}'
          type: string
        response_status_code:
          description: The response status code received from the `url`.
          example: 200
          type: integer
        cavv:
          description: The 3DS CAVV value parsed from the `response`.
          example: +9YDsoSIbiEgO+PFMdgGSF17Uqk=
          type: string
        eci:
          description: The 3DS ECI value parsed from the `response`.
          example: "05"
          type: string
        authentication_response:
          description: The `transStatus` parsed from the post-authorization `response`.
          example: C
          type: string
        directory_response:
          description: The `transStatus` parsed from the authorization `response`.
          example: C
          type: string
        directory_transaction_id:
          description: The `dsTransID` parsed from the `response`.
          example: 8875884a-ac2f-42cb-b3f0-09b3ea3c0042
          type: string
        version:
          description: The version of 3DS used.
          example: 2.2.0
          type: string
      type: object
    ThreeDSecureRequestErrorEvent_context:
      description: 3DS post-authentication context.
      properties:
        url:
          description: The URL that was called for this request.
          example: https://3dserver.example/auth
          type: string
        reason:
          description: The reason for the error.
          example: TIMEOUT
          type: string
      type: object
    ThreeDSecureSuccessEvent_context:
      description: 3DS context.
      properties:
        eci:
          description: The electronic commerce indicator for the 3DS transaction.
          example: "05"
          maxLength: 2
          minLength: 1
          pattern: ^0?\d$
          type: string
        cavv:
          description: The cardholder authentication value or AAV.
          example: 3q2+78r+ur7erb7vyv66vv8=
          type: string
        version:
          description: The version of 3-D Secure that was used.
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        directory_response:
          description: For 3-D Secure version 1, the enrolment response. For 3-D Secure
            version , the transaction status from the `ARes`.
          example: C
          maxLength: 1
          type: string
        authentication_response:
          description: The transaction status from the challenge result (not required
            for frictionless).
          example: "Y"
          maxLength: 1
          nullable: true
          type: string
        directory_transaction_id:
          description: The transaction identifier.
          example: c4e59ceb-a382-4d6a-bc87-385d591fa09d
          nullable: true
          type: string
        cavv_algorithm:
          description: The CAVV Algorithm used.
          maxLength: 1
          nullable: true
          type: string
        method:
          description: The method used for 3DS authentication for this transaction.
          enum:
          - challenge
          - frictionless
          nullable: true
          type: string
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
