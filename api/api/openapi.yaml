openapi: 3.0.0
info:
  contact:
    email: code@gr4vy.com
    name: Gr4vy Support
    url: https://gr4vy.com
  description: |-
    Welcome to the Gr4vy API reference documentation.
    Our API is still very much a work in product and subject to change.
  license:
    name: MIT
    url: https://raw.githubusercontent.com/gr4vy/gr4vy-openapi/main/LICENSE
  termsOfService: https://gr4vy.com
  title: Gr4vy API
  version: 1.1.0-beta
servers:
- url: https://api.{gr4vy_id}.gr4vy.app
  variables:
    gr4vy_id:
      default: plantly
      description: The subdomain for your Gr4vy instance.
security:
- BearerAuth: []
tags:
- description: Audit Logs provide an historic record of changes made to your Gr4vy
    instance.
  name: Audit Logs
- description: |-
    In Gr4vy, a buyer represents your customer, the shopper who's performing
    a checkout and making a purchase.

    A buyer can be used by you to:

    * Display a human readable name (`display_name`) for a buyer in the Gr4vy
    admin panel
    * Associate multiple stored payment methods with a single user
    * Initialize **Gr4vy Embed** with the buyer ID, automatically displaying the
      buyer's previously stored payment methods, allowing for faster checkout.
  name: Buyers
- description: Card Scheme definitions provide display information to a card scheme.
  name: Card Scheme Definitions
- description: |-
    A Checkout Session represents the session of a user as they progress
    through an online checkout.
  name: Checkout Sessions
- description: |-
    In Gr4vy, a digital wallet represents a way for a buyer to pay using
    card details already stored on their device via a digital wallet service
    such as Apple Pay or Google Pay. The buyer will not have to fill in their
    card details on checkout.

    The digital wallets API can be used to:

    * Register with a digital wallet provider.
    * List digital wallets currently registered.
  name: Digital Wallets
- description: |-
    In Gr4vy, a merchant account represents an individual merchant in an
    instance. Each instance has one or more merchant accounts, and each
    merchant account has its own connections, Flow rules, transactions, and
    more.
  name: Merchant Accounts
- description: |-
    In Gr4vy, a payment method token represents the token created by a payment
    service for a payment method.

    The payment method token API can be used to:

    * List all the available tokens for a payment method
    * Use these tokens to make direct API calls to that payment service,
    without the need to go through Gr4vy.
  name: Payment Method Tokens
- description: |-
    In Gr4vy, a payment method represents a way in which a payment can be
    processed, for example a card, a PayPal account, or a bank account.

    The payment method API can be used to:

    * List all the available payment methods
    * Filter the available payment method for a buyer in a specific currency
    and country.
    * Store (also known as vault) a payment method for a buyer.
    * Fetch all previously stored payment methods for a buyer.
  name: Payment Methods
- description: Payment Method definitions provide display information to a payment
    method.
  name: Payment Method Definitions
- description: |-
    In Gr4vy, a payment option represents a list of methods (card, PayPal,
    etc) that are available for a given locale.

    The payment options API can be used to:

    * Determine what types of payments can be processed in a specific locale.
    * Display a list options to a buyer to choose from.
  name: Payment Options
- description: |-
    Payment service definitions describe the fields required for a payment
    service to be configured.
  name: Payment Service Definitions
- description: |-
    In Gr4vy, a payment service represents a configured payment provider
    (Stripe, PayPal, Adyen, etc) for a specific payment type (card, bitcoin,
    etc)

    The payment services API can be used to:

    * Provide Gr4vy with the payment credentials for a payment provider.
    * Set a display name for a payment provider.
  name: Payment Services
- description: |-
    In Gr4vy, a report represents the configuration details to extract or
    dump a set of data into a downloadable CSV file. The data extracted
    by a report is configured via the reports API where you can specify:

    * Which fields should be in the dataset.
    * How the dataset should be sorted.
    * How the dataset should be filtered.

    Once a report is created, it may be executed on a one-off or recurring
    basis. One-off reports are executed only once shortly after the report
    is created, while recurring reports are executed periodically based on
    its configured frequency, e.g. weekly or monthly.

    During a report execution, the data is extracted and loaded into
    a CSV file according to the report's configuration. The resulting file
    may then be downloaded.

    The reports API can be used to:

    * Create and configure new reports.
    * List all reports.
    * View the configuration details of a report.
    * List a report's executions.
    * Reconfigure an existing report.
    * Generate a temporary URL to download the result of a report execution
    in CSV format.
  name: Reports
- description: |-
    In Gr4vy, a transaction represents a payment in any state, either before it
    is authorized, once it is captured, or after it has been refunded.

    The transactions API can be used to:

    - Authorize, capture, and store cards.
    - Authorize, capture, and store alternative payment methods like PayPal.
    - Refund, void, and otherwise cancel existing transactions.
  name: Transactions
- description: |-
    In Gr4vy, users can be granted access to specific types of resources and permissions
    to perform certain actions by being assigned one or more roles.
  name: Roles
paths:
  /api-logs:
    get:
      description: Returns a list of API 4XX and 5XX logs.
      operationId: list-api-logs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLogs'
          description: Returns a list of API logs.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List API error Logs
      tags:
      - API Logs
  /audit-logs:
    get:
      description: Returns a list of audit logs.
      operationId: list-audit-logs
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `user` has an
          `id` that matches this value.
        explode: true
        in: query
        name: user_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `audit-log` has an
          `action` that matches this value.
        explode: true
        in: query
        name: action
        required: false
        schema:
          enum:
          - created
          - updated
          - deleted
          example: created
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `audit-log` has a
          `resource` that matches this type value.
        explode: true
        in: query
        name: resource_type
        required: false
        schema:
          example: buyer
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogs'
          description: Returns a list of audit logs.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List Audit Logs
      tags:
      - Audit Logs
  /buyers:
    get:
      description: Returns a list of buyers.
      operationId: list-buyers
      parameters:
      - description: |-
          Filters the results to only the buyers for which the `display_name` or
          `external_identifier` matches this value. This field allows for a partial
          match, matching any buyer for which either of the fields partially or
          completely matches.
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: John
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyers'
          description: Returns a list of buyers.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List buyers
      tags:
      - Buyers
    post:
      description: |
        Adds a buyer, allowing for payment methods and transactions to be associated
        to this buyer.
      operationId: add-buyer
      requestBody:
        content:
          application/json:
            examples:
              Create a buyer:
                value:
                  external_identifier: "412231123"
                  display_name: John L.
            schema:
              $ref: '#/components/schemas/BuyerRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the buyer that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New buyer
      tags:
      - Buyers
  /buyers/{buyer_id}:
    delete:
      description: |-
        Deletes a buyer record. Any associated stored payment methods will remain
        in the system but no longer associated to the buyer.
      operationId: delete-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete buyer
      tags:
      - Buyers
    get:
      description: Gets the information about a buyer.
      operationId: get-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the information about a buyer.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get buyer
      tags:
      - Buyers
    put:
      description: |
        Updates a buyer's details.
      operationId: update-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update a buyer:
                value:
                  external_identifier: "42623266"
                  display_name: John D.
            schema:
              $ref: '#/components/schemas/BuyerUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the updated buyer record.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: Update buyer
      tags:
      - Buyers
  /buyers/{buyer_id}/shipping-details:
    get:
      description: Retrieve all shipping details for a buyer.
      operationId: get-buyer-shipping-details
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetails'
          description: Returns all associated shipping details.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get buyer shipping details
      tags:
      - Buyers
    post:
      description: Adds a buyer shipping detail.
      operationId: add-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDetailRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetail'
          description: Returns the shipping detail that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New buyer shipping detail
      tags:
      - Buyers
  /buyers/{buyer_id}/shipping-details/{shipping_detail_id}:
    delete:
      description: Deletes a buyer shipping detail.
      operationId: delete-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a buyer's shipping detail.
        explode: false
        in: path
        name: shipping_detail_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete buyer shipping detail
      tags:
      - Buyers
    put:
      description: Updates a shipping detail for a buyer.
      operationId: update-buyer-shipping-detail
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a buyer's shipping detail.
        explode: false
        in: path
        name: shipping_detail_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShippingDetailUpdateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShippingDetail'
          description: Returns the updated shipping detail.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update buyer shipping detail
      tags:
      - Buyers
  /buyers/payment-methods:
    get:
      description: |-
        Returns a list of stored payment methods for a buyer in a summarized format.
        Only payment methods that are compatible with at least one active payment
        service in that region are shown.
      operationId: list-buyer-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods--Tokenized'
          description: |-
            Returns a list of available payment methods for a buyer, filtered by the
            given currency and country code.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List stored payment methods for a buyer
      tags:
      - Payment Methods
  /card-scheme-definitions:
    get:
      description: Returns a list of all available card scheme definitions.
      operationId: list-card-scheme-definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardSchemeDefinitions'
          description: Returns a list of card scheme definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List card scheme definitions
      tags:
      - Card Scheme Definitions
  /checkout/sessions:
    post:
      description: Creates a new Checkout Session.
      operationId: add-checkout-session
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
          description: Returns the new Checkout Session.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Create a new Checkout Session
      tags:
      - Checkout Sessions
  /checkout/sessions/{checkout_session_id}:
    delete:
      description: Deletes a Checkout Session.
      operationId: delete-checkout-session
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the Checkout Session can not be found or
            has expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Delete a Checkout Session
      tags:
      - Checkout Sessions
    get:
      description: Gets details about a current Checkout Session.
      operationId: get-checkout-session
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutSession'
          description: Returns details about a current Checkout Session.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the Checkout Session can not be found or
            has expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get a Checkout Session
      tags:
      - Checkout Sessions
  /checkout/sessions/{checkout_session_id}/fields:
    put:
      description: |-
        Updates the Secure Fields of the Checkout Session. Once the fields have
        been received the `expires_at` will be updated to 5 minutes from the time
        of receipt.
      operationId: update-checkout-session-fields
      parameters:
      - description: The unique ID for a Checkout Session.
        explode: false
        in: path
        name: checkout_session_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutSessionSecureFieldsUpdate'
      responses:
        "204":
          description: Returns when the Checkout Session was updated.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the Checkout Session can not be found or
            has expired.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Update a Checkout Session's Secure Fields
      tags:
      - Checkout Sessions
  /payment-methods:
    get:
      description: Returns a list of stored payment methods.
      operationId: list-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the payment methods for which the `status`
          matches this value.
        explode: true
        in: query
        name: status
        required: false
        schema:
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods'
          description: Returns a list of payment methods.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment methods
      tags:
      - Payment Methods
    post:
      description: |
        Stores and vaults a new payment method.

        Vaulting a card only stores its information but doesn't validate it against any
        PSP. In order to do so, a CIT (Customer Initiated Transaction) must be done,
        even if it's a zero-value one.
      operationId: store-payment-method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns the created payment method.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New payment method
      tags:
      - Payment Methods
  /payment-methods/{payment_method_id}:
    delete:
      description: Removes a stored payment method.
      operationId: delete-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment method
      tags:
      - Payment Methods
    get:
      description: Gets the details for a stored payment method.
      operationId: get-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns a payment method.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get stored payment method
      tags:
      - Payment Methods
  /payment-method-definitions:
    get:
      description: Returns a list of all available payment method definitions.
      operationId: list-payment-method-definitions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodDefinitions'
          description: Returns a list of payment method definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment method definitions
      tags:
      - Payment Method Definitions
  /payment-options:
    get:
      description: |-
        Returns a list of available payment method options for the combination of
        amount, currency, country and metadata.

        If the amount is zero, payment options which do not support zero amounts,
        will be omitted in the response.

        If you want to use Flow rules,
        please use the [post endpoint](#operation/post-list-payment-options).
      operationId: list-payment-options
      parameters:
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      - description: Used by the Flow engine to filter the results based on the transaction
          amount.
        explode: true
        in: query
        name: amount
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Used by the Flow engine to filter available options based on various
          client-defined parameters. If present, this must be a string representing
          a valid JSON dictionary.
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          example: '{"restricted_items": "True"}'
          type: string
        style: form
      - description: |-
          An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
          determines the language for the labels returned for every payment option.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en
          example: en-US
          pattern: ^[a-z]{2}(?:-[A-Z]{2})?$
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptions'
          description: |-
            Returns a list of available payment options for the given query
            parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: Returns an error if  any of the query parameters are not recognised.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment options
      tags:
      - Payment Options
    post:
      description: |-
        Returns a list of available payment method options for the combination of
        amount, currency, country, metadata and list of cart items.

        If the amount is zero, payment options which do not support zero amounts,
        will be omitted in the response.
      operationId: post-list-payment-options
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentOptionsRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptions'
          description: |-
            Returns a list of available payment options for the given query
            parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment options
      tags:
      - Payment Options
  /payment-services:
    get:
      description: Lists the currently configured and activated payment services.
      operationId: list-payment-services
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `method` has been set to
          this value.
        explode: true
        in: query
        name: method
        required: false
        schema:
          enum:
          - afterpay
          - applepay
          - banked
          - bitpay
          - boleto
          - card
          - clearpay
          - dana
          - fortumo
          - gcash
          - gocardless
          - googlepay
          - grabpay
          - klarna
          - ovo
          - paymaya
          - paypal
          - pix
          - rabbitlinepay
          - scalapay
          - shopeepay
          - stripedd
          - truemoney
          - trustly
          - zippay
          example: card
          type: string
        style: form
      - description: |-
          Filters the results to only show items which have been deleted.
          By default, deleted items will not be returned.
        explode: true
        in: query
        name: deleted
        required: false
        schema:
          default: false
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
          description: Returns a list of payment services.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment services
      tags:
      - Payment Services
    post:
      description: Adds a new payment service by providing a custom name and a value
        for each of the required fields.
      operationId: add-payment-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceRequest'
      responses:
        "201":
          content:
            application/json:
              examples:
                Stripe:
                  value:
                    id: faaad066-30b4-4997-a438-242b0752d7e1
                    type: payment-service
                    payment_service_definition_id: stripe
                    method: card
                    display_name: Stripe
                    status: pending
                    accepted_currencies:
                    - EUR
                    accepted_countries:
                    - DE
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the created payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New payment service
      tags:
      - Payment Services
  /payment-services/{payment_service_id}:
    delete:
      description: Deletes a specific active payment service.
      operationId: delete-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment service
      tags:
      - Payment Services
    get:
      description: Retrieves the details of a single configured payment service.
      operationId: get-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns a payment service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service
      tags:
      - Payment Services
    put:
      description: Updates an existing payment service. Allows all fields to be changed
        except for the service ID.
      operationId: update-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceUpdate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the updated payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update payment service
      tags:
      - Payment Services
  /payment-service-definitions:
    get:
      description: Returns a list of all available payment service definitions.
      operationId: list-payment-service-definitions
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinitions'
          description: Returns a list of payment service definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment service definitions
      tags:
      - Payment Service Definitions
  /payment-service-definitions/{payment_service_definition_id}:
    get:
      description: Gets the definition for a payment service.
      operationId: get-payment-service-definition
      parameters:
      - description: The unique ID of the payment service definition.
        explode: false
        in: path
        name: payment_service_definition_id
        required: true
        schema:
          example: stripe-card
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinition'
          description: Returns a payment service definition.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service definition
      tags:
      - Payment Service Definitions
  /digital-wallets:
    get:
      description: Returns a list of all registered digital wallets.
      operationId: list-digital-wallets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallets'
          description: Returns a list of registered digital wallets.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List digital wallets
      tags:
      - Digital Wallets
    post:
      description: Register with a digital wallet provider.
      operationId: register-digital-wallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the newly registered digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: Register digital wallet
      tags:
      - Digital Wallets
  /digital-wallets/{digital_wallet_id}:
    delete:
      description: |-
        De-registers a digital wallet with a provider. Upon successful
        de-registration, the digital wallet's record is deleted and will no
        longer be available.

        A digital wallet of the `apple` provider may only be de-registered if
        there are no `active` Apple Pay certificates. When there are only
        `incomplete` or `expired` Apple Pay certificates, these certificates
        are deleted alongside the `apple` digital wallet's record.
      operationId: deregister-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: De-register digital wallet
      tags:
      - Digital Wallets
    get:
      description: Returns a registered digital wallet.
      operationId: get-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns a registered digital wallet.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get digital wallet
      tags:
      - Digital Wallets
    put:
      description: Updates the values a digital wallet was registered with.
      operationId: update-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the updated digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update digital wallet
      tags:
      - Digital Wallets
  /transactions:
    get:
      description: Lists all transactions for an account. Sorted by last `updated_at`
        status.
      operationId: list-transactions
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          equal to the provided `amount_eq` value.
        explode: true
        in: query
        name: amount_eq
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          greater than or equal to the `amount_gte` value.
        explode: true
        in: query
        name: amount_gte
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Filters for transactions that have an `amount` that is
          less than or equal to the `amount_lte` value.
        explode: true
        in: query
        name: amount_lte
        required: false
        schema:
          example: 500
          type: integer
        style: form
      - description: |-
          Filters the results to only transactions created after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_gte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filters the results to only transactions created before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_lte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filters for transactions that have matching `currency` values.
          The `currency` values provided must be formatted as 3-letter ISO
          currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example:
          - USD
          - GBP
          items:
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only the items for which the `external_identifier`
          matches this value.
        explode: true
        in: query
        name: external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          When set to `true`, filter for transactions that have at least one completed
          refund associated with it. When set to `false`, filter for transactions
          that have no completed refunds.
        explode: true
        in: query
        name: has_refunds
        required: false
        schema:
          example: true
          type: boolean
        style: form
      - description: Filters for the transaction that has a matching `id` value.
        explode: true
        in: query
        name: id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: |-
          Filters for transactions where their `metadata` values
          contain all of the provided `metadata` keys. The value sent
          for `metadata` must be formatted as a JSON string, and all
          keys and values must be strings. This value should also be URL
          encoded.

          Duplicate keys are not supported. If a key is duplicated, only the
          last appearing value will be used.
        explode: true
        in: query
        name: metadata
        required: false
        schema:
          example:
          - '{"key": "value"}'
          - '{"key_one": "value", "key_two": "value"}'
          items:
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only the items for which the `method` has been set to
          this value.
        explode: true
        in: query
        name: method
        required: false
        schema:
          items:
            enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          type: array
        style: form
      - description: The ID of the payment method.
        explode: true
        in: query
        name: payment_method_id
        required: false
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: form
      - description: |-
          Filters for transactions that have a payment method with a label
          that matches exactly with the provided value.
        explode: true
        in: query
        name: payment_method_label
        required: false
        schema:
          example: "1234"
          type: string
        style: form
      - description: |-
          Filters for transactions that were processed by the provided
          `payment_service_id` values.
        explode: true
        in: query
        name: payment_service_id
        required: false
        schema:
          example:
          - 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          items:
            format: uuid
            type: string
          type: array
        style: form
      - description: |-
          Filters for transactions that have a matching
          `payment_service_transaction_id` value. The `payment_service_transaction_id`
          is the identifier of the transaction given by the payment service.
        explode: true
        in: query
        name: payment_service_transaction_id
        required: false
        schema:
          example: transaction_123
          type: string
        style: form
      - description: |-
          Filters for transactions that have one of the following fields
          match exactly with the provided `search` value:
          * `buyer_external_identifier`
          * `buyer_id`
          * `external_identifier`
          * `id`
          * `payment_service_transaction_id`
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          type: string
        style: form
      - description: |-
          Filters the results to only the transactions that have a `status`
          that matches with any of the provided status values.
        explode: true
        in: query
        name: status
        required: false
        schema:
          example:
          - capture_succeeded
          - processing
          items:
            enum:
            - processing
            - buyer_approval_pending
            - authorization_succeeded
            - authorization_failed
            - authorization_declined
            - capture_pending
            - capture_succeeded
            - authorization_void_pending
            - authorization_voided
            type: string
          type: array
        style: form
      - description: |-
          Filters the results to only transactions last updated after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: updated_at_gte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filters the results to only transactions last updated before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: updated_at_lte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: |-
          Filters the results to only transactions created before this ISO date-time
          string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.

          **WARNING** This filter is deprecated and may be removed eventually, use
          `created_at_lte` instead.
        explode: true
        in: query
        name: before_created_at
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: |-
          Filters the results to only transactions created after this ISO date-time
          string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.

          **WARNING** This filter is deprecated and may be removed eventually, use
          `created_at_gte` instead.
        explode: true
        in: query
        name: after_created_at
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: |-
          Filters the results to only transactions last updated before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.

          **WARNING** This filter is deprecated and may be removed eventually, use
          `updated_at_lte` instead.
        explode: true
        in: query
        name: before_updated_at
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: |-
          Filters the results to only transactions last updated after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.

          **WARNING** This filter is deprecated and may be removed eventually, use
          `updated_at_gte` instead.
        explode: true
        in: query
        name: after_updated_at
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - deprecated: true
        description: |-
          Filters the results to only the transactions for which the `status`
          matches this value.

          **WARNING** This filter is deprecated and may be removed eventually, use
          `status` instead.
        explode: true
        in: query
        name: transaction_status
        required: false
        schema:
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: capture_succeeded
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
          description: Returns a paginated list of transactions for an account.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List transactions
      tags:
      - Transactions
    post:
      description: |
        Attempts to create an authorization for a payment method. In some cases it is
        not possible to create the authorization without redirecting the user for
        their authorization. In these cases the status is set to
        `buyer_approval_pending` and an `approval_url` is returned.

        Additionally, this endpoint accepts a few additional fields that allow for
        simultaneous capturing and storage of the payment method.

        * `store` - Use this field to store the payment method for
        future use. Not all payment methods support this feature.
        * `capture` - Use this method to also perform a capture of the transaction
        after it has been authorized.
      operationId: authorize-new-transaction
      parameters:
      - description: |-
          A unique key that identifies this request. Providing this header will make
          this an idempotent request. We recommend using V4 UUIDs, or another random
          string with enough entropy to avoid collisions. See the
          [documentation](https://docs.gr4vy.com/idempotent-requests) for more
          information.
        explode: false
        in: header
        name: Idempotency-Key
        required: false
        schema:
          example: bffa9ce6-7a8a-449c-889a-65bd2ee86903
          maxLength: 255
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Authorize a new card:
                value:
                  amount: 1299
                  currency: USD
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize and store a card:
                value:
                  amount: 1299
                  currency: USD
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize, capture, and store a card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize and capture a GoCardless transaction:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: gocardless
                    redirect_url: https://example.com/callback
                    country: US
                    currency: USD
              Authorize and capture using a previously stored card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: id
                    id: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
              Authorize a new card with connection options:
                value:
                  amount: 1299
                  currency: USD
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
                  connection_options:
                    cybersource-anti-fraud:
                      device_fingerprint_id: yGeBAFYgFmM=
                      merchant_defined_data:
                        field1: value1
                        field2: value2
              Authorize and asynchronously capture a card transaction:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  async_capture: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the created transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New transaction
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: Get information about a transaction.
      operationId: get-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns a transaction resource.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Get transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/capture:
    post:
      description: Captures a previously authorized transaction.
      operationId: capture-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Capture an authorization:
                value:
                  amount: 1299
            schema:
              $ref: '#/components/schemas/TransactionCaptureRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the captured transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Capture transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refunds:
    get:
      description: Lists all refunds associated with a certain transaction.
      operationId: list-transaction-refunds
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refunds'
          description: Returns a list of refunds.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List transaction refunds
      tags:
      - Transactions
    post:
      description: |-
        Refunds a transaction, fully or partially.

        If the transaction was not yet successfully captured, the
        refund will not be processed. Authorized transactions can be
        [voided](#operation/void-transaction) instead.
      operationId: refund-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Request a full refund on a transaction:
                value: {}
              Request a partial refund on a transaction:
                value:
                  amount: 1299
            schema:
              $ref: '#/components/schemas/TransactionRefundRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: Returns the created refund.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Refund transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refunds/{refund_id}:
    get:
      description: Gets information about a refund associated with a certain transaction.
      operationId: get-transaction-refund
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      - description: The unique ID of the refund.
        explode: false
        in: path
        name: refund_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
          description: Returns a refund.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get transaction refund
      tags:
      - Transactions
  /transactions/{transaction_id}/void:
    post:
      description: |-
        Voids a transaction.

        If the transaction was not yet successfully authorized, or was already
        captured, the void will not be processed. Captured transactions can be
        [refunded](#operation/refund-transaction) instead.

        Voiding zero-amount authorized transactions is not supported.
      operationId: void-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the voided transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: |-
            Returns an error if the request was badly formatted or missing required
            fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Void transaction
      tags:
      - Transactions
  /report-executions:
    get:
      description: Returns a list of executions belonging to any report.
      operationId: list-all-report-executions
      parameters:
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters the results to report executions created after this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_gte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filters the results to report executions created before this ISO
          date-time string. The time zone must be included.

          Ensure that the date-time string is URL encoded, e.g.
          `2022-01-01T12:00:00+08:00` must be encoded as
          `2022-01-01T12%3A00%3A00%2B08%3A00`.
        explode: true
        in: query
        name: created_at_lte
        required: false
        schema:
          format: date-time
          type: string
        style: form
      - description: |-
          Filters for executions of reports that have a matching
          `name` value. This filter is case-insensitive.

          Ensure that when necessary, the value you pass for this
          filter is URL encoded.
        explode: true
        in: query
        name: report_name
        required: false
        schema:
          example: Failed+Authorizations+042022
          type: string
        style: form
      - description: |-
          Filters for report executions that have a matching `status` value.

          This filter accepts multiple values.
        explode: true
        in: query
        name: status
        required: false
        schema:
          example:
          - succeeded
          - failed
          items:
            enum:
            - dispatched
            - failed
            - pending
            - processing
            - succeeded
            example: succeeded
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutions'
          description: Returns a list of report executions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List all report executions
      tags:
      - Reports
  /report-executions/{report_execution_id}:
    get:
      description: Retrieves the details of a single report execution.
      operationId: get-report-execution
      parameters:
      - description: The unique ID for a report execution.
        explode: false
        in: path
        name: report_execution_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecution'
          description: Returns a report execution.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get report execution
      tags:
      - Reports
  /reports:
    get:
      description: Returns a list of reports.
      operationId: list-reports
      parameters:
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          Filters for reports that have a matching `name` value.
          This filter is case-insensitive.

          Ensure that when necessary, the value you pass for this
          filter is URL encoded.
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: Failed+Authorizations+042022
          type: string
        style: form
      - description: Filters for reports that have matching `schedule` values.
        explode: true
        in: query
        name: schedule
        required: false
        schema:
          example:
          - once
          - monthly
          items:
            enum:
            - daily
            - monthly
            - once
            - weekly
            type: string
          type: array
        style: form
      - description: Filters for reports that have a matching `schedule_enabled` value.
        explode: true
        in: query
        name: schedule_enabled
        required: false
        schema:
          example: true
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reports'
          description: Returns a list of reports.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List reports
      tags:
      - Reports
    post:
      description: |
        Adds a report.

        Documentation about reports models and how to write a valid specification
        can be found in [Reporting docs](/reporting/introduction).
      operationId: add-report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportCreate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns the report that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New report
      tags:
      - Reports
  /reports/{report_id}:
    get:
      description: Retrieves the details of a single report.
      operationId: get-report
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns a report.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get report
      tags:
      - Reports
    put:
      description: Updates a report.
      operationId: update-report
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
          description: Returns the updated report.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update report
      tags:
      - Reports
  /reports/{report_id}/executions:
    get:
      description: Returns a list of executions for a report.
      operationId: list-report-executions
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutions'
          description: Returns a list of executions for a report.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List executions for a report
      tags:
      - Reports
  /reports/{report_id}/executions/{report_execution_id}/url:
    post:
      description: |-
        Generates a temporary signed URL to download the result of a report
        execution.
      operationId: generate-download-url
      parameters:
      - description: The unique ID for a report.
        explode: false
        in: path
        name: report_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      - description: The unique ID for a report execution.
        explode: false
        in: path
        name: report_execution_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExecutionUrl'
          description: |-
            Returns the signed download URL of a report execution result and its
            expiration date and time.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Generate the download URL of a report execution result
      tags:
      - Reports
  /roles:
    get:
      description: Returns a list of roles.
      operationId: list-roles
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
          description: Returns a list of roles.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List roles
      tags:
      - Roles
  /roles/assignments:
    get:
      description: |-
        Returns a list of role assignments.

        Role assignments can be filtered for a given role by providing
        the `role_id` search parameter, or for a given assignee by providing
        both the `assignee_type` and `assignee_id` parameters.
      operationId: list-role-assignments
      parameters:
      - description: Filters for role assignments for the role that has a matching
          `id` value.
        explode: true
        in: query
        name: role_id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: Filters for role assignments for the assignee of the given type.
        explode: true
        in: query
        name: assignee_type
        required: false
        schema:
          enum:
          - user
          example: user
          type: string
        style: form
      - description: |-
          Filters for role assignments for the assignee that has a matching `id` value.
          The `assignee_type` must also be specified.
        explode: true
        in: query
        name: assignee_id
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          format: uuid
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignments'
          description: Returns a list of role assignments.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List role assignments
      tags:
      - Roles
    post:
      description: |
        Adds a role assignment, in effect applying a role to the given assignee.
      operationId: add-role-assignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
          description: Returns the role assignment that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New role assignment
      tags:
      - Roles
  /roles/assignments/{role_assignment_id}:
    delete:
      description: |-
        Deletes a role assignment. The associated assignee will no longer be
        assigned the role.
      operationId: delete-role-assignment
      parameters:
      - description: The unique ID for the role assignment.
        explode: false
        in: path
        name: role_assignment_id
        required: true
        schema:
          example: 1cdac457-400f-4866-8da6-5c193a8db158
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete role assignment
      tags:
      - Roles
  /merchant-accounts:
    get:
      description: Lists all merchant accounts in an instance.
      operationId: list-merchant-accounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantAccounts'
          description: Returns a paginated list of merchant accounts.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List merchant accounts
      tags:
      - Merchant Accounts
    post:
      description: Create a merchant account.
      operationId: create-merchant-account
      requestBody:
        content:
          application/json:
            examples:
              Create a merchant account:
                value:
                  display_name: Plantly UK
            schema:
              $ref: '#/components/schemas/MerchantAccountCreate'
      responses:
        "201":
          content:
            application/json:
              examples:
                Merchant Account:
                  value:
                    type: merchant-account
                    id: plantly_uk
                    display_name: Plantly UK
                    created_at: 2022-02-01T14:20:00.000+00:00
                    updated_at: 2022-02-01T14:20:00.000+00:00
              schema:
                $ref: '#/components/schemas/MerchantAccount'
          description: Returns the created merchant account.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: Create merchant account
      tags:
      - Merchant Accounts
  /merchant-accounts/{merchant_account_id}:
    delete:
      description: Deletes a specific merchant account.
      operationId: delete-merchant-accuont
      parameters:
      - description: The unique ID for a merchant account.
        explode: false
        in: path
        name: merchant_account_id
        required: true
        schema:
          example: plantly_uk
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete merchant account
      tags:
      - Merchant Accounts
components:
  schemas:
    Address:
      description: An address for the buyer.
      properties:
        city:
          description: The city for the address.
          example: London
          maxLength: 100
          minLength: 1
          nullable: true
          type: string
        country:
          description: The country for the address in ISO 3166 format.
          example: GB
          maxLength: 2
          minLength: 2
          nullable: true
          type: string
        postal_code:
          description: The postal code or zip code for the address.
          example: "789123"
          maxLength: 50
          minLength: 1
          nullable: true
          type: string
        state:
          description: The state, county, or province for the address.
          example: Greater London
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        state_code:
          description: |-
            The code of state, county, or province for the address in
            ISO 3166-2 format.
          example: GB-LND
          maxLength: 6
          minLength: 4
          nullable: true
          type: string
        house_number_or_name:
          description: |-
            The house number or name for the address. Not all payment
            services use this field but some do.
          example: "10"
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        line1:
          description: The first line of the address.
          example: 10 Oxford Street
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        line2:
          description: The second line of the address.
          example: New Oxford Court
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        organization:
          description: |-
            The optional name of the company or organisation to add
            to the address.
          example: Gr4vy
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
      title: Address
      type: object
      x-tags:
      - Buyers
    AntiFraudServiceCreate:
      allOf:
      - $ref: '#/components/schemas/AntiFraudServiceUpdate'
      description: A request to create an anti-fraud service.
      required:
      - anti_fraud_service_definition_id
      - display_name
      - fields
      title: Anti-Fraud Service (Create)
      type: object
      x-tags:
      - Anti-Fraud Services
    AntiFraudServiceUpdate:
      description: A request to update an anti-fraud service.
      properties:
        anti_fraud_service_definition_id:
          description: |-
            The name of the Anti-Fraud service provider.
            During update request, this value is used for validation only but
            the underlying service can not be changed for an existing service.
          enum:
          - sift-anti-fraud
          - cybersource-anti-fraud
          example: sift-anti-fraud
          type: string
        display_name:
          description: A unique name for this anti-fraud service which is used in
            the Gr4vy admin panel to give a anti-fraud Service a human readable name.
          example: Sift Anti-Fraud Service.
          maxLength: 200
          minLength: 1
          type: string
        active:
          default: true
          description: |-
            Defines if this service is currently active or not. There can only
            be one active service at any time. When updating a service
            to active, the current active service will be deactivated.
          example: true
          type: boolean
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field defined
            by the definition for this anti-fraud service e.g. for Sift
            `api_key` must be sent within this field when creating the service.

            For updates, only the fields sent here will be updated,
            existing ones will not be affected if not present.
          items:
            $ref: '#/components/schemas/AntiFraudServiceUpdate_fields'
          type: array
      required:
      - anti_fraud_service_definition_id
      title: Anti-Fraud Service (Update)
      type: object
      x-tags:
      - Anti-Fraud Services
    ApplePayRequest:
      description: Details for a Apple Pay payment method.
      properties:
        method:
          description: '`applepay`.'
          enum:
          - applepay
          example: applepay
          type: string
        token:
          description: |-
            The encrypted (opaque) token that was passed to the `onpaymentauthorized`
            callback by the Apple Pay integration.
          type: object
      required:
      - method
      - token
      title: Apple Pay payment method request
      type: object
      x-tags:
      - Request Bodies
    ApplePaySessionRequest:
      description: Initiates a new session with Apple Pay.
      properties:
        validation_url:
          description: |-
            Validation URL obtained from the event passed to a
            `onvalidatemerchant` callback.
          type: string
        domain_name:
          description: Fully qualified domain name of the merchant.
          type: string
      required:
      - domain_name
      - validation_url
      title: Apple Pay session request
      type: object
      x-tags:
      - Request Bodies
    APIKeyPairCreate:
      description: A request to create an API key-pair.
      properties:
        display_name:
          description: A name for this key-pair which is used in the Gr4vy admin panel
            to give the key-pair a human readable name.
          example: Sandbox
          maxLength: 200
          minLength: 1
          type: string
      title: API key-pair (Create)
      type: object
      x-tags:
      - API Key Pairs
    APIKeyPairUpdate:
      description: A request to update an API key-pair.
      properties:
        display_name:
          description: A name for this key-pair which is used in the Gr4vy admin panel
            to give the key-pair a human readable name.
          example: Sandbox
          maxLength: 200
          minLength: 1
          type: string
      required:
      - display_name
      title: API key-pair (Update)
      type: object
      x-tags:
      - API Key Pairs
    ApiLog:
      description: A log of an error that happened in the API call.
      example:
        response_sent_at: 2022-01-01T00:00:10Z
        request_received_at: 2022-01-01T00:00:00Z
        response_body:
          code: bad_request
          details:
            pointer: /payment_method/number
            location: body
            message: ensure this value has at least 13 characters
            type: value_error.any_str.min_length
          message: Request failed validation
          type: error
          status: 400
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        request_method: POST
        type: api-log
        request_url: http://api.wpay.gr4vy.app/transactions
        response_status_code: 400
      properties:
        type:
          description: '`api-log`.'
          enum:
          - api-log
          example: api-log
          type: string
        id:
          description: The ID of the API log entry.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        request_method:
          description: The http request method that generated the log entry.
          example: POST
          type: string
        request_url:
          description: The http request URL which trigged the error log.
          example: http://api.wpay.gr4vy.app/transactions
          type: string
        request_received_at:
          description: The date and time that the request was received.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        response_status_code:
          description: The http request status code.
          example: 400
          type: number
        response_body:
          $ref: '#/components/schemas/ApiLog_response_body'
        response_sent_at:
          description: date-time of when the response was sent.
          example: 2022-01-01T00:00:10Z
          format: date-time
          type: string
      title: API Log
      type: object
      x-tags:
      - API Log
    ApiLogs:
      description: A list of API log entries.
      example:
        items:
        - response_sent_at: 2022-01-01T00:00:10Z
          request_received_at: 2022-01-01T00:00:00Z
          response_body:
            code: bad_request
            details:
              pointer: /payment_method/number
              location: body
              message: ensure this value has at least 13 characters
              type: value_error.any_str.min_length
            message: Request failed validation
            type: error
            status: 400
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          request_method: POST
          type: api-log
          request_url: http://api.wpay.gr4vy.app/transactions
          response_status_code: 400
        - response_sent_at: 2022-01-01T00:00:10Z
          request_received_at: 2022-01-01T00:00:00Z
          response_body:
            code: bad_request
            details:
              pointer: /payment_method/number
              location: body
              message: ensure this value has at least 13 characters
              type: value_error.any_str.min_length
            message: Request failed validation
            type: error
            status: 400
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          request_method: POST
          type: api-log
          request_url: http://api.wpay.gr4vy.app/transactions
          response_status_code: 400
      properties:
        items:
          description: A list of API log entries.
          items:
            $ref: '#/components/schemas/ApiLog'
          type: array
      title: API Logs
      type: object
      x-tags:
      - API Logs
    AuditLog:
      description: A log of a change that occurred in the Gr4vy instance.
      example:
        resource:
          name: Samuel J
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
        action: created
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: audit-log
        user:
          email_address: john@example.com
          name: John L
          staff: false
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: active
        timestamp: 2022-01-01T00:00:00Z
      properties:
        type:
          description: '`audit-log`.'
          enum:
          - audit-log
          example: audit-log
          type: string
        id:
          description: The ID of the audit log entry.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        timestamp:
          description: The date and time that the action was performed.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
        action:
          description: The action that was performed.
          enum:
          - created
          - updated
          - deleted
          example: created
          type: string
        user:
          $ref: '#/components/schemas/AuditLog_user'
        resource:
          $ref: '#/components/schemas/AuditLog_resource'
      title: Audit Log
      type: object
      x-tags:
      - Audit Logs
    AuditLogs:
      description: A list of audit log entries.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - resource:
            name: Samuel J
            id: fe26475d-ec3e-4884-9553-f7356683f7f9
            type: buyer
          action: created
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: audit-log
          user:
            email_address: john@example.com
            name: John L
            staff: false
            id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
            status: active
          timestamp: 2022-01-01T00:00:00Z
        - resource:
            name: Samuel J
            id: fe26475d-ec3e-4884-9553-f7356683f7f9
            type: buyer
          action: created
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: audit-log
          user:
            email_address: john@example.com
            name: John L
            staff: false
            id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
            status: active
          timestamp: 2022-01-01T00:00:00Z
      properties:
        items:
          description: A list of audit log entries.
          items:
            $ref: '#/components/schemas/AuditLog'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Audit Logs
      type: object
      x-tags:
      - Audit Logs
    BillingDetails:
      description: Billing details associated to a buyer.
      properties:
        type:
          description: The type of this resource. Is always `billing-details`.
          enum:
          - billing-details
          example: billing-details
          type: string
        first_name:
          description: The first name(s) or given name of the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address of the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number of the buyer. This number is formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The billing address of the buyer.
          nullable: true
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax information associated with the billing details.
          nullable: true
      title: Billing details
      type: object
      x-tags:
      - Buyers
    BillingDetailsRequest:
      description: Billing details to use associated to a buyer.
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          - required:
            - city
            - country
            - line1
            - postal_code
            - state
          description: The billing address for the buyer.
          nullable: true
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax ID information associated with the billing details.
          nullable: true
      title: Billing details (Create)
      type: object
      x-tags:
      - Buyers
    BillingDetailsUpdateRequest:
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The billing address for the buyer.
          nullable: true
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          description: The tax ID information associated with the billing details.
          nullable: true
      title: Billing Details (Update)
      type: object
      x-tags:
      - Buyers
    BrowserInfo:
      properties:
        java_enabled:
          description: Indicates whether the client browser supports Java.
          example: true
          type: boolean
        javascript_enabled:
          description: Indicates whether the client browser supports JavaScript.
          example: true
          type: boolean
        language:
          description: |-
            The preferred language of the buyer,
            usually the language of the browser UI.
          example: en-GB
          type: string
        color_depth:
          description: The color depth of the screen.
          example: 32
          type: number
        screen_height:
          description: The height of the screen in pixels.
          example: 1080
          type: number
        screen_width:
          description: The width of the screen in pixels.
          example: 1920
          type: number
        time_zone_offset:
          description: Time-zone offset in minutes between UTC and buyer location.
          example: 60
          type: number
        user_device:
          description: The platform that is being used to access the website.
          enum:
          - desktop
          - mobile
          example: desktop
          type: string
        user_agent:
          description: The user agent string for the current browser.
          example: |-
            Mozilla/5.0 (darwin) AppleWebKit/537.36
            (KHTML, like Gecko) jsdom/16.7.0
          type: string
        accept_header:
          description: The `Accept` header of the request from the buyer's browser.
          example: '*/*'
          type: string
      required:
      - color_depth
      - java_enabled
      - javascript_enabled
      - language
      - screen_height
      - screen_width
      - time_zone_offset
      - user_agent
      - user_device
      title: Browser info
      type: object
    Buyer:
      example:
        external_identifier: user-789123
        billing_details: ""
        updated_at: 2013-07-16T19:23:00Z
        created_at: 2013-07-16T19:23:00Z
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: buyer
        display_name: John L.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          description: The billing details associated with a buyer.
          nullable: true
        created_at:
          description: |-
            The date and time
            when this buyer was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: |-
            The date and time
            when this buyer was last updated in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Buyer
      type: object
      x-tags:
      - Buyers
    Buyers:
      description: A list of buyers.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - external_identifier: user-789123
          billing_details: ""
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
        - external_identifier: user-789123
          billing_details: ""
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
      properties:
        items:
          description: A list of buyers.
          items:
            $ref: '#/components/schemas/Buyer'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Buyers
      type: object
      x-tags:
      - Buyers
    Buyer--Snapshot:
      description: |-
        Snapshot of a buyer, as used when embedded inside other
        resources.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          description: |-
            The billing details associated with the buyer, which include the
            address and tax ID.
          nullable: true
      title: Buyer (Snapshot)
      type: object
      x-tags:
      - Buyers
    BuyerRequest:
      description: A request to create a buyer.
      example:
        external_identifier: user-789123
        billing_details: '{}'
        display_name: John L.
      properties:
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetailsRequest'
          description: The optional billing details to associate with a buyer.
          nullable: true
          type: object
      title: Buyer (Create)
      type: object
      x-tags:
      - Buyers
    BuyerUpdate:
      description: A request to update a buyer.
      example:
        external_identifier: user-789123
        billing_details: '{}'
        display_name: John L.
      properties:
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetailsUpdateRequest'
          description: The billing details of the buyer.
          nullable: true
          type: object
      title: Buyer (Update)
      type: object
      x-tags:
      - Buyers
    CardDetails:
      description: Details about a card.
      properties:
        type:
          description: '`card-detail`.'
          enum:
          - card-detail
          example: card-detail
          type: string
        id:
          description: |-
            The 8 digit BIN of the card. When looking up card details using a
            `payment_method_id` this value will be `null`.
          example: "42424242"
          format: bin
          maxLength: 8
          minLength: 8
          type: string
        card_type:
          description: The type of card.
          enum:
          - credit
          - debit
          example: credit
          type: string
        scheme:
          description: The scheme/brand of the card.
          example: visa
          type: string
        scheme_icon_url:
          description: An icon to display for the card scheme.
          example: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          type: string
        country:
          description: The 2-letter ISO code of the issuing country of the card.
          example: US
          type: string
        required_fields:
          $ref: '#/components/schemas/RequiredFields'
      title: Card Details
      type: object
    PaymentOptionCardScheme:
      title: The scheme of the transaction
      type: string
    RequiredFields:
      description: The fields that are required to process a transaction for this
        payment option.
      example:
        email_address: true
        address:
          country: true
          city: true
          state: true
          postal_code: true
          line1: true
          house_number_or_name: true
        last_name: true
        phone_number: true
        first_name: true
        tax_id: true
      properties:
        first_name:
          description: The first (given) name of the buyer.
          readOnly: true
          type: boolean
        last_name:
          description: The last (family) name of the buyer.
          readOnly: true
          type: boolean
        email_address:
          description: The email address of the buyer.
          readOnly: true
          type: boolean
        phone_number:
          description: The phone number of the buyer.
          readOnly: true
          type: boolean
        address:
          $ref: '#/components/schemas/RequiredFields_address'
        tax_id:
          description: The tax id code associated with the billing details.
          readOnly: true
          type: boolean
      title: Required Fields
      type: object
    CardRequest:
      description: Details to register a new card payment method.
      example:
        number: "4111111111111111"
        external_identifier: card-323444
        buyer_external_identifier: user-789123
        security_code: "123"
        method: card
        expiration_date: 11/25
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          description: '`card`.'
          enum:
          - card
          example: card
          type: string
        number:
          description: |-
            The 13-19 digit number for this card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: The expiration date of the card, formatted `MM/YY`.
          example: 11/25
          maxLength: 5
          minLength: 5
          pattern: ^\d{2}/\d{2}$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - expiration_date
      - method
      - number
      - security_code
      title: Card
      type: object
      x-tags:
      - Request Bodies
    Connection:
      description: A configured connection.
      properties:
        id:
          description: The ID of the connection.
          example: 7b5e02bd-fa53-4ef0-b11e-1609d0f48cc5
          type: string
        type:
          default: connection
          description: '`connection`.'
          example: connection
          type: string
        name:
          description: The name of this connection.
          example: My Connection
          type: string
        active:
          description: |-
            Whether this connection is currently in use. Connections can
            be deactivated to allow for them to be kept around and
            re-activated at a later date.
          example: true
          type: boolean
        definition:
          $ref: '#/components/schemas/ConnectionDefinition'
      title: Connection
      type: object
      x-tags:
      - Discovery
    Connections:
      description: A list of configured connections.
      properties:
        items:
          items:
            $ref: '#/components/schemas/Connection'
          type: array
      title: Connections
      type: object
      x-tags:
      - Discovery
    ConnectionDefinition:
      description: A connection that can be configured.
      properties:
        id:
          description: The ID of the connection.
          example: stripe-card
          type: string
        type:
          default: connection-definition
          description: '`connection-definition`.'
          example: connection-definition
          type: string
        name:
          description: The name of this connection.
          example: Stripe
          type: string
        count:
          description: The number of configured connections.
          example: 1
          type: number
        group:
          enum:
          - anti-fraud-service
          - payment-service
          - digital-wallet
          example: payment-service
          type: string
        category:
          enum:
          - anti-fraud
          - bank
          - bnpl
          - card
          - cash
          - wallet
          example: card
          type: string
        icon_url:
          description: An icon to display for the connection.
          example: https://cdn.gr4vy.app/stripe.svg
          nullable: true
          type: string
        provider:
          description: The provider for this connection.
          example: Stripe
          nullable: true
          type: string
      title: Connection Definition
      type: object
      x-tags:
      - Discovery
    ConnectionDefinitions:
      description: A list of available connection definitions.
      properties:
        items:
          items:
            $ref: '#/components/schemas/ConnectionDefinition'
          type: array
      title: Connection definitions
      type: object
      x-tags:
      - Discovery
    ConnectionOptions:
      properties:
        cybersource-anti-fraud:
          $ref: '#/components/schemas/ConnectionOptions_cybersource_anti_fraud'
        adyen-card:
          $ref: '#/components/schemas/ConnectionOptions_adyen_card'
      title: Connection Options
      type: object
    CartItem:
      description: |-
        A cart item that represents a single cart line item for a transaction.
        Note that some optional properties are required for certain payment
        service providers. If no value is set for these properties, we will use
        their default value.

        If the total due to be paid for the item is required by the payment service
        provider, generally referred to as the "total amount", the formula below
        will usually be used to calculate this amount:

        `(unit_amount * quantity) - discount_amount + tax_amount`

        It's highly recommended that the total amount to pay for all items
        should match the transaction's amount to reduce the risk of the
        transaction being declined by the payment service provider.
      example:
        tax_amount: 0
        external_identifier: item-789123
        quantity: 1
        product_url: https://example.com/items/gopro
        product_type: physical
        discount_amount: 0
        image_url: https://example.com/images/items/gopro.png
        name: GoPro HERO9 Camcorder
        unit_amount: 37999
        categories:
        - categories
        - categories
        - categories
        - categories
        - categories
        sku: sku-789123
      properties:
        name:
          description: |-
            The name of the cart item. The value you set for this property may
            be truncated if the maximum length accepted by a payment service
            provider is less than 255 characters.
          example: GoPro HERO9 Camcorder
          maxLength: 255
          type: string
        quantity:
          description: |-
            The quantity of this item in the cart. This value cannot be negative
            or zero.
          example: 1
          maximum: 99999999
          minimum: 1
          type: integer
        unit_amount:
          description: |-
            The amount for an individual item represented as a monetary amount
            in the smallest currency unit for the given currency, for example
            `1299` USD cents represents `$12.99`.
          example: 37999
          maximum: 99999999
          minimum: 0
          type: integer
        discount_amount:
          default: 0
          description: |-
            The amount discounted for this item represented as a monetary amount
            in the smallest currency unit for the given currency, for example `1299`
            USD cents represents `$12.99`.

            Please note that this amount is for the total of the cart item and not
            for an individual item. For example, if the quantity is 5, this value
            should be the total discount amount for 5 of the cart item.

            You might see unexpected failed transactions if the `discount_amount` can
            not be equally divided by the `quantity` value. This is due to the fact
            that some payment services require this amount to be specified per unit.

            In this situation we recommend splitting this item into separate items,
            each with their own specific discount.
          example: 0
          maximum: 99999999
          minimum: 0
          nullable: true
          type: integer
        tax_amount:
          default: 0
          description: |-
            The tax amount for this item represented as a monetary amount
            in the smallest currency unit for the given currency, for example `1299`
            USD cents represents `$12.99`.

            Please not that this amount is for the total of the cart item and not
            for an individual item. For example, if the quantity is 5, this value
            should be the total tax amount for 5 of the cart item.

            You might see unexpected failed transactions if the `tax_amount` can
            not be equally divided by the `quantity` value. This is due to the fact
            that some payment services require this amount to be specified per unit.

            In this situation we recommend splitting this item into separate items,
            each with their own specific tax amount.
          example: 0
          maximum: 99999999
          minimum: 0
          nullable: true
          type: integer
        external_identifier:
          description: An external identifier for the cart item. This can be set to
            any value and is not sent to the payment service.
          example: item-789123
          maxLength: 200
          nullable: true
          type: string
        sku:
          description: The SKU for the item.
          example: sku-789123
          maxLength: 200
          nullable: true
          type: string
        product_url:
          description: The product URL for the item.
          example: https://example.com/items/gopro
          format: url
          maxLength: 2083
          nullable: true
          type: string
        image_url:
          description: The URL for the image of the item.
          example: https://example.com/images/items/gopro.png
          format: url
          maxLength: 2083
          nullable: true
          type: string
        categories:
          description: |-
            A list of strings containing product categories for the item.
            Max length per item: 50.
          items:
            maxLength: 50
            type: string
          maxItems: 100
          nullable: true
          type: array
        product_type:
          description: The product type of the cart item.
          enum:
          - physical
          - discount
          - shipping_fee
          - sales_tax
          - digital
          - gift_card
          - store_credit
          - surcharge
          example: physical
          nullable: true
          type: string
      required:
      - name
      - quantity
      - unit_amount
      title: Cart Item
      type: object
    CardSchemeDefinition:
      description: Definitions of a card scheme including icon, label, etc.
      example:
        icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
        id: visa
        type: card-scheme-definition
        display_name: Visa
      properties:
        type:
          description: '`card-scheme-definition`.'
          enum:
          - card-scheme-definition
          example: card-scheme-definition
          type: string
        id:
          description: The name of this card scheme.
          example: visa
          type: string
        icon_url:
          description: The icon for this card scheme.
          example: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          type: string
        display_name:
          description: The display name of this card scheme.
          example: Visa
          type: string
      title: Card Scheme Definition
      type: object
      x-tags:
      - Card Sheme Definitions
    CardSchemeDefinitions:
      description: A list of available card scheme definitions.
      example:
        items:
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          id: visa
          type: card-scheme-definition
          display_name: Visa
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/card-scheme-definitions/visa.svg
          id: visa
          type: card-scheme-definition
          display_name: Visa
      properties:
        items:
          items:
            $ref: '#/components/schemas/CardSchemeDefinition'
          type: array
      title: Card Scheme Definitions
      type: object
      x-tags:
      - Card Scheme Definitions
    CheckoutSession:
      description: A short-lived checkout session.
      example:
        expires_at: 2022-01-01T00:00:00Z
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: checkout-session
      properties:
        type:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        expires_at:
          description: |-
            The date and time when the Checkout Session will expire.
            By default this will be set to 1 hour from the date of creation.
          example: 2022-01-01T00:00:00Z
          format: date-time
          type: string
      title: Checkout Session
      type: object
      x-tags:
      - Checkout
    CheckoutSessionSecureFieldsUpdate:
      description: A request to update the secure fields of a checkout session.
      example:
        payment_method:
          number: "4111111111111111"
          external_identifier: card-323444
          buyer_external_identifier: user-789123
          security_code: "123"
          method: card
          expiration_date: 11/25
          buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          redirect_url: https://example.com/callback
      properties:
        payment_method:
          $ref: '#/components/schemas/CardRequest'
      title: Checkout Session Secure Fields (Update)
      type: object
      x-tags:
      - Checkout Sessions
    CheckoutSessionRequest:
      description: Details to register a new Checkout Session payment method.
      properties:
        method:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - id
      - method
      title: Checkout Session
      type: object
      x-tags:
      - Request Bodies
    DigitalWallet:
      description: A digital wallet (e.g. Apple Pay) that has been registered.
      example:
        pending_certificate_count: 1
        updated_at: 2012-12-12T10:53:43Z
        active_certificate_count: 1
        expired_certificate_count: 1
        provider: apple
        merchant_name: Gr4vy
        created_at: 2012-12-12T10:53:43Z
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: digital-wallet
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        type:
          description: '`digital-wallet`.'
          enum:
          - digital-wallet
          example: digital-wallet
          type: string
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        id:
          description: The ID of the registered digital wallet.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        merchant_name:
          description: The name of the merchant the digital wallet is registered to.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: The main URL of the merchant.
          example: https://example.com
          format: url
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        created_at:
          description: The date and time when this digital wallet was registered.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this digital wallet was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        active_certificate_count:
          description: The number of active custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
        pending_certificate_count:
          description: The number of pending custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
        expired_certificate_count:
          description: The number of expired custom certificates registered for this
            digital wallet (Apple Pay only).
          example: 1
          type: integer
      title: Digital Wallet
      type: object
      x-tags:
      - Digital Wallets
    DigitalWallets:
      description: A list of registered digital wallets.
      example:
        items:
        - pending_certificate_count: 1
          updated_at: 2012-12-12T10:53:43Z
          active_certificate_count: 1
          expired_certificate_count: 1
          provider: apple
          merchant_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: digital-wallet
          merchant_url: https://example.com
          domain_names:
          - example.com
        - pending_certificate_count: 1
          updated_at: 2012-12-12T10:53:43Z
          active_certificate_count: 1
          expired_certificate_count: 1
          provider: apple
          merchant_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: digital-wallet
          merchant_url: https://example.com
          domain_names:
          - example.com
      properties:
        items:
          description: A list of registered digital wallets.
          items:
            $ref: '#/components/schemas/DigitalWallet'
          type: array
      title: Digital Wallets
      type: object
      x-tags:
      - Digital Wallets
    DigitalWalletRequest:
      description: Merchant details used to register with a digital wallet provider.
      example:
        provider: apple
        merchant_name: Gr4vy
        accept_terms_and_conditions: true
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        merchant_name:
          description: |-
            The name of the merchant. This is used to register the merchant with a
            digital wallet provider and this name is not displayed to the buyer.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: |-
            The main URL of the merchant. This is used to register the merchant with
            a digital wallet provider and this URL is not displayed to the buyer.
          example: https://example.com
          format: url
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        accept_terms_and_conditions:
          description: |-
            The explicit acceptance of the digital wallet provider's terms and
            conditions by the merchant. Needs to be `true` to register a new digital
            wallet.
          example: true
          type: boolean
      required:
      - accept_terms_and_conditions
      - domain_names
      - merchant_name
      - provider
      title: Digital Wallet (Register)
      type: object
      x-tags:
      - Request Bodies
    DigitalWalletUpdate:
      description: Request body to update a registered digital wallet's details.
      example:
        merchant_name: Gr4vy
        domain_names:
        - example.com
      properties:
        merchant_name:
          description: |-
            The name of the merchant. This is used to update the value initially
            used to register with a digital wallet provider and this name is not
            displayed to the buyer.
          example: Gr4vy
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
      title: Digital Wallet (Update)
      type: object
      x-tags:
      - Request Bodies
    ErrorGeneric:
      description: A generic client error.
      properties:
        type:
          default: error
          description: The type of this object. This is always `error`.
          enum:
          - error
          example: error
          type: string
        code:
          description: A custom code to further describe the type of error being returned.
            This code provides further specification within the HTTP `status` code
            and can be used by a program to define logic based on the error.
          example: incorrect_json
          type: string
        status:
          description: The HTTP status code of this error.
          example: 499
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 200
          type: integer
        message:
          description: 'A human readable message that describes the error. The content
            of this field should not be used to determine any business logic. '
          example: The request body was not valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Generic Error
      type: object
      x-tags:
      - Errors
    Error400BadRequest:
      description: Bad Request (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`bad_request`.'
          enum:
          - bad_request
          example: bad_request
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: |-
            Describes the fields that are missing or incorrectly formatted in the API
            request.
          example: Missing '****' field
          type: string
        details:
          description: A list of detail objects that further clarify the reason for
            the error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Bad Request
      type: object
      x-tags:
      - Errors
    Error400IncorrectJson:
      description: Incorrect JSON (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`incorrect_json`.'
          enum:
          - incorrect_json
          example: incorrect_json
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: Incorrect JSON. The request body could not be parsed as valid
            JSON.
          example: Incorrect JSON. The request body could not be parsed as valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Incorrect JSON
      type: object
      x-tags:
      - Errors
    Error400InvalidCredentials:
      description: Invalid credentials (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`invalid_credentials`.'
          enum:
          - invalid_credentials
          example: invalid_credentials
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: The provided credentials are invalid.
          example: The provided credentials are invalid
          type: string
      title: Invalid credentials
      type: object
      x-tags:
      - Errors
    Error401Unauthorized:
      description: Unauthorized Error (HTTP 401).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`unauthorized`.'
          enum:
          - unauthorized
          example: unauthorized
          type: string
        status:
          description: '`401`.'
          enum:
          - 401
          example: 401
          type: integer
        message:
          description: No valid API authentication found.
          enum:
          - No valid API authentication found
          example: No valid API authentication found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Unauthorized Error
      type: object
      x-tags:
      - Errors
    Error403Forbidden:
      description: Forbidden Error (HTTP 403).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`forbidden`.'
          enum:
          - forbidden
          example: forbidden
          type: string
        status:
          description: '`403`.'
          enum:
          - 403
          example: 403
          type: integer
        message:
          description: Invalid credentials.
          enum:
          - Invalid credentials
          example: Invalid credentials
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Forbidden Error
      type: object
      x-tags:
      - Errors
    Error404PendingCreation:
      description: Pending Creation Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`pending_creation`.'
          enum:
          - pending_creation
          example: pending_creation
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource is still pending.
          enum:
          - The resource is still pending
          example: The resource is still pending
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Pending Creation Error
      type: object
      x-tags:
      - Errors
    Error404NotFound:
      description: Not Found Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`not_found`.'
          enum:
          - not_found
          example: not_found
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource could not be found.
          enum:
          - The resource could not be found
          example: The resource could not be found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Not Found Error
      type: object
      x-tags:
      - Errors
    Error409DuplicateRecord:
      description: Duplicate Record Error (HTTP 409).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`duplicate_record`.'
          enum:
          - duplicate_record
          example: duplicate_record
          type: string
        status:
          description: '`409`.'
          enum:
          - 409
          example: 409
          type: integer
        message:
          description: Further details on the field that triggered the error.
          example: A duplicate ecord exists with this external_identifier value
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Duplicate Record Error
      type: object
      x-tags:
      - Errors
    ErrorDetail:
      description: Additional detail about the part of a request body that caused
        an issue.
      properties:
        location:
          description: The location where the error caused an issue.
          enum:
          - query
          - body
          - path
          - header
          example: body
          type: string
        type:
          description: A unique identifier for the type of error that occurred.
          example: value_error.missing
          type: string
        pointer:
          description: |-
            The exact item for which the validation did not succeed. This is a JSON
            pointer for request bodies, while for query, path, and header parameters
            it is the name of the parameter.
          example: /payment_method/number
          type: string
        message:
          description: A human readable message for this error detail.
          example: field required
          type: string
      title: Error details
      type: object
      x-tags:
      - Errors
    GooglePayRequest:
      description: Details for a Google Pay payment method.
      properties:
        method:
          description: '`googlepay`.'
          enum:
          - googlepay
          example: googlepay
          type: string
        token:
          description: |-
            The encrypted (opaque) token returned by the Google Pay API that
            represents a payment method.
          type: object
        assurance_details:
          $ref: '#/components/schemas/GooglePayRequest_assurance_details'
        card_holder_name:
          description: Name of the card holder.
          nullable: true
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - method
      - token
      title: Google Pay payment method request
      type: object
      x-tags:
      - Request Bodies
    GooglePaySessionRequest:
      description: Initiates a new session with Google Pay.
      properties:
        origin_domain:
          description: Fully qualified domain name of the merchant.
          type: string
      required:
      - origin_domain
      title: Google Pay session request
      type: object
      x-tags:
      - Request Bodies
    MerchantAccount:
      example:
        updated_at: 2022-02-01T14:20:00Z
        created_at: 2022-02-01T14:20:00Z
        id: plantly_uk
        type: merchant-account
        display_name: Plantly UK
      properties:
        type:
          description: '`merchant-account`.'
          enum:
          - merchant-account
          example: merchant-account
          type: string
        id:
          description: The ID for this merchant account.
          example: plantly_uk
          type: string
        display_name:
          description: The display name of this merchant account.
          example: Plantly UK
          type: string
        created_at:
          description: The date and time when this merchant account was created in
            our system.
          example: 2022-02-01T14:20:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this merchant account was updated in
            our system.
          example: 2022-02-01T14:20:00Z
          format: date-time
          type: string
      title: Merchant Account
      type: object
      x-tags:
      - Merchant Account
    MerchantAccounts:
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - updated_at: 2022-02-01T14:20:00Z
          created_at: 2022-02-01T14:20:00Z
          id: plantly_uk
          type: merchant-account
          display_name: Plantly UK
        - updated_at: 2022-02-01T14:20:00Z
          created_at: 2022-02-01T14:20:00Z
          id: plantly_uk
          type: merchant-account
          display_name: Plantly UK
      properties:
        items:
          description: A list of merchant accounts.
          items:
            $ref: '#/components/schemas/MerchantAccount'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Merchant Accounts
      type: object
      x-tags:
      - Merchant Accounts
    MerchantAccountCreate:
      description: A request to create a merchant account.
      example:
        id: plantly_uk
        display_name: Plantly UK
      properties:
        id:
          description: The unique ID for the merchant account.
          example: plantly_uk
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        display_name:
          description: The human-readable name of the merchant account.
          example: Plantly UK
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
      title: Merchant Account (Create)
      type: object
      x-tags:
      - Merchant Accounts
    MerchantAccountUpdate:
      description: A request to update a merchant account.
      properties:
        display_name:
          description: The human-readable name of the merchant account.
          example: Plantly UK
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
      title: Merchant Account (Update)
      type: object
      x-tags:
      - Merchant Accounts
    MerchantProfileScheme:
      description: Merchant profile for a specific scheme.
      properties:
        merchant_acquirer_bin:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 11
          type: string
        merchant_url:
          description: URL to send when calling 3DS through this scheme.
          type: string
        merchant_acquirer_id:
          description: Merchant ID to use when calling 3DS through this scheme.
          maxLength: 35
          type: string
        merchant_name:
          description: Merchant name to use when calling 3DS through this scheme.
          maxLength: 40
          type: string
        merchant_country_code:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 3
          minLength: 3
          type: string
        merchant_category_code:
          description: Acquirer bin to use when calling 3DS through this scheme.
          maxLength: 4
          type: string
      title: Merchant Profile (single scheme)
      type: object
    MerchantProfile:
      description: Merchant profile for the different card schemes.
      properties:
        amex:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Amex.
          nullable: true
          type: object
        discover:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Discover.
          nullable: true
          type: object
        mastercard:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Mastercard.
          nullable: true
          type: object
        visa:
          allOf:
          - $ref: '#/components/schemas/MerchantProfileScheme'
          description: Merchant profile for Visa.
          nullable: true
          type: object
      title: Merchant Profile
      type: object
    PaymentMethod:
      description: A generic payment method.
      example:
        country: US
        external_identifier: user-789123
        method: ""
        scheme: visa
        created_at: 2013-07-16T19:23:00Z
        label: john@example.com
        type: payment-method
        expiration_date: 07/24
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        buyer: ""
        mode: ""
        updated_at: 2013-07-16T19:23:00Z
        approval_target: any
        currency: USD
        details:
          bin: "412345"
          card_type: credit
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        status: succeeded
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        status:
          description: |-
            The state of the payment method.

            - `processing` - The payment method is still being stored.
            - `buyer_approval_required` - Storing the payment method requires
              the buyer to provide approval. Follow the `approval_url` for next steps.
            - `succeeded` - The payment method is approved and stored with all
              relevant payment services.
            - `failed` - Storing the payment method did not succeed.
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The type of this payment method.
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            - googlepay
            example: card
            type: string
          description: The mode to use with this payment method.
        created_at:
          description: |-
            The date and time when this payment method was first created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this payment method was last updated
            in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer'
          description: The optional buyer for which this payment method has been stored.
          nullable: true
        label:
          description: |-
            A label for the card or the account. For a `paypal` payment method this
            is the user's email address. For a card it is the last 4 digits of the
            card.
          example: john@example.com
          nullable: true
          type: string
        scheme:
          description: The scheme of the card. Only applies to card payments.
          example: visa
          nullable: true
          type: string
        expiration_date:
          description: The expiration date for the payment method.
          example: 07/24
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
        details:
          $ref: '#/components/schemas/PaymentMethodDetailsCard'
      title: Payment method
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Tokenized:
      description: A mini format version of a payment method.
      example:
        country: US
        method: ""
        scheme: visa
        approval_target: any
        currency: USD
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        label: "1111"
        type: payment-method
        expiration_date: 11/25
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The type of this payment method.
        label:
          description: |-
            A label for the payment method. For a `card` payment method this is the
            last 4 digits on the card. For others it would be the email address.
          example: "1111"
          type: string
        scheme:
          description: The type of the card, if the payment method is a card.
          enum:
          - amex
          - dankort
          - diners-club
          - discover
          - eftpos-australia
          - elo
          - jcb
          - maestro
          - mastercard
          - other
          - rupay
          - unionpay
          - visa
          example: visa
          nullable: true
          type: string
        expiration_date:
          description: The expiration date for the payment method.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
      title: Payment Method (Summary)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods:
      description: A list of stored payment methods.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - country: US
          external_identifier: user-789123
          method: ""
          scheme: visa
          created_at: 2013-07-16T19:23:00Z
          label: john@example.com
          type: payment-method
          expiration_date: 07/24
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          buyer: ""
          mode: ""
          updated_at: 2013-07-16T19:23:00Z
          approval_target: any
          currency: USD
          details:
            bin: "412345"
            card_type: credit
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: succeeded
        - country: US
          external_identifier: user-789123
          method: ""
          scheme: visa
          created_at: 2013-07-16T19:23:00Z
          label: john@example.com
          type: payment-method
          expiration_date: 07/24
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          buyer: ""
          mode: ""
          updated_at: 2013-07-16T19:23:00Z
          approval_target: any
          currency: USD
          details:
            bin: "412345"
            card_type: credit
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: succeeded
      properties:
        items:
          description: A list of stored payment methods.
          items:
            $ref: '#/components/schemas/PaymentMethod'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment Methods
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Snapshot:
      description: |-
        Snapshot of a payment method, as used when embedded inside other
        resources.
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          nullable: true
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The type of this payment method.
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        label:
          description: |-
            A label for the payment method. This can be the last 4 digits for a card,
            or the email address for an alternative payment method.
          example: "1111"
          type: string
        scheme:
          description: |-
            An additional label used to differentiate different sub-types of a payment
            method. Most notably this can include the type of card used in a
            transaction.
          example: visa
          nullable: true
          type: string
        expiration_date:
          description: |-
            The expiration date for this payment method. This is mostly used by cards
            where the card might have an expiration date.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
        currency:
          description: |-
            The ISO-4217 currency code that this payment method can be
            used for. If this value is `null` the payment method may be
            used for multiple currencies.
          example: USD
          nullable: true
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country this payment method can
            be used for. If this value is `null` the payment method may be
            used in multiple countries.
          example: US
          nullable: true
          type: string
        details:
          $ref: '#/components/schemas/PaymentMethodDetailsCard'
      title: Payment method (Snapshot)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods--Tokenized:
      description: A list of stored payment methods in summarized format.
      example:
        items:
        - country: US
          method: ""
          scheme: visa
          approval_target: any
          currency: USD
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        - country: US
          method: ""
          scheme: visa
          approval_target: any
          currency: USD
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
      properties:
        items:
          description: A list of stored payment methods in summarized format.
          items:
            $ref: '#/components/schemas/PaymentMethod--Tokenized'
          type: array
      title: Payment Methods (Summary)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethodDetailsCard:
      description: A credit or debit card payment method.
      example:
        bin: "412345"
        card_type: credit
      properties:
        card_type:
          description: The type of card, one of `credit`, `debit` or `prepaid`.
          enum:
          - credit
          - debit
          - prepaid
          example: credit
          type: string
        bin:
          description: The first 6 digits of the full card number (the BIN).
          example: "412345"
          type: string
      title: Card
      type: object
      x-tags:
      - Payment Methods
    PaymentMethodRequest:
      description: |-
        Payment method details used to register
        a new payment method.
      example:
        number: "4111111111111111"
        country: US
        external_identifier: account-23423423
        buyer_external_identifier: user-789123
        security_code: "123"
        method: card
        currency: USD
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        expiration_date: 11/15
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          description: |-
            The type of the funding source, e.g. `card`, `paypal`,
            or `checkout-session`.
          example: card
          type: string
        id:
          description: The ID of a Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        number:
          description: |-
            The 13-19 digit number for this credit card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.
          example: 11/15
          maxLength: 5
          minLength: 5
          pattern: ^\d\d/\d\d$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to store this payment method for. This is
            used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to store this payment method for.
            This is used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: US
          type: string
      required:
      - method
      title: Payment method request
      type: object
      x-tags:
      - Request Bodies
    PaymentMethodDefinition:
      description: Definitions of a payment method including icon, label, etc.
      example:
        icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
        method: BACS
        id: bank
        long_display_name: Bank (BACS)
        display_name: Bank
      properties:
        id:
          description: The mode of this payment method.
          example: bank
          type: string
        icon_url:
          description: The icon for this payment method.
          example: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          type: string
        display_name:
          description: The display name of this payment method.
          example: Bank
          type: string
        long_display_name:
          description: The long display name of this payment method.
          example: Bank (BACS)
          type: string
        method:
          description: The method, or type, for this payment method.
          example: BACS
          type: string
      title: Payment Method Definition
      type: object
      x-tags:
      - Payment Method Definitions
    PaymentMethodDefinitions:
      description: A list of available payment method definitions.
      example:
        items:
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          method: BACS
          id: bank
          long_display_name: Bank (BACS)
          display_name: Bank
        - icon_url: https://api.sandbox.example.gr4vy.app/assets/payment-method-definitions/bank.svg
          method: BACS
          id: bank
          long_display_name: Bank (BACS)
          display_name: Bank
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentMethodDefinition'
          type: array
      title: Payment Method Definitions
      type: object
      x-tags:
      - Payment Method Definitions
    PaymentOptionsRequest:
      description: A request to get list of payment options.
      example:
        country: US
        amount: 1299
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        currency: USD
        locale: en-US
      properties:
        amount:
          description: |-
            The monetary amount to create an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            If the `intent` is set to `capture`, an amount greater than zero must
            be supplied.
          example: 1299
          nullable: true
          type: integer
        locale:
          default: en
          description: |-
            An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
            determines the language for the labels returned for every payment option.
          example: en-US
          nullable: true
          pattern: ^[a-z]{2}(?:-[A-Z]{2})?$
          type: string
        currency:
          description: |
            A supported ISO-4217 currency code.

            For redirect requests, this value must match the one specified for
            `currency` in `payment_method`.
          example: USD
          nullable: true
          type: string
        country:
          description: |
            Filters the results to only the items which support this country code. A
            country is formatted as 2-letter ISO country code.
          example: US
          nullable: true
          type: string
        metadata:
          additionalProperties:
            type: string
          description: |-
            Used by the Flow engine to filter available options based on various
            client-defined parameters. If present, this must be a string representing
            a valid JSON dictionary.
          example:
            key: value
          maxProperties: 20
          nullable: true
          type: object
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxItems: 249
          nullable: true
          type: array
      title: Payment Options (List)
      type: object
      x-tags:
      - Request Bodies
    PaymentService:
      description: An active, configured payment service.
      example:
        acquirer_merchant_id: acquirer_merchant_id
        created_at: 2012-12-12T10:53:43Z
        type: payment-service
        acquirer_bin_visa: acquirer_bin_visa
        payment_service_definition_id: stripe-card
        three_d_secure_enabled: true
        updated_at: 2012-12-12T10:53:43Z
        network_tokens_enabled: true
        id: faaad066-30b4-4997-a438-242b0752d7e1
        open_loop: true
        method: ""
        webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
        merchant_category_code: "5045"
        acquirer_bin_discover: acquirer_bin_discover
        merchant_name: gr4vy
        active: true
        payment_method_tokenization_enabled: true
        display_name: Stripe (Main)
        merchant_profile: '{}'
        acquirer_bin_amex: acquirer_bin_amex
        merchant_country_code: "840"
        accepted_countries:
        - DE
        position: 1
        merchant_url: http://example.com/aeiou
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: secret_key
        acquirer_bin_mastercard: acquirer_bin_mastercard
        accepted_currencies:
        - EUR
        status: pending
      properties:
        id:
          description: The ID of this payment service.
          example: faaad066-30b4-4997-a438-242b0752d7e1
          format: uuid
          maxLength: 200
          minLength: 1
          type: string
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The payment method that this service handles.
        display_name:
          description: The custom name set for this service.
          example: Stripe (Main)
          maxLength: 200
          minLength: 1
          type: string
        status:
          description: |
            The current status of this service. This will start off as pending, move
            to created, and might eventually move to an error status if and when the
            credentials are no longer valid.
          enum:
          - pending
          - created
          - failed
          type: string
        accepted_currencies:
          description: |-
            A list of currencies for which this service is enabled, in ISO 4217
            three-letter code format.
          example:
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        accepted_countries:
          description: |-
            A list of countries for which this service is enabled, in ISO two-letter
            code format.
          example:
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.
          example: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.
          example: true
          type: boolean
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        acquirer_bin_visa:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_mastercard:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_amex:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_discover:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_merchant_id:
          deprecated: true
          maxLength: 35
          nullable: true
          type: string
        merchant_name:
          deprecated: true
          example: gr4vy
          maxLength: 40
          nullable: true
          type: string
        merchant_country_code:
          deprecated: true
          example: "840"
          nullable: true
          pattern: ^\d{3}$
          type: string
        merchant_category_code:
          deprecated: true
          example: "5045"
          maxLength: 4
          minLength: 4
          nullable: true
          type: string
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: |-
            An object containing a key for each supported card scheme (Amex,
            Discover, Mastercard and Visa), and for each key an object with
            the merchant profile for this service and the corresponding scheme.
          nullable: true
          type: object
        merchant_url:
          deprecated: true
          format: url
          maxLength: 2048
          nullable: true
          type: string
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        position:
          description: |-
            The numeric rank of a payment service. Payment services with a lower
            position value are processed first.
          example: 1
          type: number
        created_at:
          description: The date and time when this service was created.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this service was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        webhook_url:
          description: |-
            The URL that needs to be configured with this payment service as the
            receiving endpoint for webhooks from the service to Gr4vy. Currently,
            Gr4vy does not yet automatically register webhooks on setup, and
            therefore webhooks need to be registered manually by the merchant.
          example: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          format: url
          nullable: true
          type: string
        fields:
          description: |-
            A list of fields, each containing a key-value pair for each field
            configured for this payment service. Fields marked as `secret`
            (see Payment Service Definition) are not returned.
          items:
            $ref: '#/components/schemas/PaymentService_fields'
          type: array
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentService--Snapshot:
      description: An active, configured payment service.
      properties:
        id:
          description: The ID of this payment service.
          example: stripe-card-faaad066-30b4-4997-a438-242b0752d7e1
          maxLength: 200
          minLength: 1
          type: string
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The payment method that this services handles.
        display_name:
          description: The custom name set for this service.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentServices:
      description: A list of active, configured payment services.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - acquirer_merchant_id: acquirer_merchant_id
          created_at: 2012-12-12T10:53:43Z
          type: payment-service
          acquirer_bin_visa: acquirer_bin_visa
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          updated_at: 2012-12-12T10:53:43Z
          network_tokens_enabled: true
          id: faaad066-30b4-4997-a438-242b0752d7e1
          open_loop: true
          method: ""
          webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          merchant_category_code: "5045"
          acquirer_bin_discover: acquirer_bin_discover
          merchant_name: gr4vy
          active: true
          payment_method_tokenization_enabled: true
          display_name: Stripe (Main)
          merchant_profile: '{}'
          acquirer_bin_amex: acquirer_bin_amex
          merchant_country_code: "840"
          accepted_countries:
          - DE
          position: 1
          merchant_url: http://example.com/aeiou
          fields:
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          acquirer_bin_mastercard: acquirer_bin_mastercard
          accepted_currencies:
          - EUR
          status: pending
        - acquirer_merchant_id: acquirer_merchant_id
          created_at: 2012-12-12T10:53:43Z
          type: payment-service
          acquirer_bin_visa: acquirer_bin_visa
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          updated_at: 2012-12-12T10:53:43Z
          network_tokens_enabled: true
          id: faaad066-30b4-4997-a438-242b0752d7e1
          open_loop: true
          method: ""
          webhook_url: https://api.example.app.gr4vy.com/i/ViYUjDkUSoiQ0ColeigGwnN0...
          merchant_category_code: "5045"
          acquirer_bin_discover: acquirer_bin_discover
          merchant_name: gr4vy
          active: true
          payment_method_tokenization_enabled: true
          display_name: Stripe (Main)
          merchant_profile: '{}'
          acquirer_bin_amex: acquirer_bin_amex
          merchant_country_code: "840"
          accepted_countries:
          - DE
          position: 1
          merchant_url: http://example.com/aeiou
          fields:
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          - value: sk_test_26PHem9AhJZvU623DfE1x4sd
            key: secret_key
          acquirer_bin_mastercard: acquirer_bin_mastercard
          accepted_currencies:
          - EUR
          status: pending
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentService'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: A list of active payment services
      type: object
      x-tags:
      - Payment Services
    PaymentServiceRequest:
      description: Request body for activating a payment service.
      example:
        merchant_category_code: "5045"
        acquirer_bin_discover: acquirer_bin_discover
        acquirer_merchant_id: acquirer_merchant_id
        merchant_name: gr4vy
        active: true
        payment_method_tokenization_enabled: true
        display_name: Stripe (Main)
        acquirer_bin_visa: acquirer_bin_visa
        payment_service_definition_id: stripe-card
        merchant_profile: '{}'
        three_d_secure_enabled: true
        acquirer_bin_amex: acquirer_bin_amex
        merchant_country_code: "840"
        accepted_countries:
        - US
        - GB
        - DE
        network_tokens_enabled: true
        position: 1
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        merchant_url: http://example.com/aeiou
        acquirer_bin_mastercard: acquirer_bin_mastercard
        accepted_currencies:
        - EUR
        - USD
        - GBP
        open_loop: true
      properties:
        payment_service_definition_id:
          description: The ID of the payment service to use.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        display_name:
          description: A custom name for the payment service. This will be shown in
            the Admin UI.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: A list of fields, each containing a key-value pair for each
            field defined by the definition for this payment service e.g. for stripe-card
            `secret_key` is required and so must be sent within this field.
          items:
            $ref: '#/components/schemas/PaymentServiceRequest_fields'
          type: array
        accepted_countries:
          description: A list of countries that this payment service needs to support
            in ISO two-letter code format.
          example:
          - US
          - GB
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: A list of currencies that this payment service needs to support
            in ISO 4217 three-letter code format.
          example:
          - EUR
          - USD
          - GBP
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        acquirer_bin_visa:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_mastercard:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_amex:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_discover:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_merchant_id:
          deprecated: true
          maxLength: 35
          nullable: true
          type: string
        merchant_name:
          deprecated: true
          example: gr4vy
          maxLength: 40
          nullable: true
          type: string
        merchant_country_code:
          deprecated: true
          example: "840"
          nullable: true
          pattern: ^\d{3}$
          type: string
        merchant_category_code:
          deprecated: true
          example: "5045"
          maxLength: 4
          minLength: 4
          nullable: true
          type: string
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: Configuration for each supported card scheme.
          nullable: true
          type: object
        merchant_url:
          deprecated: true
          format: url
          maxLength: 2048
          nullable: true
          type: string
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        position:
          description: |-
            The numeric rank of a payment service. Payment services with a lower
            position value are processed first. When a payment services is inserted at
            a position, any payment services with the the same value or higher are
            shifted down a position accordingly. When left out, the payment service is
            inserted at the end of the list.
          example: 1
          type: number
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.

            If this value is not provided or is set to `null`, it will be set
            to the value of `open_loop` in the payment service definition.

            If `open_loop_toggle` is `false` in the payment service definition,
            `open_loop` should either not be provided or set to `null`, or it
            will fail with a validation error.
          example: true
          nullable: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.

            If this value is not provided or is set to `null`, it will be set
            to the value of `network_tokens_default` in the payment service
            definition.

            If `network_tokens_toggle` is `false` in the payment service definition,
            `network_tokens_enabled` should either not be provided or set to `null`,
            or it will fail with a validation error.
          example: true
          nullable: true
          type: boolean
      required:
      - accepted_countries
      - accepted_currencies
      - display_name
      - fields
      - payment_service_definition_id
      title: Payment Service (Create)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceUpdate:
      description: Request body for updating an active payment service.
      example:
        merchant_category_code: "5045"
        acquirer_bin_discover: acquirer_bin_discover
        acquirer_merchant_id: acquirer_merchant_id
        merchant_name: gr4vy
        active: true
        payment_method_tokenization_enabled: true
        display_name: Stripe (Main)
        acquirer_bin_visa: acquirer_bin_visa
        merchant_profile: '{}'
        three_d_secure_enabled: true
        acquirer_bin_amex: acquirer_bin_amex
        merchant_country_code: "840"
        accepted_countries:
        - US
        - GB
        - DE
        network_tokens_enabled: true
        position: 1
        fields:
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        - value: sk_test_26PHem9AhJZvU623DfE1x4sd
          key: private_key
        merchant_url: http://example.com/aeiou
        acquirer_bin_mastercard: acquirer_bin_mastercard
        accepted_currencies:
        - EUR
        - USD
        - GBP
        open_loop: true
      properties:
        display_name:
          description: A custom name for the payment service. This will be shown in
            the Admin UI.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: A list of fields, each containing a key-value pair for each
            field defined by the definition for this payment service e.g. for stripe-card
            `secret_key` is required and so must be sent within this field.
          items:
            $ref: '#/components/schemas/PaymentServiceRequest_fields'
          type: array
        accepted_countries:
          description: A list of countries that this payment service needs to support
            in ISO two-letter code format.
          example:
          - US
          - GB
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: A list of currencies that this payment service needs to support
            in ISO 4217 three-letter code format.
          example:
          - EUR
          - USD
          - GBP
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        acquirer_bin_visa:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_mastercard:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_amex:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_discover:
          deprecated: true
          maxLength: 11
          nullable: true
          type: string
        acquirer_merchant_id:
          deprecated: true
          maxLength: 35
          nullable: true
          type: string
        merchant_name:
          deprecated: true
          example: gr4vy
          maxLength: 40
          nullable: true
          type: string
        merchant_country_code:
          deprecated: true
          example: "840"
          nullable: true
          pattern: ^\d{3}$
          type: string
        merchant_category_code:
          deprecated: true
          example: "5045"
          maxLength: 4
          minLength: 4
          nullable: true
          type: string
        merchant_profile:
          allOf:
          - $ref: '#/components/schemas/MerchantProfile'
          description: |-
            Configuration for each supported card scheme.
            When updating a Payment Service, a key not being present will
            indicate no updates to be done on that scheme, whereas an object being
            sent as Null for a key will empty the configuration for that scheme.
          nullable: true
          type: object
        merchant_url:
          deprecated: true
          format: url
          maxLength: 2048
          nullable: true
          type: string
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        position:
          description: |-
            The numeric rank of a payment service. Payment services with a lower
            position value are processed first. When a payment services is inserted at
            a position, any payment services with the the same value or higher are
            shifted down a position accordingly. When left out, the payment service is
            inserted at the end of the list.
          example: 1
          type: number
        open_loop:
          description: |-
            Defines if the service works as an open-loop service. This feature
            can only be enabled if the PSP is set up to accept previous scheme
            transaction IDs.

            If this value is set to `null`, it will be set to the value of
            `open_loop` in the payment service definition.

            If `open_loop_toggle` is `false` in the payment service definition,
            `open_loop` should either not be provided or set to `null`, or it
            will fail with a validation error.
          example: true
          nullable: true
          type: boolean
        payment_method_tokenization_enabled:
          default: false
          description: |-
            Defines if tokenization is enabled for the service. This feature
            can only be enabled if the payment service is NOT set as `open_loop`
            and the PSP is set up to tokenize.
          example: true
          type: boolean
        network_tokens_enabled:
          description: |-
            Defines if network tokens are enabled for the service. This feature
            can only be enabled if the payment service is set as `open_loop` and
            the PSP is set up to accept network tokens.

            If this value is set to `null`, it will be set to the value of
            `network_tokens_default` in the payment service definition.

            If `network_tokens_toggle` is `false` in the payment service definition,
            `network_tokens_enabled` should either not be provided or set to `null`,
            or it will fail with a validation error.
          example: true
          nullable: true
          type: boolean
      title: Payment Service (Update)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceDefinitionConfiguration:
      description: Configuration items for the payment service.
      example:
        approval_ui_height: 300px
        approval_ui_width: 300px
        approval_ui_target: any
      properties:
        approval_ui_height:
          description: Height of the approval interface in either pixels or view height
            (vh).
          example: 300px
          type: string
        approval_ui_width:
          description: Width of the approval interface in either pixels or view width
            (vw).
          example: 300px
          type: string
        approval_ui_target:
          description: The browser target that an approval URL must be opened in.
            If `any` or `null`, then there is no specific requirement.
          enum:
          - any
          - new_window
          example: any
          nullable: true
          type: string
      title: Payment Service Definition Context
      type: object
    PaymentServiceDefinition:
      description: An available payment service that can be configured.
      example:
        mode: ""
        icon_url: https://cdn.gr4vy.app/stripe.svg
        method: ""
        configuration:
          approval_ui_height: 300px
          approval_ui_width: 300px
          approval_ui_target: any
        supported_features:
          network_tokens: false
          requires_webhook_setup: true
          network_tokens_toggle: false
          payment_method_tokenization: true
          void: true
          payment_method_tokenization_toggle: false
          refunds: true
          delayed_capture: false
          three_d_secure_hosted: true
          open_loop_toggle: false
          network_tokens_default: true
          three_d_secure_pass_through: false
          open_loop: true
          partial_refunds: false
          verify_credentials: false
        supported_countries:
        - US
        - GB
        - DE
        id: stripe-card
        type: payment-service-definition
        display_name: Stripe
        fields:
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
        - format: text
          secret: true
          display_name: Private API key
          key: private_api_key
          required: true
        supported_currencies:
        - USD
        - GBP
        - EUR
      properties:
        id:
          description: The ID of the payment service. This is the underlying provider
            followed by a dash followed by the payment method ID.
          example: stripe-card
          type: string
        type:
          default: payment-service-definition
          description: '`payment-service-definition`.'
          example: payment-service-definition
          type: string
        display_name:
          description: The display name of this service.
          example: Stripe
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The ID of the payment method that this services handles.
        fields:
          description: A list of fields that need to be submitted when activating
            the payment. service.
          items:
            $ref: '#/components/schemas/PaymentServiceDefinition_fields'
          minItems: 1
          type: array
        supported_currencies:
          description: A list of three-letter ISO currency codes that this service
            supports.
          example:
          - USD
          - GBP
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        supported_countries:
          description: A list of two-letter ISO country codes that this service supports.
          example:
          - US
          - GB
          - DE
          items:
            type: string
          minItems: 1
          type: array
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            - googlepay
            example: card
            type: string
          description: The mode of this payment service.
        supported_features:
          $ref: '#/components/schemas/PaymentServiceDefinition_supported_features'
        icon_url:
          description: An icon to display for the payment service.
          example: https://cdn.gr4vy.app/stripe.svg
          nullable: true
          type: string
        configuration:
          $ref: '#/components/schemas/PaymentServiceDefinitionConfiguration'
      title: Payment Service Definition
      type: object
      x-tags:
      - Discovery
    PaymentServiceDefinitions:
      description: A list of available payment services definitions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - mode: ""
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: ""
          configuration:
            approval_ui_height: 300px
            approval_ui_width: 300px
            approval_ui_target: any
          supported_features:
            network_tokens: false
            requires_webhook_setup: true
            network_tokens_toggle: false
            payment_method_tokenization: true
            void: true
            payment_method_tokenization_toggle: false
            refunds: true
            delayed_capture: false
            three_d_secure_hosted: true
            open_loop_toggle: false
            network_tokens_default: true
            three_d_secure_pass_through: false
            open_loop: true
            partial_refunds: false
            verify_credentials: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
        - mode: ""
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: ""
          configuration:
            approval_ui_height: 300px
            approval_ui_width: 300px
            approval_ui_target: any
          supported_features:
            network_tokens: false
            requires_webhook_setup: true
            network_tokens_toggle: false
            payment_method_tokenization: true
            void: true
            payment_method_tokenization_toggle: false
            refunds: true
            delayed_capture: false
            three_d_secure_hosted: true
            open_loop_toggle: false
            network_tokens_default: true
            three_d_secure_pass_through: false
            open_loop: true
            partial_refunds: false
            verify_credentials: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            secret: true
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentServiceDefinition'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment service definitions
      type: object
      x-tags:
      - Discovery
    PaymentOptionApprovalUI:
      description: Configuration for the approval interface that should be shown to
        the buyer.
      example:
        width: 300px
        height: 300px
      properties:
        height:
          description: Height of the approval interface in either pixels or view height
            (vh).
          example: 300px
          type: string
        width:
          description: Width of the approval interface in either pixels or view width
            (vw).
          example: 300px
          type: string
      title: Payment Option Approval UI
      type: object
    PaymentOption:
      description: An available payment option for a locale.
      example:
        icon_url: https://cdn.gr4vy.app/card.svg
        mode: ""
        method: ""
        context:
          required_fields:
            email_address: true
            address:
              country: true
              city: true
              state: true
              postal_code: true
              line1: true
              house_number_or_name: true
            last_name: true
            phone_number: true
            first_name: true
            tax_id: true
          gateway_merchant_id: gateway_merchant_id
          approval_ui:
            width: 300px
            height: 300px
          merchant_name: merchant_name
          supported_schemes:
          - null
          - null
          gateway: gateway
        label: Pay by Card
        type: payment-option
        can_delay_capture: true
        can_store_payment_method: true
      properties:
        type:
          description: '`payment-option`.'
          enum:
          - payment-option
          example: payment-option
          type: string
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The type of payment method that is available.
        icon_url:
          description: An icon to display for the payment option.
          example: https://cdn.gr4vy.app/card.svg
          nullable: true
          type: string
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            - googlepay
            example: card
            type: string
          description: The mode to use with this payment option.
        label:
          description: |-
            A label that describes this payment option. This label is returned in the
            language defined by the `locale` query parameter. The label can be used
            to display a list of payment options to the buyer in their language.
          example: Pay by Card
          type: string
        can_store_payment_method:
          description: A flag to indicate if storing the payment method is supported.
          type: boolean
        can_delay_capture:
          description: A flag to indicate if delayed capture is supported.
          type: boolean
        context:
          $ref: '#/components/schemas/PaymentOption_context'
      title: Payment option
      type: object
      x-tags:
      - Payment Option
    PaymentOptions:
      description: A list of payment options.
      example:
        items:
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: ""
          method: ""
          context:
            required_fields:
              email_address: true
              address:
                country: true
                city: true
                state: true
                postal_code: true
                line1: true
                house_number_or_name: true
              last_name: true
              phone_number: true
              first_name: true
              tax_id: true
            gateway_merchant_id: gateway_merchant_id
            approval_ui:
              width: 300px
              height: 300px
            merchant_name: merchant_name
            supported_schemes:
            - null
            - null
            gateway: gateway
          label: Pay by Card
          type: payment-option
          can_delay_capture: true
          can_store_payment_method: true
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: ""
          method: ""
          context:
            required_fields:
              email_address: true
              address:
                country: true
                city: true
                state: true
                postal_code: true
                line1: true
                house_number_or_name: true
              last_name: true
              phone_number: true
              first_name: true
              tax_id: true
            gateway_merchant_id: gateway_merchant_id
            approval_ui:
              width: 300px
              height: 300px
            merchant_name: merchant_name
            supported_schemes:
            - null
            - null
            gateway: gateway
          label: Pay by Card
          type: payment-option
          can_delay_capture: true
          can_store_payment_method: true
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentOption'
          type: array
      title: A list of payment options
      type: object
      x-tags:
      - Payment Options
    RedirectRequest:
      description: Details to register a new redirect payment method.
      properties:
        method:
          allOf:
          - enum:
            - paypal
            - banked
            - bitpay
            - gocardless
            - stripedd
            example: paypal
            type: string
          description: |-
            The method to use, this can be any of the methods that
            support redirect requests.

            When storing a new payment method, only `gocardless` and `stripedd`
            are currently supported.
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: US
          type: string
        external_identifier:
          description: An external identifier that can be used to match the account
            against your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - country
      - currency
      - method
      - redirect_url
      title: Redirect
      type: object
      x-tags:
      - Request Bodies
    Refund:
      description: |-
        A refund record.

        A refund is always associated with a single transaction, while a transaction
        can potentially have several refunds.
      example:
        transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        amount: 1299
        updated_at: 2013-07-16T19:23:00Z
        created_at: 2013-07-16T19:23:00Z
        currency: USD
        id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        type: refund
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `refund`.
          enum:
          - refund
          example: refund
          type: string
        id:
          description: The unique ID of the refund.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        transaction_id:
          description: The ID of the transaction associated with this refund.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the refund.
            It may change over time as asynchronous processing events occur.

            - `processing` - The refund is being processed.
            - `succeeded` - The refund was successful.
            - `declined` - The refund was declined by the underlying PSP.
            - `failed` - The refund could not proceed due to a technical issue.
            - `voided` - The refund was voided and will not proceed.
          enum:
          - processing
          - succeeded
          - declined
          - failed
          - voided
          example: processing
          type: string
        currency:
          description: |-
            The currency code for this refund.
            Will always match that of the associated transaction.
          example: USD
          type: string
        amount:
          description: The amount requested for this refund.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        created_at:
          description: The date and time when this refund was created.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this refund was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Refund
      type: object
      x-tags:
      - Transactions
    Refunds:
      description: A list of refunds.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          amount: 1299
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          currency: USD
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: refund
          status: processing
        - transaction_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          amount: 1299
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          currency: USD
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: refund
          status: processing
      properties:
        items:
          description: A list of refunds.
          items:
            $ref: '#/components/schemas/Refund'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Refunds
      type: object
      x-tags:
      - Transactions
    Report:
      allOf:
      - $ref: '#/components/schemas/ReportSummary'
      description: A report record.
      example:
        schedule: monthly
        schedule_timezone: schedule_timezone
        next_execution_at: 2023-01-01T00:00:00Z
        updated_at: 2013-07-16T19:23:00Z
        latest_execution: ""
        schedule_enabled: true
        created_at: 2013-07-16T19:23:00Z
        description: Transactions that failed to authorize in April 2022
        spec: ""
      properties:
        created_at:
          description: The date and time this report was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time this report was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        next_execution_at:
          description: |-
            The date and time this report will next be executed, provided
            that `schedule_enabled` is `true`. This value is null if this
            is a one-off report.
          example: 2023-01-01T00:00:00Z
          format: date-time
          nullable: true
          type: string
        description:
          description: The description of this report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule:
          description: |-
            Specifies the schedule of this report.

            If this is a one-off report, this value is `once`.

            If this is a recurring report, this value is set to the
            frequency by which the report will be executed. For example, a
            `monthly` schedule means that this report will be periodically
            executed at the start of each month.

            Note that a `weekly` schedule means that the report is executed
            at the start of every Monday.
          enum:
          - daily
          - monthly
          - once
          - weekly
          example: monthly
          type: string
        schedule_enabled:
          description: |-
            Indicates whether this report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            When this value is set to `true`, this report will be executed at
            the `next_execution_at` date and time.

            When this value is set to `false`, future executions of this
            report are paused until this value is set to `true` again.
          example: true
          type: boolean
        schedule_timezone:
          description: |-
            The time zone in which the next execution will be scheduled. This
            value is used to calculate this report's `next_execution_at` value
            and is only relevant if this is a recurring report. This time zone
            is also used to calculate the timestamp range for reports that use
            date-time placeholders. Date-time placeholders are dynamic
            timestamps that change with every report execution.
          type: string
        spec:
          allOf:
          - $ref: '#/components/schemas/ReportSpec'
          description: The specifications of this report.
        latest_execution:
          allOf:
          - $ref: '#/components/schemas/ReportExecutionSummary'
          description: Details of the latest execution of this report.
          nullable: true
      title: Report
      type: object
      x-tags:
      - Reports
    ReportCreate:
      description: A request to create a report.
      example:
        schedule: monthly
        schedule_timezone: Europe/London
        name: Failed Authorizations 042022
        schedule_enabled: true
        description: Transactions that failed to authorize in April 2022
        spec: ""
      properties:
        name:
          description: The name of the report.
          example: Failed Authorizations 042022
          maxLength: 100
          nullable: false
          type: string
        description:
          description: The description of the report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule:
          default: once
          description: |-
            Specifies the schedule of the report.

            If this is a one-off report, set this value to `once`.

            If this is a recurring report, this value should be set to the
            frequency by which the report will be executed. For example, a
            `monthly` schedule means that the report will be periodically
            executed at the start of each month.

            Note that a `weekly` schedule means that the report will be
            executed at the start of every Monday.
          enum:
          - daily
          - monthly
          - once
          - weekly
          example: monthly
          nullable: false
          type: string
        schedule_enabled:
          description: |-
            Indicates whether the report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            If this value is set to `true`, the report will be executed at
            the `next_execution_at` date and time.

            If this is a recurring report and this value is set to `false`,
            executions of the report will not occur until this value is set
            to `true`.

            If this value is not provided, `schedule_enabled` will
            automatically be set to `false` if `schedule` is `once` and set to
            `true` otherwise.
          example: true
          nullable: true
          type: boolean
        schedule_timezone:
          default: Etc/UTC
          description: |-
            The time zone in which the report's executions will be scheduled.
            This value is used to compute the report's `next_execution_at`
            value and is only relevant when this is a recurring report. This
            time zone is also used to calculate the timestamp range for reports
            that use date-time placeholders. Date-time placeholders are dynamic
            timestamps that change with every report execution.

            This value must be set to the time zone's name as presented in
            the IANA time zone database. For example, to schedule reports in
            the time zone of New York, set this value to `America/New_York`.
          example: Europe/London
          nullable: false
          type: string
        spec:
          allOf:
          - $ref: '#/components/schemas/ReportSpec'
          description: The specifications of the report.
          nullable: false
      required:
      - name
      - spec
      title: Report (Create)
      type: object
      x-tags:
      - Reports
    ReportExecution:
      allOf:
      - $ref: '#/components/schemas/ReportExecutionSummary'
      description: A report execution.
      example:
        report: '{}'
      properties:
        report:
          allOf:
          - $ref: '#/components/schemas/ReportSummary'
          description: The report associated with this report execution.
          type: object
      title: Report Execution
      type: object
      x-tags:
      - Reports
    ReportExecutionSummary:
      description: A report execution summary.
      properties:
        type:
          description: The type of this resource. Is always `report-execution`.
          enum:
          - report-execution
          example: report-execution
          type: string
        id:
          description: The unique identifier for this report execution.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        created_at:
          description: The date and time this report execution was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time this report execution was last updated.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        status:
          description: The status of this report execution.
          enum:
          - dispatched
          - failed
          - pending
          - processing
          - succeeded
          example: succeeded
          type: string
        context:
          $ref: '#/components/schemas/ReportExecutionSummary_context'
      title: Report Execution Summary
      type: object
      x-tags:
      - Reports
    ReportExecutionUrl:
      description: |-
        The temporary signed URL to download the result of a report execution
        and its expiration date and time.
      example:
        expires_at: 2013-07-16T19:23:00Z
        url: https://example.com/download
      properties:
        url:
          description: The URL to download the report execution.
          example: https://example.com/download
          type: string
        expires_at:
          description: The date and time when the download URL expires.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Report Execution URL
      type: object
      x-tags:
      - Reports
    ReportExecutions:
      description: A list of report executions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - report: '{}'
        - report: '{}'
      properties:
        items:
          description: A list of report executions.
          items:
            $ref: '#/components/schemas/ReportExecution'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Report Executions
      type: object
      x-tags:
      - Reports
    ReportSpec:
      description: The specification of a report.
      properties:
        model:
          description: |-
            The model (dataset) that the data used for the report is retrieved
            from.
          enum:
          - transactions
          example: transactions
          type: string
        params:
          additionalProperties: true
          description: |-
            Parameters used to configure the report. Acceptable values for
            this property depend on the value specified for `model`.
          example:
            fields:
            - id
            - status
            filters:
              status:
              - authorization_failed
            sort:
            - field: captured_at
              order: desc
          type: object
      required:
      - model
      - params
      title: Report Specification
      type: object
      x-tags:
      - Reports
    ReportSummary:
      description: A report record summary.
      properties:
        type:
          description: The type of this resource. Is always `report`.
          enum:
          - report
          example: report
          type: string
        id:
          description: The unique identifier for this report.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The name of this report.
          example: Failed Authorizations 042022
          maxLength: 100
          type: string
      title: Report Summary
      type: object
      x-tags:
      - Reports
    ReportUpdate:
      description: Request body to update a report.
      example:
        name: Failed Authorizations 042022
        schedule_enabled: true
        description: Transactions that failed to authorize in April 2022
      properties:
        name:
          description: The name of the report.
          example: Failed Authorizations 042022
          maxLength: 100
          nullable: false
          type: string
        description:
          description: The description of the report.
          example: Transactions that failed to authorize in April 2022
          maxLength: 1000
          nullable: true
          type: string
        schedule_enabled:
          description: |-
            Indicates whether the report's scheduling is enabled. This value
            can only be set to `true` if this is a recurring report.

            When this value is set to `true`, the report will be executed at
            the `next_execution_at` date and time.

            When this value is set to `false`, future executions of the
            report are paused until this value is set to `true` again.

            If scheduling is enabled after being disabled, then the
            `next_execution_at` value is updated if and only if its current
            value is a past date-time. The `next_execution_at` value is then
            set to the next closest date-time in the future depending on the
            values of `schedule` and `schedule_timezone`.
          example: true
          nullable: false
          type: boolean
      title: Report (Update)
      type: object
      x-tags:
      - Request Bodies
    Reports:
      description: A list of reports.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - schedule: monthly
          schedule_timezone: schedule_timezone
          next_execution_at: 2023-01-01T00:00:00Z
          updated_at: 2013-07-16T19:23:00Z
          latest_execution: ""
          schedule_enabled: true
          created_at: 2013-07-16T19:23:00Z
          description: Transactions that failed to authorize in April 2022
          spec: ""
        - schedule: monthly
          schedule_timezone: schedule_timezone
          next_execution_at: 2023-01-01T00:00:00Z
          updated_at: 2013-07-16T19:23:00Z
          latest_execution: ""
          schedule_enabled: true
          created_at: 2013-07-16T19:23:00Z
          description: Transactions that failed to authorize in April 2022
          spec: ""
      properties:
        items:
          description: A list of reports.
          items:
            $ref: '#/components/schemas/Report'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Reports
      type: object
      x-tags:
      - Reports
    Role:
      example:
        permissions:
          allow:
          - buyers.read
          - payment-methods.read
          - transactions.read
        name: Support
        description: Customer support agents
        id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
        type: role
      properties:
        type:
          description: The type of this resource. Always `role`.
          enum:
          - role
          example: role
          type: string
        id:
          description: The unique ID for this role.
          example: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          format: uuid
          type: string
        name:
          description: The unique name for this role.
          example: Support
          type: string
        description:
          description: The description for this role.
          example: Customer support agents
          type: string
        permissions:
          $ref: '#/components/schemas/RolePermissions'
      title: Role
      type: object
      x-tags:
      - Roles
    Roles:
      description: A list of roles.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
        - permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
      properties:
        items:
          description: A list of roles.
          items:
            $ref: '#/components/schemas/Role'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Roles
      type: object
      x-tags:
      - Roles
    RoleAssignment:
      example:
        role:
          permissions:
            allow:
            - buyers.read
            - payment-methods.read
            - transactions.read
          name: Support
          description: Customer support agents
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          type: role
        id: 1cdac457-400f-4866-8da6-5c193a8db158
        assignee:
          id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          type: user
        type: role-assignment
      properties:
        type:
          description: The type of this resource. Always `role-assignment`.
          enum:
          - role-assignment
          example: role-assignment
          type: string
        id:
          description: The unique ID for this role assignment.
          example: 1cdac457-400f-4866-8da6-5c193a8db158
          format: uuid
          type: string
        role:
          $ref: '#/components/schemas/Role'
        assignee:
          $ref: '#/components/schemas/RoleAssignment_assignee'
      title: Role Assignment
      type: object
      x-tags:
      - Roles
    RoleAssignments:
      description: A list of role assignments.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - role:
            permissions:
              allow:
              - buyers.read
              - payment-methods.read
              - transactions.read
            name: Support
            description: Customer support agents
            id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
            type: role
          id: 1cdac457-400f-4866-8da6-5c193a8db158
          assignee:
            id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
            type: user
          type: role-assignment
        - role:
            permissions:
              allow:
              - buyers.read
              - payment-methods.read
              - transactions.read
            name: Support
            description: Customer support agents
            id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
            type: role
          id: 1cdac457-400f-4866-8da6-5c193a8db158
          assignee:
            id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
            type: user
          type: role-assignment
      properties:
        items:
          description: A list of role assignments.
          items:
            $ref: '#/components/schemas/RoleAssignment'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Role Assignments
      type: object
      x-tags:
      - Roles
    RoleAssignmentRequest:
      description: A request to create a role assignment.
      example:
        role:
          id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
        assignee:
          id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          type: user
      properties:
        role:
          $ref: '#/components/schemas/RoleAssignmentRequest_role'
        assignee:
          $ref: '#/components/schemas/RoleAssignmentRequest_assignee'
      required:
      - assignee
      - role
      title: Role Assignment (Create)
      type: object
      x-tags:
      - Roles
    RolePermissions:
      description: The permissions associated with a role.
      example:
        allow:
        - buyers.read
        - payment-methods.read
        - transactions.read
      properties:
        allow:
          description: The list of permissions to allow for a role.
          example:
          - buyers.read
          - payment-methods.read
          - transactions.read
          items:
            type: string
          type: array
      title: Role permissions
      type: object
      x-tags:
      - Roles
    ShippingDetail:
      description: Shipping detail for a buyer.
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        type: shipping-details
        buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
        first_name: John
      properties:
        type:
          description: The type of this resource. Is always `shipping-details`.
          enum:
          - shipping-details
          example: shipping-details
          type: string
        id:
          description: The unique ID for a buyer's shipping detail.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        buyer_id:
          description: The unique ID for a buyer.
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        first_name:
          description: The first name(s) or given name of the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address of the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number of the buyer. This number is formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail
      type: object
      x-tags:
      - Buyers
    ShippingDetails:
      description: A list of shipping details.
      example:
        items:
        - email_address: john@example.com
          address: ""
          last_name: Lunn
          phone_number: +1234567890
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: shipping-details
          buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          first_name: John
        - email_address: john@example.com
          address: ""
          last_name: Lunn
          phone_number: +1234567890
          id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: shipping-details
          buyer_id: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          first_name: John
      properties:
        items:
          description: A list of shipping details.
          items:
            $ref: '#/components/schemas/ShippingDetail'
          type: array
      title: Shipping details
      type: object
      x-tags:
      - Transactions
    ShippingDetailRequest:
      description: Shipping detail associated to a buyer.
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        first_name: John
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail (Create)
      type: object
      x-tags:
      - Buyers
    ShippingDetailUpdateRequest:
      example:
        email_address: john@example.com
        address: ""
        last_name: Lunn
        phone_number: +1234567890
        first_name: John
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number for the buyer which should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          description: The physical shipping address associated to this buyer.
          nullable: true
      title: Shipping detail (Update)
      type: object
      x-tags:
      - Buyers
    StatementDescriptor:
      description: |-
        The statement descriptor is the text to be shown on the buyer's statements.

        The specific usage of these fields will depend on the capabilities of
        the underlying PSP and bank. As a typical example, 'name' and
        'description' could be concatenated using '* ' as a separator, and
        then the resulting descriptor would be truncated to 22 characters by
        the issuing bank.
      properties:
        name:
          description: |-
            Reflects your doing business as (DBA) name.

            Other validations:

            1. Contains only Latin characters.
            2. Contain at least one letter
            3. Does not contain any of the special characters `< > \ ' " *`
            4. Supports:
              1. Lower case: `a-z`
              2. Upper case: `A-Z`
              3. Numbers: `0-9`
              4. Spaces: ` `
              5. Special characters: `. , _ - ? + /`.
          example: GR4VY
          maxLength: 22
          minLength: 5
          nullable: true
          type: string
        description:
          description: |-
            A short description about the purchase.

            Other validations:
            1. Contains only Latin characters.
            2. Contain at least one letter
            3. Does not contain any of the special characters `< > \ ' " *`
            4. Supports:
              1. Lower case: `a-z`
              2. Upper case: `A-Z`
              3. Numbers: `0-9`
              4. Spaces: ` `
              5. Special characters: `. , _ - ? + /`.
          example: Card payment
          maxLength: 22
          minLength: 5
          nullable: true
          type: string
        city:
          description: City from which the charge originated.
          example: London
          maxLength: 13
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The value in the phone number field of a customer's statement which
            should be formatted according to the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 20
          minLength: 5
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        url:
          description: The value in the URL/web address field of a customer's statement.
          example: www.gr4vy.com
          maxLength: 13
          minLength: 1
          nullable: true
          type: string
      title: Statement descriptor
      type: object
    TaxId:
      description: The tax ID information associated to a buyer.
      properties:
        value:
          description: The tax ID for the buyer.
          example: "12345678931"
          maxLength: 50
          minLength: 1
          type: string
        kind:
          description: The kind of tax ID.
          enum:
          - ae.trn
          - au.abn
          - ar.dni
          - ar.cuil
          - ar.cuit
          - br.cnpj
          - br.cpf
          - ca.bn
          - ca.gst_hst
          - ca.pst_bc
          - ca.pst_mb
          - ca.pst_sk
          - ca.qst
          - ch.vat
          - cl.tin
          - es.cif
          - eu.vat
          - gb.vat
          - hk.br
          - id.nik
          - id.npwp
          - in.gst
          - jp.cn
          - jp.rn
          - kr.brn
          - li.uid
          - mx.curp
          - my.frp
          - my.itn
          - my.nric
          - my.sst
          - no.vat
          - nz.gst
          - ph.tin
          - ru.inn
          - ru.kpp
          - sa.vat
          - sg.gst
          - sg.uen
          - th.id
          - th.vat
          - tw.vat
          - us.ein
          - za.vat
          example: gb.vat
          type: string
      required:
      - kind
      - value
      title: Tax ID
      type: object
      x-tags:
      - Buyers
    ThreeDSecureData:
      properties:
        cavv:
          description: The cardholder authentication value or AAV.
          example: 3q2+78r+ur7erb7vyv66vv8=
          type: string
        eci:
          description: The electronic commerce indicator for the 3DS transaction.
          example: "05"
          maxLength: 2
          minLength: 1
          pattern: ^0?\d$
          type: string
        version:
          description: The version of 3-D Secure that was used.
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        directory_response:
          description: For 3-D Secure version 1, the enrolment response. For 3-D Secure
            version , the transaction status from the `ARes`.
          example: C
          maxLength: 1
          type: string
      required:
      - cavv
      - directory_response
      - eci
      - version
      title: 3-D Secure Data
      type: object
    ThreeDSecureDataV1:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV1_allOf'
      title: 3-D Secure Data Version 1
      type: object
    ThreeDSecureDataV2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV2_allOf'
      title: 3-D Secure Data Version 2
      type: object
    ThreeDSecureDataV1V2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureDataV1'
      - $ref: '#/components/schemas/ThreeDSecureDataV2'
      title: 3-D Secure Data Version 1 & 2
      type: object
    ThreeDSecureError:
      description: Details about the error resulting from 3DS processing a Transaction.
      properties:
        description:
          description: The error description.
          example: Invalid ThreeDSCompInd
          maxLength: 2048
          nullable: true
          type: string
        detail:
          description: Detail for the error.
          example: The threeDSCompInd must be 'Y' when successful
          maxLength: 2048
          nullable: true
          type: string
        code:
          description: The error code.
          example: "305"
          maxLength: 3
          minLength: 3
          nullable: true
          type: string
        component:
          description: Code indicating the 3-D Secure component that identified the
            error..
          example: C
          maxLength: 1
          minLength: 1
          nullable: true
          type: string
      required:
      - code
      - component
      - description
      - detail
      title: 3-D Secure Error Data
      type: object
      x-tags:
      - Transactions
    ThreeDSecureSummary:
      description: |-
        Details about the 3-D Secure challenge that was presented to
        the buyer for this transaction, where applicable.
      example:
        method: challenge
        version: 2.1.0
        status: setup_error
        error_data: '{}'
      properties:
        version:
          description: The version of 3DS used for this transaction.
          example: 2.1.0
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        status:
          description: The status of the 3DS challenge for this transaction.
          enum:
          - setup_error
          - error
          - declined
          - cancelled
          - complete
          type: string
        method:
          description: The method used for 3DS authentication for this transaction.
          enum:
          - challenge
          - frictionless
          type: string
        error_data:
          allOf:
          - $ref: '#/components/schemas/ThreeDSecureError'
          description: If the transaction had a 3DS error, information about it.
          nullable: true
          type: object
        response_data:
          $ref: '#/components/schemas/ThreeDSecureDataV1V2'
      title: 3-D Secure Summary
      type: object
    TokenizedRequest:
      description: Details for a previously stored payment method.
      properties:
        method:
          description: '`id`.'
          enum:
          - id
          example: id
          type: string
        id:
          description: |-
            A ID that represents a previously stored payment method.
            This ID can represent any type of payment method.
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        redirect_url:
          description: |-
            This value is mandatory for stored redirect payment methods.
            For stored cards, we strongly recommend providing a `redirect_url`
            either when 3-D Secure is enabled and `three_d_secure_data`
            is not provided, or when using connections where 3DS is enabled.
            This value will be appended with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure
            has completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            The security code can only be set if the stored payment method
            represents a card.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
      required:
      - id
      - method
      title: Stored payment method request
      type: object
      x-tags:
      - Request Bodies
    Transaction:
      description: A transaction record.
      example:
        country: US
        payment_service_transaction_id: charge_xYqd43gySMtori
        voided_at: 2013-07-16T19:23:00Z
        external_identifier: user-789123
        metadata:
          key: value
        payment_service: ""
        cvv_response_code: match
        shipping_details: ""
        created_at: 2013-07-16T19:23:00Z
        captured_at: 2013-07-16T19:23:00Z
        is_subsequent_payment: true
        raw_response_code: incorrect-zip
        type: transaction
        authorized_at: 2013-07-16T19:23:00Z
        statement_descriptor: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        captured_amount: 999
        currency: USD
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        payment_source: ecommerce
        payment_method: ""
        amount: 1299
        method: card
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        avs_response_code: partial_match_address
        scheme_transaction_id: "123456789012345"
        intent: authorize
        refunded_amount: 100
        buyer: ""
        merchant_initiated: true
        raw_response_description: |-
          The card's postal code is incorrect. Check the card's postal code or use a
          different card.
        three_d_secure:
          method: challenge
          version: 2.1.0
          status: setup_error
          error_data: '{}'
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous processing events occur.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
        intent:
          description: |-
            The original `intent` used when the transaction was
            [created](#operation/authorize-new-transaction).
          enum:
          - authorize
          - capture
          example: authorize
          type: string
        amount:
          description: |-
            The authorized amount for this transaction. This can be more than the
            actual captured amount and part of this amount may be refunded.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        captured_amount:
          description: |-
            The captured amount for this transaction. This can be the total or a
            portion of the authorized amount.
          example: 999
          maximum: 99999999
          minimum: 0
          type: integer
        refunded_amount:
          description: |-
            The refunded amount for this transaction. This can be the total or a
            portion of the captured amount.
          example: 100
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: The currency code for this transaction.
          example: USD
          type: string
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.
          example: US
          nullable: true
          type: string
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethod--Snapshot'
          description: The payment method used for this transaction.
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer--Snapshot'
          description: The buyer used for this transaction.
          nullable: true
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        updated_at:
          description: Defines when the transaction was last updated.
          format: date-time
          type: string
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          description: The payment service used for this transaction.
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        payment_source:
          description: The source of the transaction. Defaults to `ecommerce`.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: ecommerce
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note there are some restrictions on how this flag may be
            used.

            The flag can only be `false` (or not set) when the transaction meets
            one of the following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `card_on_file`.

            The flag can only be set to `true` when the transaction meets one of the
            following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `recurring` or `installment` and
            `merchant_initiated` is set to `true`.
            * `payment_source` is set to `card_on_file`.
          example: true
          type: boolean
        statement_descriptor:
          allOf:
          - $ref: '#/components/schemas/StatementDescriptor'
          nullable: true
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxLength: 249
          type: array
        scheme_transaction_id:
          default: "null"
          description: |-
            An identifier for the transaction used by the scheme itself, when
            available.

            e.g. the Visa Transaction Identifier, or Mastercard Trace ID.
          example: "123456789012345"
          nullable: true
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
        avs_response_code:
          description: |-
            The response code received from the payment service for the Address
            Verification Check (AVS). This code is mapped to a standardized Gr4vy
            AVS response code.

            - `no_match` - neither address or postal code match
            - `match` - both address and postal code match
            - `partial_match_address` - address matches but postal code does not
            - `partial_match_postcode` - postal code matches but address does not
            - `unavailable ` - AVS is unavailable for card/country

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - partial_match_address
          - partial_match_postcode
          - unavailable
          example: partial_match_address
          nullable: true
          type: string
        cvv_response_code:
          description: |-
            The response code received from the payment service for the Card
            Verification Value (CVV). This code is mapped to a standardized Gr4vy
            CVV response code.

            - `no_match` - the CVV does not match the expected value
            - `match` - the CVV matches the expected value
            - `unavailable ` - CVV check unavailable for card our country
            - `not_provided ` - CVV not provided

            The value of this field can be `null` if the payment service did not
            provide a response.
          enum:
          - no_match
          - match
          - unavailable
          - not_provided
          example: match
          nullable: true
          type: string
        method:
          enum:
          - afterpay
          - applepay
          - banked
          - bitpay
          - boleto
          - card
          - clearpay
          - dana
          - fortumo
          - gcash
          - gocardless
          - googlepay
          - grabpay
          - klarna
          - ovo
          - paymaya
          - paypal
          - pix
          - rabbitlinepay
          - scalapay
          - shopeepay
          - stripedd
          - truemoney
          - trustly
          - zippay
          example: card
          type: string
        payment_service_transaction_id:
          description: The payment service's unique ID for the transaction.
          example: charge_xYqd43gySMtori
          type: string
        metadata:
          additionalProperties:
            type: string
          description: Additional information about the transaction stored as key-value
            pairs.
          example:
            key: value
          type: object
        shipping_details:
          allOf:
          - $ref: '#/components/schemas/ShippingDetail'
          description: The shipping details associated with the transaction.
          nullable: true
        three_d_secure:
          $ref: '#/components/schemas/ThreeDSecureSummary'
        authorized_at:
          description: |-
            The date and time when this transaction was authorized in the payment
            service.

            Don't use this field to determine whether the transaction was authorized.
            A `null` value doesn't necessarily imply that the transaction wasn't
            authorized, it can mean that the payment service doesn't provide this
            value, that it didn't provide it at the time the transaction was
            authorized or that the transaction was authorized before the introduction
            of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        captured_at:
          description: |-
            The date and time when this transaction was captured in the payment
            service.

            Don't use this field to determine whether the transaction was captured.
            A `null` value doesn't necessarily imply that the transaction wasn't
            captured, it can mean that the payment service doesn't provide this value,
            that it didn't provide it at the time the transaction was captured or that
            the transaction was captured before the introduction of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
        voided_at:
          description: |-
            The date and time when this transaction was voided in the payment service.

            Don't use this field to determine whether the transaction was voided.
            A `null` value doesn't necessarily imply that the transaction wasn't
            voided, it can mean that the payment service doesn't provide this value,
            that it didn't provide it at the time the transaction was voided or that
            the transaction was voided before the introduction of this field.
          example: 2013-07-16T19:23:00Z
          format: date-time
          nullable: true
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    TransactionStatusSummary:
      description: A transaction record.
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous processing events occur.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    TransactionSummary:
      description: A transaction record.
      example:
        country: US
        amount: 1299
        external_identifier: user-789123
        payment_service: ""
        method: card
        created_at: 2013-07-16T19:23:00Z
        raw_response_code: incorrect-zip
        type: transaction
        intent: authorize
        refunded_amount: 100
        buyer: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        captured_amount: 999
        currency: USD
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        raw_response_description: |-
          The card's postal code is incorrect. Check the card's postal code or use a
          different card.
        payment_method: ""
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous processing events occur.
          enum:
          - processing
          - buyer_approval_pending
          - authorization_succeeded
          - authorization_failed
          - authorization_declined
          - capture_pending
          - capture_succeeded
          - authorization_void_pending
          - authorization_voided
          example: processing
          type: string
        intent:
          description: |-
            The original `intent` used when the transaction was
            [created](#operation/authorize-new-transaction).
          enum:
          - authorize
          - capture
          example: authorize
          type: string
        amount:
          description: |-
            The authorized amount for this transaction. This can be more than the
            actual captured amount and part of this amount may be refunded.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        captured_amount:
          description: |-
            The captured amount for this transaction. This can be the total or a
            portion of the authorized amount.
          example: 999
          maximum: 99999999
          minimum: 0
          type: integer
        refunded_amount:
          description: |-
            The refunded amount for this transaction. This can be the total or a
            portion of the captured amount.
          example: 100
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: The currency code for this transaction.
          example: USD
          type: string
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.
          example: US
          nullable: true
          type: string
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethod--Snapshot'
          description: The payment method used for this transaction.
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer--Snapshot'
          description: The buyer used for this transaction.
          nullable: true
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        updated_at:
          description: Defines when the transaction was last updated.
          format: date-time
          type: string
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          description: The payment service used for this transaction.
        method:
          enum:
          - afterpay
          - applepay
          - banked
          - bitpay
          - boleto
          - card
          - clearpay
          - dana
          - fortumo
          - gcash
          - gocardless
          - googlepay
          - grabpay
          - klarna
          - ovo
          - paymaya
          - paypal
          - pix
          - rabbitlinepay
          - scalapay
          - shopeepay
          - stripedd
          - truemoney
          - trustly
          - zippay
          example: card
          type: string
        raw_response_code:
          description: |-
            This is the response code received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: incorrect-zip
          nullable: true
          type: string
        raw_response_description:
          description: |-
            This is the response description received from the payment service. This
            can be set to any value and is not standardized across different
            payment services.
          example: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          nullable: true
          type: string
      title: Transaction
      type: object
      x-tags:
      - Transactions
    Transactions:
      description: A list of transactions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - country: US
          amount: 1299
          external_identifier: user-789123
          payment_service: ""
          method: card
          created_at: 2013-07-16T19:23:00Z
          raw_response_code: incorrect-zip
          type: transaction
          intent: authorize
          refunded_amount: 100
          buyer: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          captured_amount: 999
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          raw_response_description: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          payment_method: ""
          status: processing
        - country: US
          amount: 1299
          external_identifier: user-789123
          payment_service: ""
          method: card
          created_at: 2013-07-16T19:23:00Z
          raw_response_code: incorrect-zip
          type: transaction
          intent: authorize
          refunded_amount: 100
          buyer: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          captured_amount: 999
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          raw_response_description: |-
            The card's postal code is incorrect. Check the card's postal code or use a
            different card.
          payment_method: ""
          status: processing
      properties:
        items:
          description: A list of transactions.
          items:
            $ref: '#/components/schemas/TransactionSummary'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Transactions
      type: object
      x-tags:
      - Transactions
    TransactionsBatchCaptureRequest:
      description: A request to capture multiple previously authorized transactions.
      properties:
        amount:
          description: |-
            The (partial) amount to capture.

            When left blank, this will capture the entire amount.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: |
            A supported ISO-4217 currency code.
          example: USD
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          type: string
        transaction_id:
          description: The ID of the transaction to capture.
          type: string
      required:
      - amount
      - currency
      - transaction_id
      title: Batch Capture (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionRequest:
      description: A request to create a transaction.
      example:
        country: US
        amount: 1299
        external_identifier: user-789123
        metadata:
          key: value
        cart_items:
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        - tax_amount: 0
          external_identifier: item-789123
          quantity: 1
          product_url: https://example.com/items/gopro
          product_type: physical
          discount_amount: 0
          image_url: https://example.com/images/items/gopro.png
          name: GoPro HERO9 Camcorder
          unit_amount: 37999
          categories:
          - categories
          - categories
          - categories
          - categories
          - categories
          sku: sku-789123
        shipping_details_id: 47da6902-5eae-4b4b-88fd-856802d627d6
        connection_options: ""
        is_subsequent_payment: true
        store: true
        previous_scheme_transaction_id: "123456789012345"
        intent: capture
        statement_descriptor: ""
        async_capture: true
        browser_info: ""
        currency: USD
        merchant_initiated: true
        payment_source: ecommerce
        payment_method:
          number: "4111111111111111"
          external_identifier: user-789123
          buyer_external_identifier: user-789123
          security_code: "123"
          method: ""
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          expiration_date: 11/15
          buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          redirect_url: https://example.com/callback
      properties:
        amount:
          description: |-
            The monetary amount to create an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            If the `intent` is set to `capture`, an amount greater than zero must
            be supplied.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: |
            A supported ISO-4217 currency code.

            For redirect requests, this value must match the one specified for
            `currency` in `payment_method`.
          example: USD
          type: string
        country:
          description: |
            The 2-letter ISO code of the country of the transaction.
            This is used to filter the payment services that is used to process the
            transaction.

            If this value is provided for redirect requests and it's not `null`, it
            must match the one specified for `country` in `payment_method`. Otherwise,
            the value specified for `country` in `payment_method` will be assumed
            implicitly.
          example: US
          nullable: true
          type: string
        payment_method:
          $ref: '#/components/schemas/TransactionPaymentMethodRequest'
        store:
          default: false
          description: |-
            Whether or not to also try and store the payment method with us so that
            it can be used again for future use. This is only supported for payment
            methods that support this feature. There are also a few restrictions on
            how the flag may be set:

            * The flag has to be set to `true` when the `payment_source` is set to
            `recurring` or `installment`, and `merchant_initiated` is set to `false`.

            * The flag has to be set to `false` (or not set) when using a previously
            vaulted payment method.
          example: true
          type: boolean
        intent:
          default: authorize
          description: |-
            Defines the intent of this API call. This determines the desired initial
            state of the transaction.

            * `authorize` - (Default) Optionally approves and then authorizes a
            transaction but does not capture the funds.
            * `capture` - Optionally approves and then authorizes and captures the
            funds of the transaction.
          enum:
          - authorize
          - capture
          example: capture
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        three_d_secure_data:
          $ref: '#/components/schemas/ThreeDSecureDataV1V2'
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        payment_source:
          description: The source of the transaction. Defaults to `ecommerce`.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: ecommerce
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note there are some restrictions on how this flag may be
            used.

            The flag can only be `false` (or not set) when the transaction meets
            one of the following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `card_on_file`.

            The flag can only be set to `true` when the transaction meets one of the
            following criteria:

            * It is not `merchant_initiated`.
            * `payment_source` is set to `recurring` or `installment` and
            `merchant_initiated` is set to `true`.
            * `payment_source` is set to `card_on_file`.
          example: true
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it. Please visit https://docs.gr4vy.com/ under
            `Connections` for more information on how specific providers support
            metadata. Please note the metadata key is case sensitive when used in
            Flow.
          example:
            key: value
          maxProperties: 20
          type: object
        statement_descriptor:
          allOf:
          - $ref: '#/components/schemas/StatementDescriptor'
          nullable: true
        cart_items:
          description: An array of cart items that represents the line items of a
            transaction.
          items:
            $ref: '#/components/schemas/CartItem'
          maxItems: 249
          type: array
        previous_scheme_transaction_id:
          default: "null"
          description: |-
            A scheme's transaction identifier to use in connecting a merchant
            initiated transaction to a previous customer initiated transaction.

            If not provided, and a qualifying customer initiated transaction has been
            previously made, then Gr4vy will populate this value with the identifier
            returned for that transaction.

            e.g. the Visa Transaction Identifier, or Mastercard Trace ID.
          example: "123456789012345"
          nullable: true
          type: string
        browser_info:
          allOf:
          - $ref: '#/components/schemas/BrowserInfo'
          description: Information about the browser used by the buyer.
          nullable: true
        shipping_details_id:
          description: |-
            The unique identifier of a set of shipping details stored for the buyer.

            If provided, the created transaction will include a copy of the details
            at the point of transaction creation; i.e. it will not be affected by
            later changes to the detail in the database.
          example: 47da6902-5eae-4b4b-88fd-856802d627d6
          format: uuid
          nullable: true
          type: string
        connection_options:
          allOf:
          - $ref: '#/components/schemas/ConnectionOptions'
          description: |-
            Allows for passing optional configuration per connection to take
            advantage of connection specific features. When provided, the data
            is only passed to the target connection type to prevent sharing
            configuration across connections.
          nullable: true
        async_capture:
          default: false
          description: |-
            Whether to capture the transaction asynchronously.

            - When `async_capture` is `false` (default), the transaction is captured
              in the same request.
            - When `async_capture` is `true`, the transaction is automatically
              captured at a later time.

            Redirect transactions are not affected by this flag.

            This flag can only be set to `true` when `intent` is set to `capture`.
          example: true
          type: boolean
      required:
      - amount
      - currency
      - payment_method
      title: Transaction (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionCaptureRequest:
      description: A request to capture a transaction.
      example:
        amount: 1299
      properties:
        amount:
          description: |-
            The monetary amount to capture an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            When omitted blank, this will capture the entire amount.

            Capturing an amount that is greater than the authorized amount is not
            supported.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      title: Capture a transaction
      type: object
      x-tags:
      - Request Bodies
    TransactionRefundRequest:
      description: A request to refund a transaction.
      example:
        amount: 1299
      properties:
        amount:
          description: |-
            The amount requested to refund.

            If omitted, a full refund will be requested.

            Otherwise, the amount must be lower than or equal to the remaining balance
            in the associated transaction.

            Negative and zero-amount refunds are not supported.
          example: 1299
          maximum: 99999999
          minimum: 1
          type: integer
      title: Transaction Refund Request
      type: object
      x-tags:
      - Request Bodies
    TransactionPaymentMethodRequest:
      description: |-
        Payment method details to use in a transaction or to register
        a new payment method.
      example:
        number: "4111111111111111"
        external_identifier: user-789123
        buyer_external_identifier: user-789123
        security_code: "123"
        method: ""
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        expiration_date: 11/15
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          allOf:
          - enum:
            - afterpay
            - applepay
            - banked
            - bitpay
            - boleto
            - card
            - clearpay
            - dana
            - fortumo
            - gcash
            - gocardless
            - googlepay
            - grabpay
            - klarna
            - ovo
            - paymaya
            - paypal
            - pix
            - rabbitlinepay
            - scalapay
            - shopeepay
            - stripedd
            - truemoney
            - trustly
            - zippay
            example: card
            type: string
          description: The method to use for this request.
        number:
          description: |-
            The 13-19 digit number for this credit card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.
          example: 11/15
          maxLength: 5
          minLength: 5
          pattern: ^\d\d/\d\d$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: user-789123
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          type: string
        id:
          description: |-
            An identifier for a previously vaulted payment method.
            This id can represent any type of payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          type: string
      required:
      - method
      title: Transaction payment method request
      type: object
      x-tags:
      - Request Bodies
    TransactionCardRequest:
      description: Card payment method details to use in a transaction.
      properties:
        method:
          description: '`card`.'
          enum:
          - card
          example: card
          type: string
        number:
          description: |-
            The 13-19 digit number for this card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 19
          minLength: 13
          pattern: ^[0-9]{13,19}$
          type: string
        expiration_date:
          description: The expiration date of the card, formatted `MM/YY`.
          example: 11/25
          maxLength: 5
          minLength: 5
          pattern: ^\d{2}/\d{2}$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records. This can only be set if the `store` flag is set to `true`.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            We strongly recommend providing a `redirect_url` either when 3-D
            Secure is enabled and `three_d_secure_data` is not provided, or when
            using connections where 3DS is enabled. This value will be appended
            with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has
            completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - expiration_date
      - method
      - number
      - security_code
      title: Card
      type: object
      x-tags:
      - Request Bodies
    TransactionRedirectRequest:
      description: Redirect payment method details to use in a transaction.
      properties:
        method:
          allOf:
          - enum:
            - paypal
            - banked
            - bitpay
            - gocardless
            - stripedd
            example: paypal
            type: string
          description: |-
            The method to use, this can be any of the methods that
            support redirect requests.

            When storing a new payment method, only `gocardless` and `stripedd`
            are currently supported.
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: US
          type: string
        external_identifier:
          description: An external identifier that can be used to match the account
            against your own records. This can only be set if the `store` flag is
            set to `true`.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - country
      - currency
      - method
      - redirect_url
      title: Redirect
      type: object
      x-tags:
      - Request Bodies
    TransactionCheckoutSessionRequest:
      description: Checkout Session payment method details to use in a transaction.
      properties:
        method:
          description: '`checkout-session`.'
          enum:
          - checkout-session
          example: checkout-session
          type: string
        id:
          description: The ID of the Checkout Session.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records. This can only be set if the `store` flag is set to `true`.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            We strongly recommend providing a `redirect_url` either when 3-D
            Secure is enabled and `three_d_secure_data` is not provided, or when
            using connections where 3DS is enabled. This value will be appended
            with both a transaction ID and status
            (e.g. `https://example.com/callback?gr4vy_transaction_id=123
            &gr4vy_transaction_status=capture_succeeded`) after 3-D Secure has
            completed. For those cases, if the value is not present, the
            transaction will be marked as failed.
          example: https://example.com/callback
          nullable: true
          type: string
      required:
      - id
      - method
      title: Checkout Session
      type: object
      x-tags:
      - Request Bodies
    UserCurrentUpdate:
      description: A request to update the current user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give a user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          type: string
      title: User (Update Current)
      type: object
      x-tags:
      - Users
    UserRequest:
      description: A request to create a user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give an user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          nullable: false
          type: string
        email_address:
          description: The email address for this user.
          example: john@example.com
          maxLength: 200
          minLength: 1
          nullable: false
          type: string
        role_ids:
          description: A list of role ids that will be assigned to the user being
            created. The creator must have `roles.write` or the role that is being
            assigned.
          example:
          - 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          items:
            format: uuid
            type: string
          minItems: 1
          nullable: false
          type: array
      title: User (Create)
      type: object
      x-tags:
      - Users
    UserUpdate:
      description: A request to update a user.
      properties:
        name:
          description: The full name of the user which is used in the Gr4vy admin
            panel to give a user a human readable name.
          example: John L.
          maxLength: 1000
          minLength: 1
          type: string
        role_ids:
          description: The IDs of the roles to assign to the user. Sending an empty
            list will remove all roles assigned to the user.
          example:
          - 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          items:
            format: uuid
            type: string
          type: array
      title: User (Update)
      type: object
      x-tags:
      - Users
    UserRole:
      allOf:
      - $ref: '#/components/schemas/Role'
      properties:
        assignment_id:
          description: The unique ID for this role assignment to the user.
          example: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          format: uuid
          type: string
      title: User Role
      type: object
      x-tags:
      - Users
    SetPasswordRequest:
      description: A request to set a password for a user.
      properties:
        reset_token:
          description: Unique reset token valid for 7 days.
          example: nXyWSHq2r5q_8F1_NXtppEStY7KbBHqwU9T8pdmOQa_LYJxpxxXcjOXL58xpHLy5gh1k6s0Myl3ygA6SnsxIjLXBKO3x1EZX3igq
          maxLength: 100
          minLength: 100
          nullable: false
          type: string
        password:
          description: The password the user to log in with.
          example: this-is-n0t-a-secure-passw0rd
          type: string
      title: Set Password (Create)
      type: object
      x-tags:
      - Users
    ResetPasswordRequest:
      description: A request to reset a password for a user.
      properties:
        email_address:
          description: The email address of the user account to reset.
          example: john@example.com
          type: string
      title: Reset Password (Create)
      type: object
      x-tags:
      - Users
    AntiFraudServiceUpdate_fields:
      description: A key-value pair that represents a field defined in the definition
        for this anti-fraud service.
      properties:
        key:
          description: The key of the field to set a value for.
          example: api_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 1
          type: string
      required:
      - key
      - value
      type: object
    ApiLog_response_body_details:
      description: Details of the log entry, stack trace and endpoint.
      example:
        pointer: /payment_method/number
        location: body
        message: ensure this value has at least 13 characters
        type: value_error.any_str.min_length
      properties:
        pointer:
          description: Log's pointer.
          example: /payment_method/number
          type: string
        message:
          description: Detailed message on the log entry.
          example: ensure this value has at least 13 characters
          type: string
        location:
          description: Location on where the error happened.
          example: body
          type: string
        type:
          description: Detailed error type that is specified in the log entry.
          example: value_error.any_str.min_length
          type: string
      type: object
    ApiLog_response_body:
      description: The JSON response body for the log entry.
      example:
        code: bad_request
        details:
          pointer: /payment_method/number
          location: body
          message: ensure this value has at least 13 characters
          type: value_error.any_str.min_length
        message: Request failed validation
        type: error
        status: 400
      properties:
        code:
          description: The error code.
          example: bad_request
          type: string
        message:
          description: The error message.
          example: Request failed validation
          type: string
        status:
          description: The HTTP error code.
          example: 400
          type: number
        type:
          description: Type of the log entry.
          example: error
          type: string
        details:
          $ref: '#/components/schemas/ApiLog_response_body_details'
      type: object
    AuditLog_user:
      description: The user who performed the action.
      example:
        email_address: john@example.com
        name: John L
        staff: false
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        status: active
      properties:
        id:
          description: The ID of the user.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        name:
          description: The name of the user.
          example: John L
          type: string
        email_address:
          description: The email address for this user.
          example: john@example.com
          nullable: true
          type: string
        staff:
          description: Whether the user is Gr4vy staff.
          example: false
          type: boolean
        status:
          description: The status of the user.
          enum:
          - active
          - pending
          - deleted
          example: active
          type: string
      type: object
    AuditLog_resource:
      description: The resource that was changed.
      example:
        name: Samuel J
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: buyer
      properties:
        type:
          description: The type of the resource.
          example: buyer
          type: string
        id:
          description: The ID of the resource.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        name:
          description: The descriptive name of the resource.
          example: Samuel J
          type: string
      type: object
    RequiredFields_address:
      description: The billing address of the buyer.
      example:
        country: true
        city: true
        state: true
        postal_code: true
        line1: true
        house_number_or_name: true
      properties:
        city:
          description: The city for the billing address.
          readOnly: true
          type: boolean
        country:
          description: The country for the billing address.
          readOnly: true
          type: boolean
        postal_code:
          description: The postal code or zip code for the billing address.
          readOnly: true
          type: boolean
        state:
          description: The state, county, or province for the billing address.
          readOnly: true
          type: boolean
        house_number_or_name:
          description: |-
            The house number or name for the billing address. Not all payment
            services use this field but some do.
          readOnly: true
          type: boolean
        line1:
          description: The first line of the billing address.
          readOnly: true
          type: boolean
      type: object
    ConnectionOptions_cybersource_anti_fraud:
      description: Additional options for Cybersource Decision Manager (anti-fraud).
      nullable: true
      properties:
        device_fingerprint_id:
          description: This field represents device fingerprint ID.
          example: yGeBAFYgFmM=
          type: string
        merchant_defined_data:
          additionalProperties:
            type: string
          description: This is a key-value object for merchant defined data.
          example:
            field1: value1
            field2: value2
          maxProperties: 100
          type: object
      type: object
    ConnectionOptions_adyen_card:
      description: |-
        Additional options to be passed through to Adyen when processing
        card transactions.
      nullable: true
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: |-
            A key-value object representing additional data to be passed
            to Adyen.
          example:
            riskdata.operatorCode: operatorCode,
            riskdata.operatorCountry: operatorCountry
          type: object
      type: object
    GooglePayRequest_assurance_details:
      description: Information about the validation performed on the payment data.
        (See https://developers.google.com/pay/api/web/reference/response-objects#assurance-details-specifications).
      nullable: true
      properties:
        account_verified:
          description: Indicates that card holder possession validation has been performed.
          example: false
          nullable: true
          type: boolean
        card_holder_authenticated:
          description: Indicates that identification and verifications was performed.
          example: false
          nullable: true
          type: boolean
      type: object
    PaymentService_fields:
      example:
        value: sk_test_26PHem9AhJZvU623DfE1x4sd
        key: secret_key
      properties:
        key:
          description: The key of the field.
          example: secret_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of the field.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 0
          type: string
      type: object
    PaymentServiceRequest_fields:
      description: A key-value pair that represents a field defined in the definition
        for this payment service.
      example:
        value: sk_test_26PHem9AhJZvU623DfE1x4sd
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set; you can unset optional fields
            by setting this to an empty string `""`.
          example: sk_test_26PHem9AhJZvU623DfE1x4sd
          maxLength: 5000
          minLength: 0
          type: string
      required:
      - key
      - value
      type: object
    PaymentServiceDefinition_fields:
      description: |-
        A single field that needs to be submitted for a payment service when it
        is created.
      example:
        format: text
        secret: true
        display_name: Private API key
        key: private_api_key
        required: true
      properties:
        key:
          description: The key of a field that needs to be submitted.
          example: private_api_key
          type: string
        display_name:
          description: The name to display for a field in the dashboard.
          example: Private API key
          type: string
        required:
          description: Defines if this field is required when the service is created.
          example: true
          type: boolean
        format:
          description: Defines the type of input that needs to be rendered for this
            field.
          enum:
          - text
          - multiline
          - number
          example: text
          type: string
        secret:
          description: |-
            Defines if this field is secret. When `true` the field is not
            returned when querying the payment service.
          example: true
          type: boolean
      type: object
    PaymentServiceDefinition_supported_features:
      description: Features supported by the payment definition.
      example:
        network_tokens: false
        requires_webhook_setup: true
        network_tokens_toggle: false
        payment_method_tokenization: true
        void: true
        payment_method_tokenization_toggle: false
        refunds: true
        delayed_capture: false
        three_d_secure_hosted: true
        open_loop_toggle: false
        network_tokens_default: true
        three_d_secure_pass_through: false
        open_loop: true
        partial_refunds: false
        verify_credentials: false
      properties:
        delayed_capture:
          description: |-
            Supports [capturing](#operation/capture-transaction) authorized
            transactions.
          example: false
          type: boolean
        network_tokens:
          description: |-
            Supports passing decrypted digital wallet (e.g. Apple Pay)
            tokens to the underlying processor.
          example: false
          type: boolean
        network_tokens_default:
          description: Supports processing network tokens by default.
          example: true
          type: boolean
        network_tokens_toggle:
          description: Supports toggling processing of network tokens on or off.
          example: false
          type: boolean
        open_loop:
          description: |-
            Supports processing transactions with either raw PAN details or
            network tokens.
          example: true
          type: boolean
        open_loop_toggle:
          description: Supports toggling processing as open-loop on or off.
          example: false
          type: boolean
        partial_refunds:
          description: |-
            Supports [partially refunding](#operation/refund-transaction) captured
            transactions.
          example: false
          type: boolean
        payment_method_tokenization:
          description: Supports storing a payment method via tokenization.
          example: true
          type: boolean
        payment_method_tokenization_toggle:
          description: |-
            Supports toggling tokenization for a payment method on or off
            from the dashboard.
          example: false
          type: boolean
        refunds:
          description: |-
            Supports [refunding](#operation/refund-transaction) captured
            transactions.
          example: true
          type: boolean
        requires_webhook_setup:
          description: Requires merchant to set up `webhook_url` manually with provider.
          example: true
          type: boolean
        three_d_secure_hosted:
          description: Supports hosted 3-D Secure with a redirect.
          example: true
          type: boolean
        three_d_secure_pass_through:
          description: Supports passing 3-D Secure data to the underlying processor.
          example: false
          type: boolean
        verify_credentials:
          description: |-
            Supports verifying the credentials entered while setting up the
            underlying processor. This is for internal use only.
          example: false
          type: boolean
        void:
          description: |-
            Supports [voiding](#operation/void-transaction) authorized
            transactions.
          example: true
          type: boolean
      type: object
    PaymentOption_context:
      description: |-
        Additional context specific to the payment option.
        This is currently only returned for Apple Pay and Google Pay.
      example:
        required_fields:
          email_address: true
          address:
            country: true
            city: true
            state: true
            postal_code: true
            line1: true
            house_number_or_name: true
          last_name: true
          phone_number: true
          first_name: true
          tax_id: true
        gateway_merchant_id: gateway_merchant_id
        approval_ui:
          width: 300px
          height: 300px
        merchant_name: merchant_name
        supported_schemes:
        - null
        - null
        gateway: gateway
      properties:
        gateway:
          description: Gateway used for Google Pay payments.
          type: string
        gateway_merchant_id:
          description: Gateway merchant identifier used for Google Pay payments.
          type: string
        merchant_name:
          description: |-
            Display name of the merchant as registered with the digital wallet
            provider.
          type: string
        supported_schemes:
          description: Card schemes supported by the digital wallet provider.
          items:
            $ref: '#/components/schemas/PaymentOptionCardScheme'
          type: array
        approval_ui:
          $ref: '#/components/schemas/PaymentOptionApprovalUI'
        required_fields:
          $ref: '#/components/schemas/RequiredFields'
      type: object
    ReportExecutionSummary_context:
      description: |-
        Contains the context values used to compute the value of date-time
        placeholders such as `month_start` and `month_end` if present in
        the report's specification. Date-time placeholders are dynamic
        timestamps that change with every report execution.
      properties:
        reference_timestamp:
          description: |-
            The date and time used by the system as a reference point to
            compute date-time placeholders.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        reference_timezone:
          description: The time zone used to compute date-time placeholders.
          example: Europe/London
          type: string
      type: object
    RoleAssignment_assignee:
      description: The assignee for this role assignment.
      example:
        id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
        type: user
      properties:
        type:
          description: The type of the assignee.
          enum:
          - user
          example: user
          type: string
        id:
          description: The unique ID of the assignee.
          example: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          format: uuid
          type: string
      type: object
    RoleAssignmentRequest_role:
      description: The role to associate with the role assignment.
      example:
        id: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
      properties:
        id:
          description: The ID of the role to associate with the role assignment.
          example: 462ab2e2-3e29-44bd-b39f-e4d1293affbb
          format: uuid
          type: string
      required:
      - id
      type: object
    RoleAssignmentRequest_assignee:
      description: The assignee to associate with the role assignment.
      example:
        id: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
        type: user
      properties:
        type:
          description: The type of the assignee to associate with the role assignment.
          enum:
          - user
          example: user
          type: string
        id:
          description: The ID of the assignee to associate with the role assignment.
          example: 42aae896-8ce2-4a60-b80a-5f6ae1dfbbd4
          format: uuid
          type: string
      required:
      - id
      - type
      type: object
    ThreeDSecureDataV1_allOf:
      properties:
        authentication_response:
          description: The authentication response.
          example: "Y"
          maxLength: 1
          type: string
        cavv_algorithm:
          description: The CAVV Algorithm used.
          maxLength: 1
          type: string
        xid:
          description: The transaction identifier.
          type: string
      required:
      - authentication_response
      - cavv_algorithm
      - xid
    ThreeDSecureDataV2_allOf:
      properties:
        authentication_response:
          description: |-
            The transaction status from the challenge result
            (not required for frictionless).
          example: "Y"
          maxLength: 1
          type: string
        directory_transaction_id:
          description: The transaction identifier.
          example: c4e59ceb-a382-4d6a-bc87-385d591fa09d
          type: string
      required:
      - directory_transaction_id
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
