openapi: 3.0.0
info:
  contact:
    email: code@gr4vy.com
    name: Gr4vy Support
    url: https://gr4vy.com
  description: |-
    Welcome to the Gr4vy API reference documentation.
    Our API is still very much a work in product and subject to change.
  license:
    name: MIT
    url: https://raw.githubusercontent.com/gr4vy/gr4vy-openapi/main/LICENSE
  termsOfService: https://gr4vy.com
  title: Gr4vy API
  version: 1.1.0-beta
servers:
- url: https://api.{gr4vy_id}.gr4vy.app
  variables:
    gr4vy_id:
      default: plantly
      description: The subdomain for your Gr4vy instance.
security:
- BearerAuth: []
tags:
- description: |-
    In Gr4vy, a buyer represents your customer, the shopper who's performing
    a checkout and making a purchase.

    A buyer can be used by you to:

    * Display a human readable name (`display_name`) for a buyer in the Gr4vy
    admin panel
    * Associate multiple tokenized payment methods with a single user
    * Initialize **Gr4vy Embed** with the buyer ID, automatically displaying the
      buyer's previously stored payment methods, allowing for faster checkout.
  name: Buyers
- description: |-
    In Gr4vy, a digital wallet represents a way for a buyer to pay using
    card details already stored on their device via a digital wallet service
    such as Apple Pay or Google Pay. The buyer will not have to fill in their
    card details on checkout.

    The digital wallets API can be used to:

    * Register with a digital wallet provider.
    * List digital wallets currently registered.
  name: Digital Wallets
- description: |-
    In Gr4vy, a payment method token represents the token created by a payment
    service for a payment method.

    The payment method token API can be used to:

    * List all the available tokens for a payment method
    * Use these tokens to make direct API calls to that payment service,
    without the need to go through Gr4vy.
  name: Payment Method Tokens
- description: |-
    In Gr4vy, a payment method represents a way in which a payment can be
    processed, for example a card, a PayPal account, or a bank account.

    The payment method API can be used to:

    * List all the available payment methods
    * Filter the available payment method for a buyer in a specific currency
    and country.
    * Store (also known as tokenize) a payment method for a buyer.
    * Fetch all previously tokenized payment methods for a buyer.
  name: Payment Methods
- description: |-
    In Gr4vy, a payment option represents a list of methods (card, PayPal,
    etc) that are available for a given locale.

    The payment options API can be used to:

    * Determine what types of payments can be processed in a specific locale.
    * Display a list options to a buyer to choose from.
  name: Payment Options
- description: |-
    Payment service definitions describe the fields required for a payment
    service to be configured.
  name: Payment Service Definitions
- description: |-
    In Gr4vy, a payment service represents a configured payment provider
    (Stripe, PayPal, Adyen, etc) for a specific payment type (card, bitcoin,
    etc)

    The payment services API can be used to:

    * Provide Gr4vy with the payment credentials for a payment provider.
    * Set a display name for a payment provider.
  name: Payment Services
- description: |-
    In Gr4vy, a transaction represents a payment in any state, either before it
    is authorized, once it is captured, or after it has been refunded.

    The transactions API can be used to:

    - Authorize, capture, and store cards.
    - Authorize, capture, and store alternative payment methods like PayPal.
    - Refund, void, and otherwise cancel existing transactions.
  name: Transactions
paths:
  /buyers:
    get:
      description: Returns a list of buyers.
      operationId: list-buyers
      parameters:
      - description: |-
          Filters the results to only the buyers for which the `display_name` or
          `external_identifier` matches this value. This field allows for a partial
          match, matching any buyer for which either of the fields partially or
          completely matches.
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: John
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyers'
          description: Returns a list of buyers.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List buyers
      tags:
      - Buyers
    post:
      description: |
        Adds a buyer, allowing for payment methods and transactions to be associated
        to this buyer.
      operationId: add-buyer
      requestBody:
        content:
          application/json:
            examples:
              Create a buyer:
                value:
                  external_identifier: "412231123"
                  display_name: John L.
            schema:
              $ref: '#/components/schemas/BuyerRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the buyer that was added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error409DuplicateRecord'
          description: Returns an error if duplicate resource has been found.
      summary: New buyer
      tags:
      - Buyers
  /buyers/{buyer_id}:
    delete:
      description: |-
        Deletes a buyer record. Any associated tokenized payment methods will remain
        in the system but no longer associated to the buyer.
      operationId: delete-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete buyer
      tags:
      - Buyers
    get:
      description: Gets the information about a buyer.
      operationId: get-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the information about a buyer.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns a generic error.
      summary: Get buyer
      tags:
      - Buyers
    put:
      description: |
        Updates a buyer's details.
      operationId: update-buyer
      parameters:
      - description: The unique ID for a buyer.
        explode: false
        in: path
        name: buyer_id
        required: true
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          format: uuid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Update a buyer:
                value:
                  external_identifier: "42623266"
                  display_name: John D.
            schema:
              $ref: '#/components/schemas/BuyerUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Buyer'
          description: Returns the updated buyer record.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update buyer
      tags:
      - Buyers
  /buyers/payment-methods:
    get:
      description: |-
        Returns a list of stored (tokenized) payment methods for a buyer in a short
        tokenized format. Only payment methods that are compatible with at least one
        active payment service in that region are shown.
      operationId: list-buyer-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods--Tokenized'
          description: |-
            Returns a list of available payment methods for a buyer, filtered by the
            given currency and country code.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List stored payment methods for a buyer
      tags:
      - Payment Methods
  /payment-methods:
    get:
      description: Returns a list of stored (tokenized) payment methods.
      operationId: list-payment-methods
      parameters:
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethods'
          description: Returns a list of payment methods.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment methods
      tags:
      - Payment Methods
    post:
      description: Stores and tokenizes a new payment method.
      operationId: store-payment-method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethodRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns the created payment method.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New payment method
      tags:
      - Payment Methods
  /payment-methods/{payment_method_id}:
    delete:
      description: Removes a stored payment method.
      operationId: delete-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment method
      tags:
      - Payment Methods
    get:
      description: Gets the details for a stored payment method.
      operationId: get-payment-method
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: Returns a payment method.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get stored payment method
      tags:
      - Payment Methods
  /payment-methods/{payment_method_id}/tokens:
    get:
      description: Returns a list of PSP tokens for a given payment method.
      operationId: list-payment-method-tokens
      parameters:
      - description: The ID of the payment method.
        explode: false
        in: path
        name: payment_method_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          format: uuid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodTokens'
          description: Returns a list of payment method tokens.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: List payment method tokens
      tags:
      - Payment Method Tokens
  /payment-options:
    get:
      description: |-
        Returns a list of available payment method options for a currency
        and country.
      operationId: list-payment-options
      parameters:
      - description: |-
          Filters the results to only the items which support this country code. A
          country is formatted as 2-letter ISO country code.
        explode: true
        in: query
        name: country
        required: false
        schema:
          example: US
          type: string
        style: form
      - description: |-
          Filters the results to only the items which support this currency code. A
          currency is formatted as 3-letter ISO currency code.
        explode: true
        in: query
        name: currency
        required: false
        schema:
          example: USD
          type: string
        style: form
      - description: |-
          An ISO 639-1 Language Code and optional ISO 3166 Country Code. This locale
          determines the language for the labels returned for every payment option.
        explode: true
        in: query
        name: locale
        required: false
        schema:
          default: en-US
          example: en-US
          pattern: ^[a-z]{2}(?:-[A-Z]{2})?$
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentOptions'
          description: |-
            Returns a list of available payment options for the given query
            parameters.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400BadRequest'
          description: Returns an error if  any of the query parameters are not recognised.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment options
      tags:
      - Payment Options
  /payment-services:
    get:
      description: Lists the currently configured and activated payment services.
      operationId: list-payment-services
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `method` has been set to
          this value.
        explode: true
        in: query
        name: method
        required: false
        schema:
          enum:
          - card
          - paypal
          - banked
          - gocardless
          - stripedd
          - applepay
          example: card
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServices'
          description: Returns a list of payment services.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment services
      tags:
      - Payment Services
    post:
      description: Adds a new payment service by providing a custom name and a value
        for each of the required fields.
      operationId: add-payment-service
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceRequest'
      responses:
        "201":
          content:
            application/json:
              examples:
                Stripe:
                  value:
                    id: faaad066-30b4-4997-a438-242b0752d7e1
                    type: payment-service
                    payment_service_definition_id: stripe
                    method: card
                    display_name: Stripe
                    status: pending
                    accepted_currencies:
                    - EUR
                    accepted_countries:
                    - DE
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the created payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New payment service
      tags:
      - Payment Services
  /payment-services/{payment_service_id}:
    delete:
      description: Deletes a specific active payment service.
      operationId: delete-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Delete payment service
      tags:
      - Payment Services
    get:
      description: Retrieves the details of a single configured payment service.
      operationId: get-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns a payment service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service
      tags:
      - Payment Services
    put:
      description: Updates an existing payment service. Allows all fields to be changed
        except for the service ID.
      operationId: update-payment-service
      parameters:
      - description: The ID of the payment service.
        explode: false
        in: path
        name: payment_service_id
        required: true
        schema:
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentServiceUpdate'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentService'
          description: Returns the updated payment service.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update payment service
      tags:
      - Payment Services
  /payment-service-definitions:
    get:
      description: Returns a list of all available payment service definitions.
      operationId: list-payment-service-definitions
      parameters:
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinitions'
          description: Returns a list of payment service definitions.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List payment service definitions
      tags:
      - Payment Service Definitions
  /payment-service-definitions/{payment_service_definition_id}:
    get:
      description: Gets the definition for a payment service.
      operationId: get-payment-service-definition
      parameters:
      - description: The unique ID of the payment service definition.
        explode: false
        in: path
        name: payment_service_definition_id
        required: true
        schema:
          example: stripe-card
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentServiceDefinition'
          description: Returns a payment service definition.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get payment service definition
      tags:
      - Payment Service Definitions
  /digital-wallets:
    get:
      description: Returns a list of all registered digital wallets.
      operationId: list-digital-wallets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallets'
          description: Returns a list of registered digital wallets.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List digital wallets
      tags:
      - Digital Wallets
    post:
      description: Register with a digital wallet provider.
      operationId: register-digital-wallet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the newly registered digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: Register digital wallet
      tags:
      - Digital Wallets
  /digital-wallets/{digital_wallet_id}:
    delete:
      description: |-
        De-registers a digital wallet with a provider. Upon successful
        de-registration, the digital wallet's record is deleted and will no
        longer be available.
      operationId: deregister-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "204":
          description: Returns an empty response.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: De-register digital wallet
      tags:
      - Digital Wallets
    get:
      description: Returns a registered digital wallet.
      operationId: get-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns a registered digital wallet.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Get digital wallet
      tags:
      - Digital Wallets
    put:
      description: Updates the values a digital wallet was registered with.
      operationId: update-digital-wallet
      parameters:
      - description: The ID of the registered digital wallet.
        explode: false
        in: path
        name: digital_wallet_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DigitalWalletUpdate'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DigitalWallet'
          description: Returns the updated digital wallet.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404NotFound'
          description: Returns an error if the resource can not be found.
      summary: Update digital wallet
      tags:
      - Digital Wallets
  /transactions:
    get:
      description: Lists all transactions for an account. Sorted by last `updated_at`
        status.
      operationId: list-transactions
      parameters:
      - description: |-
          Filters the transactions to only the items for which the `id` or
          `external_identifier` matches this value. This field allows for a partial
          match, matching any transaction for which either of the fields partially or
          completely matches.
        explode: true
        in: query
        name: search
        required: false
        schema:
          example: be828248-56de-481e-a580-44b6e1d4df81
          type: string
        style: form
      - description: |-
          Filters the results to only the transactions for which the `status`
          matches this value.
        explode: true
        in: query
        name: transaction_status
        required: false
        schema:
          enum:
          - processing
          - processing_failed
          - capture_succeeded
          - capture_pending
          - capture_declined
          - capture_failed
          - authorization_succeeded
          - authorization_pending
          - authorization_declined
          - authorization_failed
          - authorization_expired
          - authorization_voided
          - refund_succeeded
          - refund_pending
          - refund_declined
          - refund_failed
          - buyer_approval_succeeded
          - buyer_approval_pending
          - buyer_approval_declined
          - buyer_approval_failed
          - buyer_approval_timedout
          example: capture_succeeded
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `id` that matches this value.
        explode: true
        in: query
        name: buyer_id
        required: false
        schema:
          example: 8724fd24-5489-4a5d-90fd-0604df7d3b83
          type: string
        style: form
      - description: |-
          Filters the results to only the items for which the `buyer` has an
          `external_identifier` that matches this value.
        explode: true
        in: query
        name: buyer_external_identifier
        required: false
        schema:
          example: user-12345
          type: string
        style: form
      - description: Filters the results to only transactions created before this
          ISO date-time string.
        explode: true
        in: query
        name: before_created_at
        required: false
        schema:
          example: 2012-12-12T10:53:43+00:00
          type: string
        style: form
      - description: Filters the results to only transactions created after this ISO
          date-time string.
        explode: true
        in: query
        name: after_created_at
        required: false
        schema:
          example: 2012-12-12T10:53:43+00:00
          type: string
        style: form
      - description: |-
          Filters the results to only transactions last updated before this ISO
          date-time string.
        explode: true
        in: query
        name: before_updated_at
        required: false
        schema:
          example: 2012-12-12T10:53:43+00:00
          type: string
        style: form
      - description: |-
          Filters the results to only transactions last updated after this ISO
          date-time string.
        explode: true
        in: query
        name: after_updated_at
        required: false
        schema:
          example: 2012-12-12T10:53:43+00:00
          type: string
        style: form
      - description: Defines the maximum number of items to return for this request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 20
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        style: form
      - description: |-
          A cursor that identifies the page of results to return. This is used to
          paginate the results of this API.

          For the first page of results, this parameter can be left out.
          For additional pages, use the value returned by the API in
          the `next_cursor` field. Similarly the `previous_cursor` can be used to
          reverse backwards in the list.
        explode: true
        in: query
        name: cursor
        required: false
        schema:
          example: ZXhhbXBsZTE
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transactions'
          description: Returns a paginated list of transactions for an account.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: List transactions
      tags:
      - Transactions
    post:
      description: |
        Attempts to create an authorization for a payment method. In some cases it is
        not possible to create the authorization without redirecting the user for
        their authorization. In these cases the status is set to
        `buyer_approval_pending` and an `approval_url` is returned.

        Additionally, this endpoint accepts a few additional fields that allow for
        simultaneous capturing and storage of the payment method.

        * `store` - Use this field to store the payment method for
        future use. Not all payment methods support this feature.
        * `capture` - Use this method to also perform a capture of the transaction
        after it has been authorized.
      operationId: authorize-new-transaction
      requestBody:
        content:
          application/json:
            examples:
              Authorize a new card:
                value:
                  amount: 1299
                  currency: USD
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorized and tokenize a card:
                value:
                  amount: 1299
                  currency: USD
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize, capture, and tokenize a card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  store: true
                  payment_method:
                    method: card
                    number: "4111111111111111"
                    expiration_date: 11/25
                    security_code: "123"
                    redirect_url: https://example.com/callback
              Authorize and capture a GoCardless transaction:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: gocardless
                    redirect_url: https://example.com/callback
                    country: USD
                    currency: US
              Authorize and capture using a previously tokenized card:
                value:
                  amount: 1299
                  currency: USD
                  intent: capture
                  payment_method:
                    method: id
                    id: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
            schema:
              $ref: '#/components/schemas/TransactionRequest'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the created transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
      summary: New transaction
      tags:
      - Transactions
  /transactions/{transaction_id}:
    get:
      description: Get information about a transaction.
      operationId: get-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns a transaction resource.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Get transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/capture:
    post:
      description: Captures a previously authorized transaction.
      operationId: capture-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              Capture an authorization:
                value:
                  amount: 1299
                  currency: USD
            schema:
              $ref: '#/components/schemas/TransactionCaptureRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns the captured transaction.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the request was badly formatted or missing
            required fields.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Capture transaction
      tags:
      - Transactions
  /transactions/{transaction_id}/refund:
    post:
      description: |-
        Refunds or voids transaction. If this transaction was already captured, it
        will issue a refund. If the transaction was not yet captured the authorization
        will instead be voided.
      operationId: refund-transaction
      parameters:
      - description: The ID for the transaction to get the information for.
        explode: false
        in: path
        name: transaction_id
        required: true
        schema:
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRefundRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Returns cancelled transaction.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401Unauthorized'
          description: Returns an error if no valid authentication was provided.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorGeneric'
          description: Returns an error if the resource can not be found or has not
            yet been created.
      summary: Refund or void transactions
      tags:
      - Transactions
components:
  schemas:
    Address:
      description: Billing details associated to a buyer.
      properties:
        city:
          description: The city for the billing address.
          example: London
          maxLength: 100
          minLength: 1
          nullable: false
          type: string
        country:
          description: The country for the billing address.
          example: GB
          maxLength: 2
          minLength: 1
          nullable: false
          type: string
        postal_code:
          description: The postal code or zip code for the billing address.
          example: "789123"
          maxLength: 50
          minLength: 1
          nullable: false
          type: string
        state:
          description: The state, county, or province for the billing address.
          example: Greater London
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        state_code:
          description: |-
            The code of state, county, or province for the billing address in
            ISO 3166-2 format.
          example: GB-LND
          maxLength: 6
          minLength: 4
          nullable: true
          type: string
        house_number_or_name:
          description: |-
            The house number or name for the billing address. Not all payment
            services use this field but some do.
          example: "10"
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        line1:
          description: The first line of the billing address.
          example: 10 Oxford Street
          maxLength: 255
          minLength: 1
          nullable: false
          type: string
        line2:
          description: The second line of the billing address.
          example: New Oxford Court
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        organization:
          description: |-
            The optional name of the company or organisation to add
            to the billing address.
          example: Gr4vy
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
      required:
      - city
      - country
      - line1
      - postal_code
      - state
      title: Address
      type: object
      x-tags:
      - Buyers
    AddressUpdate:
      allOf:
      - $ref: '#/components/schemas/Address'
      required:
      - city
      - country
      - house_number_or_name
      - line1
      - line2
      - organization
      - postal_code
      - state
      title: Address (Update)
      type: object
      x-tags:
      - Buyers
    ApplePayRequest:
      description: Details for a Apple Pay payment method.
      properties:
        method:
          description: '`applepay`.'
          enum:
          - applepay
          example: applepay
          type: string
        token:
          description: |-
            The encrypted (opaque) token that was passed to the `onpaymentauthorized`
            callback by the Apple Pay integration.
          type: object
      required:
      - method
      - token
      title: Apple Pay payment method request
      type: object
      x-tags:
      - Request Bodies
    ApplePaySessionRequest:
      description: Initiates a new session with Apple Pay.
      properties:
        validation_url:
          description: |-
            Validation URL obtained from the event passed to a
            `onvalidatemerchant` callback.
          type: string
        domain_name:
          description: Fully qualified domain name of the merchant.
          type: string
      required:
      - domain_name
      - validation_url
      title: Apple Pay session request
      type: object
      x-tags:
      - Request Bodies
    BillingDetails:
      description: Billing details to use associated to a buyer.
      properties:
        first_name:
          description: The first name(s) or given name for the buyer.
          example: John
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        last_name:
          description: The last name, or family name, of the buyer.
          example: Lunn
          maxLength: 255
          minLength: 1
          nullable: true
          type: string
        email_address:
          description: The email address for the buyer.
          example: john@example.com
          maxLength: 320
          minLength: 1
          nullable: true
          type: string
        phone_number:
          description: |-
            The phone number to use for this request. This expect the number in the
            [E164 number standard](https://www.twilio.com/docs/glossary/what-e164).
          example: +1234567890
          maxLength: 50
          minLength: 1
          nullable: true
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        address:
          allOf:
          - $ref: '#/components/schemas/Address'
          - description: The billing address for the buyer.
            nullable: true
        tax_id:
          allOf:
          - $ref: '#/components/schemas/TaxId'
          - description: The tax information associated with the billing details.
            nullable: true
      title: Billing details request
      type: object
      x-tags:
      - Buyers
    BillingDetailsUpdateRequest:
      allOf:
      - $ref: '#/components/schemas/BillingDetails'
      properties:
        address:
          allOf:
          - $ref: '#/components/schemas/AddressUpdate'
          description: Address associated with the billing details.
          nullable: true
      title: Billing Details Update Request
      type: object
      x-tags:
      - Buyers
    Buyer:
      example:
        external_identifier: user-789123
        billing_details: ""
        updated_at: 2013-07-16T19:23:00Z
        created_at: 2013-07-16T19:23:00Z
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        type: buyer
        display_name: John L.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          - description: The billing details associated with a buyer.
            nullable: true
        created_at:
          description: |-
            The date and time
            when this buyer was created in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: |-
            The date and time
            when this buyer was last updated in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
      title: Buyer
      type: object
      x-tags:
      - Buyers
    Buyers:
      description: A list of buyers.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - external_identifier: user-789123
          billing_details: ""
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
        - external_identifier: user-789123
          billing_details: ""
          updated_at: 2013-07-16T19:23:00Z
          created_at: 2013-07-16T19:23:00Z
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          type: buyer
          display_name: John L.
      properties:
        items:
          description: A list of buyers.
          items:
            $ref: '#/components/schemas/Buyer'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Buyers
      type: object
      x-tags:
      - Buyers
    Buyer--Snapshot:
      description: |-
        Snapshot of a buyer, as used when embedded inside other
        resources.
      properties:
        type:
          description: The type of this resource. Is always `buyer`.
          enum:
          - buyer
          example: buyer
          type: string
        id:
          description: The unique Gr4vy ID for this buyer.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          - description: The billing details associated with the buyer, which include
              the address and tax ID.
            nullable: true
      title: Buyer (Snapshot)
      type: object
      x-tags:
      - Buyers
    BuyerRequest:
      description: A request to create a buyer.
      example:
        external_identifier: user-789123
        billing_details: ""
        display_name: John L.
      properties:
        external_identifier:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: user-789123
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        display_name:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: John L.
          maxLength: 200
          minLength: 1
          nullable: true
          type: string
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetails'
          - description: The optional billing details to create a buyer.
            nullable: true
      title: Buyer (Create)
      type: object
      x-tags:
      - Buyers
    BuyerUpdate:
      allOf:
      - $ref: '#/components/schemas/BuyerRequest'
      description: A request to update a buyer.
      example:
        billing_details: ""
      properties:
        billing_details:
          allOf:
          - $ref: '#/components/schemas/BillingDetailsUpdateRequest'
          description: The optional billing details to update a buyer.
          nullable: true
      title: Buyer (Update)
      type: object
      x-tags:
      - Buyers
    CardRequest:
      description: Card details to use in a transaction or to register a new payment
        method.
      properties:
        method:
          description: '`card`.'
          enum:
          - card
          example: card
          type: string
        number:
          description: |-
            The 15-16 digit number for this card as it can be found on the
            front of the card.
          example: "4111111111111111"
          maxLength: 16
          minLength: 14
          pattern: ^[0-9]{14,16}$
          type: string
        expiration_date:
          description: The expiration date of the card, formatted `MM/YY`.
          example: 11/25
          maxLength: 5
          minLength: 5
          pattern: ^\d{2}/\d{2}$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: card-323444
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer after a 3D Secure flow
            has been completed. This will be appended with both a
            transaction ID and status (e.g. `https://example.com/callback?
            gr4vy_transaction_id=123&gr4vy_transaction_status=capture_succeeded`).
            This is required if the transaction request body does not
            include `three_d_secure_data`.
          example: https://example.com/callback
          type: string
      required:
      - expiration_date
      - method
      - number
      - security_code
      title: Card
      type: object
      x-tags:
      - Request Bodies
    DigitalWallet:
      description: A digital wallet (e.g. Apple Pay) that has been registered.
      example:
        updated_at: 2012-12-12T10:53:43Z
        provider: apple
        merchant_name: Gr4vy
        created_at: 2012-12-12T10:53:43Z
        id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
        type: digital-wallet
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        type:
          description: '`digital-wallet`.'
          enum:
          - digital-wallet
          example: digital-wallet
          type: string
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        id:
          description: The ID of the registered digital wallet.
          example: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          format: uuid
          type: string
        merchant_name:
          description: The name of the merchant the digital wallet is registered to.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: The main URL of the merchant.
          example: https://example.com
          format: url
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        created_at:
          description: The date and time when this digital wallet was registered.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this digital wallet was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
      title: Digital Wallet
      type: object
      x-tags:
      - Digital Wallets
    DigitalWallets:
      description: A list of registered digital wallets.
      example:
        items:
        - updated_at: 2012-12-12T10:53:43Z
          provider: apple
          merchant_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: digital-wallet
          merchant_url: https://example.com
          domain_names:
          - example.com
        - updated_at: 2012-12-12T10:53:43Z
          provider: apple
          merchant_name: Gr4vy
          created_at: 2012-12-12T10:53:43Z
          id: 8d3fe99b-1422-42e6-bbb3-932d95ae5f79
          type: digital-wallet
          merchant_url: https://example.com
          domain_names:
          - example.com
      properties:
        items:
          description: A list of registered digital wallets.
          items:
            $ref: '#/components/schemas/DigitalWallet'
          type: array
      title: Digital Wallets
      type: object
      x-tags:
      - Digital Wallets
    DigitalWalletRequest:
      description: Merchant details used to register with a digital wallet provider.
      example:
        provider: apple
        merchant_name: Gr4vy
        accept_terms_and_conditions: true
        merchant_url: https://example.com
        domain_names:
        - example.com
      properties:
        provider:
          description: The name of the digital wallet provider.
          enum:
          - apple
          - google
          example: apple
          type: string
        merchant_name:
          description: |-
            The name of the merchant. This is used to register the merchant with a
            digital wallet provider and this name is not displayed to the buyer.
          example: Gr4vy
          type: string
        merchant_url:
          default: "null"
          description: |-
            The main URL of the merchant. This is used to register the merchant with
            a digital wallet provider and this URL is not displayed to the buyer.
          example: https://example.com
          format: url
          nullable: true
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
        accept_terms_and_conditions:
          description: |-
            The explicit acceptance of the digital wallet provider's terms and
            conditions by the merchant. Needs to be `true` to register a new digital
            wallet.
          example: true
          type: boolean
      required:
      - accept_terms_and_conditions
      - domain_names
      - merchant_name
      - provider
      title: Digital Wallet (Register)
      type: object
      x-tags:
      - Request Bodies
    DigitalWalletUpdate:
      description: Request body to update a registered digital wallet's details.
      example:
        merchant_name: Gr4vy
        domain_names:
        - example.com
      properties:
        merchant_name:
          description: |-
            The name of the merchant. This is used to update the value initially
            used to register with a digital wallet provider and this name is not
            displayed to the buyer.
          example: Gr4vy
          type: string
        domain_names:
          description: |-
            The list of domain names that a digital wallet can be used on. To use a
            digital wallet on a website, the domain of the site is required to be
            in this list.
          example:
          - example.com
          items:
            type: string
          maxItems: 99
          minItems: 1
          type: array
      title: Digital Wallet (Update)
      type: object
      x-tags:
      - Request Bodies
    ErrorGeneric:
      description: A generic client error.
      properties:
        type:
          default: error
          description: The type of this object. This is always `error`.
          enum:
          - error
          example: error
          type: string
        code:
          description: A custom code to further describe the type of error being returned.
            This code provides further specification within the HTTP `status` code
            and can be used by a program to define logic based on the error.
          example: incorrect_json
          type: string
        status:
          description: The HTTP status code of this error.
          example: 499
          exclusiveMaximum: true
          format: int32
          maximum: 600
          minimum: 200
          type: integer
        message:
          description: 'A human readable message that describes the error. The content
            of this field should not be used to determine any business logic. '
          example: The request body was not valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Generic Error
      type: object
      x-tags:
      - Errors
    Error400BadRequest:
      description: Bad Request (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`bad_request`.'
          enum:
          - bad_request
          example: bad_request
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: |-
            Describes the fields that are missing or incorrectly formatted in the API
            request.
          example: Missing '****' field
          type: string
        details:
          description: A list of detail objects that further clarify the reason for
            the error.
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Bad Request
      type: object
      x-tags:
      - Errors
    Error400IncorrectJson:
      description: Incorrect JSON (HTTP 400).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`incorrect_json`.'
          enum:
          - incorrect_json
          example: incorrect_json
          type: string
        status:
          description: '`400`.'
          enum:
          - 400
          example: 400
          type: integer
        message:
          description: Incorrect JSON. The request body could not be parsed as valid
            JSON.
          example: Incorrect JSON. The request body could not be parsed as valid JSON.
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Incorrect JSON
      type: object
      x-tags:
      - Errors
    Error401Unauthorized:
      description: Unauthorized Error (HTTP 401).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`unauthorized`.'
          enum:
          - unauthorized
          example: unauthorized
          type: string
        status:
          description: '`401`.'
          enum:
          - 401
          example: 401
          type: integer
        message:
          description: No valid API authentication found.
          enum:
          - No valid API authentication found
          example: No valid API authentication found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Unauthorized Error
      type: object
      x-tags:
      - Errors
    Error403Forbidden:
      description: Forbidden Error (HTTP 403).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`forbidden`.'
          enum:
          - forbidden
          example: forbidden
          type: string
        status:
          description: '`403`.'
          enum:
          - 403
          example: 403
          type: integer
        message:
          description: Invalid credentials.
          enum:
          - Invalid credentials
          example: Invalid credentials
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Forbidden Error
      type: object
      x-tags:
      - Errors
    Error404PendingCreation:
      description: Pending Creation Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`pending_creation`.'
          enum:
          - pending_creation
          example: pending_creation
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource is still pending.
          enum:
          - The resource is still pending
          example: The resource is still pending
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Pending Creation Error
      type: object
      x-tags:
      - Errors
    Error404NotFound:
      description: Not Found Error (HTTP 404).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`not_found`.'
          enum:
          - not_found
          example: not_found
          type: string
        status:
          description: '`404`.'
          enum:
          - 404
          example: 404
          type: integer
        message:
          description: The resource could not be found.
          enum:
          - The resource could not be found
          example: The resource could not be found
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Not Found Error
      type: object
      x-tags:
      - Errors
    Error409DuplicateRecord:
      description: Duplicate Record Error (HTTP 409).
      properties:
        type:
          description: '`error`.'
          enum:
          - error
          example: error
          type: string
        code:
          description: '`duplicate_record`.'
          enum:
          - duplicate_record
          example: duplicate_record
          type: string
        status:
          description: '`409`.'
          enum:
          - 409
          example: 409
          type: integer
        message:
          description: Further details on the field that triggered the error.
          example: A duplicate ecord exists with this external_identifier value
          type: string
        details:
          description: |-
            A list of detail objects that further clarify the reason for the error.
            Not every error supports more detail.
          example: []
          items:
            $ref: '#/components/schemas/ErrorDetail'
          type: array
      title: Duplicate Record Error
      type: object
      x-tags:
      - Errors
    ErrorDetail:
      description: Additional detail about the part of a request body that caused
        an issue.
      properties:
        location:
          description: The location where the error caused an issue.
          enum:
          - query
          - body
          - path
          - header
          example: body
          type: string
        type:
          description: A unique identifier for the type of error that occurred.
          example: value_error.missing
          type: string
        pointer:
          description: |-
            The exact item for which the validation did not succeed. This is a JSON
            pointer for request bodies, while for query, path, and header parameters
            it is the name of the parameter.
          example: /payment_method/number
          type: string
        message:
          description: A human readable message for this error detail.
          example: field required
          type: string
      title: Error details
      type: object
      x-tags:
      - Errors
    PaymentMethod:
      description: A generic payment method.
      example:
        external_identifier: user-789123
        method: ""
        scheme: scheme
        created_at: 2013-07-16T19:23:00Z
        label: john@example.com
        type: payment-method
        expiration_date: expiration_date
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        buyer: ""
        mode: ""
        updated_at: 2013-07-16T19:23:00Z
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        status: succeeded
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        status:
          description: |-
            The state of the payment method.

            - `processing` - The payment method is still being stored.
            - `buyer_approval_required` - Storing the payment method requires
              the buyer to provide approval. Follow the `approval_url` for next steps.
            - `succeeded` - The payment method is approved and stored with all
              relevant payment services.
            - `failed` - Storing the payment method did not succeed.
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The type of this payment method.
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            example: card
            type: string
          - description: The mode to use with this payment method.
        created_at:
          description: |-
            The date and time when this payment method was first created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this payment method was last updated
            in our system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer'
          - description: The optional buyer for which this payment method has been
              stored.
            nullable: true
        label:
          description: |-
            A label for the card or the account. For a `paypal` payment method this
            is the user's email address. For a card it is the last 4 digits of the
            card.
          example: john@example.com
          nullable: true
          type: string
        scheme:
          description: The scheme of the card. Only applies to card payments.
          nullable: true
          type: string
        expiration_date:
          description: The expiration date for the payment method.
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
      title: Payment method
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Tokenized:
      description: A mini format version of a payment method.
      example:
        method: ""
        scheme: visa
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        label: "1111"
        type: payment-method
        expiration_date: 11/25
        approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The type of this payment method.
        label:
          description: |-
            A label for the payment method. For a `card` payment method this is the
            last 4 digits on the card. For others it would be the email address.
          example: "1111"
          type: string
        scheme:
          description: The type of the card, if the payment method is a card.
          enum:
          - visa
          - mastercard
          - american-express
          - diners-club
          - discover
          - jcb
          - unionpay
          - maestro
          - elo
          - mir
          - hiper
          - hipercard
          example: visa
          nullable: true
          type: string
        expiration_date:
          description: The expiration date for the payment method.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
      title: Payment Method (Tokenized)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods:
      description: A list of stored payment methods.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - external_identifier: user-789123
          method: ""
          scheme: scheme
          created_at: 2013-07-16T19:23:00Z
          label: john@example.com
          type: payment-method
          expiration_date: expiration_date
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          buyer: ""
          mode: ""
          updated_at: 2013-07-16T19:23:00Z
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: succeeded
        - external_identifier: user-789123
          method: ""
          scheme: scheme
          created_at: 2013-07-16T19:23:00Z
          label: john@example.com
          type: payment-method
          expiration_date: expiration_date
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          buyer: ""
          mode: ""
          updated_at: 2013-07-16T19:23:00Z
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          status: succeeded
      properties:
        items:
          description: A list of stored payment methods.
          items:
            $ref: '#/components/schemas/PaymentMethod'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment Methods
      type: object
      x-tags:
      - Payment Methods
    PaymentMethod--Snapshot:
      description: |-
        Snapshot of a payment method, as used when embedded inside other
        resources.
      properties:
        type:
          description: '`payment-method`.'
          enum:
          - payment-method
          example: payment-method
          type: string
        id:
          description: The unique ID of the payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          format: uuid
          nullable: true
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The type of this payment method.
        external_identifier:
          description: |-
            An external identifier that can be used to match the payment method
            against your own records.
          example: user-789123
          nullable: true
          type: string
        label:
          description: |-
            A label for the payment method. This can be the last 4 digits for a card,
            or the email address for an alternative payment method.
          example: "1111"
          type: string
        scheme:
          description: |-
            An additional label used to differentiate different sub-types of a payment
            method. Most notably this can include the type of card used in a
            transaction.
          example: visa
          nullable: true
          type: string
        expiration_date:
          description: |-
            The expiration date for this payment method. This is mostly used by cards
            where the card might have an expiration date.
          example: 11/25
          maxLength: 5
          minLength: 5
          nullable: true
          pattern: ^\d{2}/\d{2}$
          type: string
        approval_url:
          description: The optional URL that the buyer needs to be redirected to to
            further authorize their payment.
          example: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
          nullable: true
          type: string
      title: Payment method (Snapshot)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethods--Tokenized:
      description: A list of stored payment methods in token format.
      example:
        items:
        - method: ""
          scheme: visa
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
        - method: ""
          scheme: visa
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          label: "1111"
          type: payment-method
          expiration_date: 11/25
          approval_url: https://api.example.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve
      properties:
        items:
          description: A list of stored payment methods in token format.
          items:
            $ref: '#/components/schemas/PaymentMethod--Tokenized'
          type: array
      title: Payment Methods (Token only)
      type: object
      x-tags:
      - Payment Methods
    PaymentMethodToken:
      description: A token for a payment method.
      example:
        payment_service: ""
        id: cus_4QEiU0VT5E3Whi
        type: payment-method-token
        token: tok_1JCNiQ2eZvKYlo2CpvA4ODiD
        status: succeeded
      properties:
        type:
          description: '`payment-method-token`.'
          enum:
          - payment-method-token
          example: payment-method-token
          type: string
        id:
          description: |-
            The external ID of this payment method as it has been registered with the
            payment service, which can be used directly in combination with the
            `token` without the need to go through Gr4vy for a transaction.

            In some cases this is a different value to the `token` while in others
            this value is identical. Please see the documentation for the payment
            service for more details.
          example: cus_4QEiU0VT5E3Whi
          type: string
        token:
          description: |-
            The token of this payment method as it has been registered with the
            payment service, which can be used directly in combination with the
            `id` without the need to go through Gr4vy for a transaction.

            In some cases this is a different value to the `id` while in others
            this value is identical. Please see the documentation for the payment
            service for more details.
          example: tok_1JCNiQ2eZvKYlo2CpvA4ODiD
          type: string
        status:
          description: |-
            The state of the payment method.

            - `processing` - The payment method is still being stored.
            - `buyer_approval_required` - The buyer still needs to provide
              approval before the payment method can be stored.
            - `succeeded` - The payment method is approved and stored with all
              relevant payment services.
            - `failed` - Storing the payment method did not succeed.
          enum:
          - processing
          - buyer_approval_required
          - succeeded
          - failed
          example: succeeded
          type: string
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          - description: The payment service used for this transaction.
      title: Payment method token
      type: object
      x-tags:
      - Payment Method Tokens
    PaymentMethodTokens:
      description: A list of tokens for a payment method.
      example:
        items:
        - payment_service: ""
          id: cus_4QEiU0VT5E3Whi
          type: payment-method-token
          token: tok_1JCNiQ2eZvKYlo2CpvA4ODiD
          status: succeeded
        - payment_service: ""
          id: cus_4QEiU0VT5E3Whi
          type: payment-method-token
          token: tok_1JCNiQ2eZvKYlo2CpvA4ODiD
          status: succeeded
      properties:
        items:
          description: A list of stored tokens for payment methods.
          items:
            $ref: '#/components/schemas/PaymentMethodToken'
          type: array
      title: Payment Method Tokens
      type: object
      x-tags:
      - Payment Method Tokens
    PaymentMethodRequest:
      description: |-
        Payment method details used to register
        a new payment method.
      example:
        number: "4111111111111111"
        country: USD
        external_identifier: account-23423423
        buyer_external_identifier: user-789123
        security_code: "123"
        method: ""
        currency: USD
        expiration_date: 11/15
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The method to use for this request.
        number:
          description: |-
            The 15-16 digit number for this credit card as it can be found on the
            front of the card.

            If a card has been stored with us previously, this number will represent
            the unique tokenized card ID provided via our API.
          example: "4111111111111111"
          maxLength: 16
          minLength: 14
          pattern: ^[0-9]{14,16}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.

            If the `number` of this card represents a tokenized card, then this value
            is ignored.
          example: 11/15
          maxLength: 5
          minLength: 5
          pattern: ^\d\d/\d\d$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            If the `number` of this card represents a tokenized card, then this value
            is ignored.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to store this payment method for. This is
            used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to store this payment method for.
            This is used to select the payment service to use.

            This only applies to `redirect` mode payment methods like `gocardless`.
          example: USD
          type: string
      required:
      - method
      title: Payment method request
      type: object
      x-tags:
      - Request Bodies
    PaymentService:
      description: An active, configured payment service.
      example:
        method: ""
        merchant_category_code: "5045"
        acquirer_bin_discover: acquirer_bin_discover
        acquirer_merchant_id: acquirer_merchant_id
        merchant_name: gr4vy
        active: true
        created_at: 2012-12-12T10:53:43Z
        type: payment-service
        display_name: Stripe (Main)
        acquirer_bin_visa: acquirer_bin_visa
        payment_service_definition_id: stripe-card
        three_d_secure_enabled: true
        acquirer_bin_amex: acquirer_bin_amex
        merchant_country_code: "840"
        updated_at: 2012-12-12T10:53:43Z
        accepted_countries:
        - DE
        id: faaad066-30b4-4997-a438-242b0752d7e1
        position: 1
        merchant_url: http://example.com/aeiou
        acquirer_bin_mastercard: acquirer_bin_mastercard
        accepted_currencies:
        - EUR
        status: pending
      properties:
        id:
          description: The ID of this payment service.
          example: faaad066-30b4-4997-a438-242b0752d7e1
          format: uuid
          maxLength: 200
          minLength: 1
          type: string
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The payment method that this service handles.
        display_name:
          description: The custom name set for this service.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        status:
          description: |
            The current status of this service. This will start off as pending, move
            to created, and might eventually move to an error status if and when the
            credentials are no longer valid.
          enum:
          - pending
          - created
          - failed
          type: string
        accepted_currencies:
          description: |-
            A list of currencies for which this service is enabled, in ISO 4217
            three-letter code format.
          example:
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        accepted_countries:
          description: |-
            A list of countries for which this service is enabled, in ISO two-letter
            code format.
          example:
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        acquirer_bin_visa:
          description: Acquiring institution identification code for VISA.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_mastercard:
          description: Acquiring institution identification code for Mastercard.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_amex:
          description: Acquiring institution identification code for Amex.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_discover:
          description: Acquiring institution identification code for Discover.
          maxLength: 11
          nullable: true
          type: string
        acquirer_merchant_id:
          description: |-
            Merchant identifier used in authorisation
            requests (assigned by the acquirer).
          maxLength: 35
          nullable: true
          type: string
        merchant_name:
          description: Merchant name (assigned by the acquirer).
          example: gr4vy
          maxLength: 40
          nullable: true
          type: string
        merchant_country_code:
          description: ISO 3166-1 numeric three-digit country code.
          example: "840"
          nullable: true
          pattern: ^\d{3}$
          type: string
        merchant_category_code:
          description: Merchant category code that describes the business.
          example: "5045"
          maxLength: 4
          minLength: 4
          nullable: true
          type: string
        merchant_url:
          description: Fully qualified URL of 3-D Secure requestor website or customer
            care site.
          format: url
          maxLength: 2048
          nullable: true
          type: string
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        position:
          description: |-
            The numeric rank of a payment service. Payment services with a lower
            position value are processed first.
          example: 1
          type: number
        created_at:
          description: The date and time when this service was created.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
        updated_at:
          description: The date and time when this service was last updated.
          example: 2012-12-12T10:53:43Z
          format: date-time
          type: string
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentService--Snapshot:
      description: An active, configured payment service.
      properties:
        id:
          description: The ID of this payment service.
          example: stripe-card-faaad066-30b4-4997-a438-242b0752d7e1
          maxLength: 200
          minLength: 1
          type: string
        type:
          description: The type of this resource.
          enum:
          - payment-service
          example: payment-service
          type: string
        payment_service_definition_id:
          description: |
            The ID of the payment service definition used to create this service.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The payment method that this services handles.
      title: A payment service
      type: object
      x-tags:
      - Payment Services
    PaymentServices:
      description: A list of active, configured payment services.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - method: ""
          merchant_category_code: "5045"
          acquirer_bin_discover: acquirer_bin_discover
          acquirer_merchant_id: acquirer_merchant_id
          merchant_name: gr4vy
          active: true
          created_at: 2012-12-12T10:53:43Z
          type: payment-service
          display_name: Stripe (Main)
          acquirer_bin_visa: acquirer_bin_visa
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          acquirer_bin_amex: acquirer_bin_amex
          merchant_country_code: "840"
          updated_at: 2012-12-12T10:53:43Z
          accepted_countries:
          - DE
          id: faaad066-30b4-4997-a438-242b0752d7e1
          position: 1
          merchant_url: http://example.com/aeiou
          acquirer_bin_mastercard: acquirer_bin_mastercard
          accepted_currencies:
          - EUR
          status: pending
        - method: ""
          merchant_category_code: "5045"
          acquirer_bin_discover: acquirer_bin_discover
          acquirer_merchant_id: acquirer_merchant_id
          merchant_name: gr4vy
          active: true
          created_at: 2012-12-12T10:53:43Z
          type: payment-service
          display_name: Stripe (Main)
          acquirer_bin_visa: acquirer_bin_visa
          payment_service_definition_id: stripe-card
          three_d_secure_enabled: true
          acquirer_bin_amex: acquirer_bin_amex
          merchant_country_code: "840"
          updated_at: 2012-12-12T10:53:43Z
          accepted_countries:
          - DE
          id: faaad066-30b4-4997-a438-242b0752d7e1
          position: 1
          merchant_url: http://example.com/aeiou
          acquirer_bin_mastercard: acquirer_bin_mastercard
          accepted_currencies:
          - EUR
          status: pending
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentService'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: A list of active payment services
      type: object
      x-tags:
      - Payment Services
    PaymentServiceRequest:
      allOf:
      - $ref: '#/components/schemas/PaymentServiceUpdate'
      - $ref: '#/components/schemas/PaymentServiceRequest_allOf'
      description: Request body for activating a payment service.
      required:
      - accepted_countries
      - accepted_currencies
      - display_name
      - fields
      - payment_service_definition_id
      title: Payment Service (Create)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceUpdate:
      description: Request body for updating an active payment service.
      example:
        merchant_category_code: "5045"
        acquirer_bin_discover: acquirer_bin_discover
        acquirer_merchant_id: acquirer_merchant_id
        merchant_name: gr4vy
        active: true
        display_name: Stripe (Main)
        acquirer_bin_visa: acquirer_bin_visa
        three_d_secure_enabled: true
        acquirer_bin_amex: acquirer_bin_amex
        merchant_country_code: "840"
        accepted_countries:
        - US
        - GB
        - DE
        position: 1
        fields:
        - value: sk_test_4eC39HqLyjWDarjtT1zdp7dc
          key: private_key
        - value: sk_test_4eC39HqLyjWDarjtT1zdp7dc
          key: private_key
        merchant_url: http://example.com/aeiou
        acquirer_bin_mastercard: acquirer_bin_mastercard
        accepted_currencies:
        - EUR
        - USD
        - GBP
      properties:
        display_name:
          description: A custom name for the payment service. This will be shown in
            the Admin UI.
          example: Stripe (Main)
          maxLength: 50
          minLength: 1
          type: string
        fields:
          description: A list of fields, each containing a key-value pair for each
            field defined by the definition for this payment service e.g. for stripe-card
            `secret_key` is required and so must be sent with in this field.
          items:
            $ref: '#/components/schemas/PaymentServiceUpdate_fields'
          type: array
        accepted_countries:
          description: A list of countries that this payment service needs to support
            in ISO two-letter code format.
          example:
          - US
          - GB
          - DE
          items:
            maxLength: 2
            minLength: 2
            type: string
          minItems: 1
          type: array
        accepted_currencies:
          description: A list of currencies that this payment service needs to support
            in ISO 4217 three-letter code format.
          example:
          - EUR
          - USD
          - GBP
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        three_d_secure_enabled:
          default: false
          description: |-
            Defines if 3-D Secure is enabled for the service (can only be
            enabled if the payment service definition supports
            the `three_d_secure_hosted` feature).
            This does not affect pass through 3-D Secure data.
          example: true
          type: boolean
        acquirer_bin_visa:
          description: Acquiring institution identification code for VISA.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_mastercard:
          description: Acquiring institution identification code for Mastercard.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_amex:
          description: Acquiring institution identification code for Amex.
          maxLength: 11
          nullable: true
          type: string
        acquirer_bin_discover:
          description: Acquiring institution identification code for Discover.
          maxLength: 11
          nullable: true
          type: string
        acquirer_merchant_id:
          description: |-
            Merchant identifier used in authorisation
            requests (assigned by the acquirer).
          maxLength: 35
          nullable: true
          type: string
        merchant_name:
          description: Merchant name (assigned by the acquirer).
          example: gr4vy
          maxLength: 40
          nullable: true
          type: string
        merchant_country_code:
          description: ISO 3166-1 numeric three-digit country code.
          example: "840"
          nullable: true
          pattern: ^\d{3}$
          type: string
        merchant_category_code:
          description: Merchant category code that describes the business.
          example: "5045"
          maxLength: 4
          minLength: 4
          nullable: true
          type: string
        merchant_url:
          description: Fully qualified URL of 3-D Secure requestor website or customer
            care site.
          format: url
          maxLength: 2048
          nullable: true
          type: string
        active:
          default: true
          description: Defines if this service is currently active or not.
          example: true
          type: boolean
        position:
          description: |-
            The numeric rank of a payment service. Payment services with a lower
            position value are processed first. When a payment services is inserted at
            a position, any payment services with the the same value or higher are
            shifted down a position accordingly. When left out, the payment service is
            inserted at the end of the list.
          example: 1
          type: number
      title: Payment Service (Update)
      type: object
      x-tags:
      - Request Bodies
    PaymentServiceDefinition:
      description: An available payment service that can be configured.
      example:
        mode: ""
        icon_url: https://cdn.gr4vy.app/stripe.svg
        method: ""
        supported_features:
          three_d_secure_hosted: true
          apple_pay: false
          payment_method_tokenization: true
          three_d_secure_pass_through: false
        supported_countries:
        - US
        - GB
        - DE
        id: stripe-card
        type: payment-service-definition
        display_name: Stripe
        fields:
        - format: text
          display_name: Private API key
          key: private_api_key
          required: true
        - format: text
          display_name: Private API key
          key: private_api_key
          required: true
        supported_currencies:
        - USD
        - GBP
        - EUR
      properties:
        id:
          description: The ID of the payment service. This is the underlying provider
            followed by a dash followed by the payment method ID.
          example: stripe-card
          type: string
        type:
          default: payment-service-definition
          description: '`payment-service-definition`.'
          example: payment-service-definition
          type: string
        display_name:
          description: The display name of this service.
          example: Stripe
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The ID of the payment method that this services handles.
        fields:
          description: A list of fields that need to be submitted when activating
            the payment. service.
          items:
            $ref: '#/components/schemas/PaymentServiceDefinition_fields'
          minItems: 1
          type: array
        supported_currencies:
          description: A list of three-letter ISO currency codes that this service
            supports.
          example:
          - USD
          - GBP
          - EUR
          items:
            maxLength: 3
            minLength: 3
            type: string
          minItems: 1
          type: array
        supported_countries:
          description: A list of two-letter ISO country codes that this service supports.
          example:
          - US
          - GB
          - DE
          items:
            type: string
          minItems: 1
          type: array
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            example: card
            type: string
          - description: The mode of this payment service.
        supported_features:
          $ref: '#/components/schemas/PaymentServiceDefinition_supported_features'
        icon_url:
          description: An icon to display for the payment service.
          example: https://cdn.gr4vy.app/stripe.svg
          nullable: true
          type: string
      title: Payment Service Definition
      type: object
      x-tags:
      - Discovery
    PaymentServiceDefinitions:
      description: A list of available payment services definitions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - mode: ""
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: ""
          supported_features:
            three_d_secure_hosted: true
            apple_pay: false
            payment_method_tokenization: true
            three_d_secure_pass_through: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
        - mode: ""
          icon_url: https://cdn.gr4vy.app/stripe.svg
          method: ""
          supported_features:
            three_d_secure_hosted: true
            apple_pay: false
            payment_method_tokenization: true
            three_d_secure_pass_through: false
          supported_countries:
          - US
          - GB
          - DE
          id: stripe-card
          type: payment-service-definition
          display_name: Stripe
          fields:
          - format: text
            display_name: Private API key
            key: private_api_key
            required: true
          - format: text
            display_name: Private API key
            key: private_api_key
            required: true
          supported_currencies:
          - USD
          - GBP
          - EUR
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentServiceDefinition'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Payment service definitions
      type: object
      x-tags:
      - Discovery
    PaymentOption:
      description: An available payment option for a locale.
      example:
        icon_url: https://cdn.gr4vy.app/card.svg
        mode: ""
        method: ""
        context:
          merchant_name: merchant_name
          supported_schemes:
          - amex
          - amex
        label: Pay by Card
        type: payment-option
        can_store_payment_method: true
      properties:
        type:
          description: '`payment-option`.'
          enum:
          - payment-option
          example: payment-option
          type: string
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The type of payment method that is available.
        icon_url:
          description: An icon to display for the payment option.
          example: https://cdn.gr4vy.app/card.svg
          nullable: true
          type: string
        mode:
          allOf:
          - enum:
            - card
            - redirect
            - applepay
            example: card
            type: string
          - description: The mode to use with this payment option.
        label:
          description: |-
            A label that describes this payment option. This label is returned in the
            language defined by the `locale` query parameter. The label can be used
            to display a list of payment options to the buyer in their language.
          example: Pay by Card
          type: string
        can_store_payment_method:
          description: A flag to indicate if storing the payment method is supported.
          type: boolean
        context:
          $ref: '#/components/schemas/PaymentOption_context'
      title: Payment option
      type: object
      x-tags:
      - Payment Option
    PaymentOptions:
      description: A list of payment options.
      example:
        items:
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: ""
          method: ""
          context:
            merchant_name: merchant_name
            supported_schemes:
            - amex
            - amex
          label: Pay by Card
          type: payment-option
          can_store_payment_method: true
        - icon_url: https://cdn.gr4vy.app/card.svg
          mode: ""
          method: ""
          context:
            merchant_name: merchant_name
            supported_schemes:
            - amex
            - amex
          label: Pay by Card
          type: payment-option
          can_store_payment_method: true
      properties:
        items:
          items:
            $ref: '#/components/schemas/PaymentOption'
          type: array
      title: A list of payment options
      type: object
      x-tags:
      - Payment Options
    RedirectRequest:
      description: Request to use a redirect payment method in a transaction.
      properties:
        method:
          allOf:
          - enum:
            - paypal
            - banked
            - gocardless
            - stripedd
            example: paypal
            type: string
          - description: |-
              The method to use, this can be any of the methods that
              support redirect requests.

              When storing a new payment method, only `gocardless` and `stripedd`
              are currently supported.
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction.
          example: https://example.com/callback
          type: string
        currency:
          description: |-
            The ISO-4217 currency code to use this payment method for. This is
            used to select the payment service to use.
          example: USD
          type: string
        country:
          description: |-
            The 2-letter ISO code of the country to use this payment method for.
            This is used to select the payment service to use.
          example: USD
          type: string
        external_identifier:
          description: An external identifier that can be used to match the account
            against your own records.
          example: account-23423423
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
      required:
      - country
      - currency
      - method
      - redirect_url
      title: Redirect Request
      type: object
      x-tags:
      - Request Bodies
    TaxId:
      description: The tax ID information associated to a buyer.
      properties:
        id:
          description: The tax ID for the buyer.
          example: "12345678931"
          maxLength: 50
          minLength: 1
          type: string
        kind:
          description: The kind of tax ID.
          enum:
          - ae.trn
          - au.abn
          - br.cnpj
          - br.cpf
          - ca.bn
          - ca.gst_hst
          - ca.pst_bc
          - ca.pst_mb
          - ca.pst_sk
          - ca.qst
          - ch.vat
          - cl.tin
          - es.cif
          - eu.vat
          - gb.vat
          - hk.br
          - id.npwp
          - in.gst
          - jp.cn
          - jp.rn
          - kr.brn
          - li.uid
          - mx.rfc
          - my.frp
          - my.itn
          - my.sst
          - no.vat
          - nz.gst
          - ru.inn
          - ru.kpp
          - sa.vat
          - sg.gst
          - sg.uen
          - th.vat
          - tw.vat
          - us.ein
          - za.vat
          example: gb.vat
          type: string
      required:
      - kind
      - value
      title: Tax ID
      type: object
      x-tags:
      - Buyers
    ThreeDSecureData:
      properties:
        cavv:
          description: The cardholder authentication value or AAV.
          example: 3q2+78r+ur7erb7vyv66vv8=
          type: string
        eci:
          description: The electronic commerce indicator for the 3DS transaction.
          example: "05"
          maxLength: 2
          minLength: 1
          pattern: ^0?\d$
          type: string
        version:
          description: The version of 3-D Secure that was used.
          pattern: ^[1-2].?[\d+.?]{0,3}$
          type: string
        directory_response:
          description: For 3-D Secure version 1, the enrolment response. For 3-D Secure
            version , the transaction status from the `ARes`.
          example: C
          maxLength: 1
          type: string
      required:
      - cavv
      - directory_response
      - eci
      - version
      title: 3-D Secure Data
      type: object
    ThreeDSecureDataV1:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV1_allOf'
      title: 3-D Secure Data Version 1
      type: object
    ThreeDSecureDataV2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureData'
      - $ref: '#/components/schemas/ThreeDSecureDataV2_allOf'
      title: 3-D Secure Data Version 2
      type: object
    ThreeDSecureDataV1V2:
      allOf:
      - $ref: '#/components/schemas/ThreeDSecureDataV1'
      - $ref: '#/components/schemas/ThreeDSecureDataV2'
      title: 3-D Secure Data Version 1 & 2
      type: object
    TokenizedRequest:
      description: Details for a previously tokenized payment method.
      properties:
        method:
          description: '`id`.'
          enum:
          - id
          example: id
          type: string
        id:
          description: |-
            A ID that represents a previously tokenized payment method.
            This token can represent any type of payment method.
          example: 46973e9d-88a7-44a6-abfe-be4ff0134ff4
          type: string
        redirect_url:
          description: |-
            We strongly recommended providing a `redirect_url` for
            stored cards when 3-D Secure is enabled and `three_d_secure_data`
            is not provided. This will be appended with both a
            transaction ID and status (e.g. `https://example.com/callback?
            gr4vy_transaction_id=123&gr4vy_transaction_status=capture_succeeded`)
            after 3-D Secure has completed.
          example: https://example.com/callback
          type: string
      required:
      - id
      - method
      title: Tokenized payment method request
      type: object
      x-tags:
      - Request Bodies
    Transaction:
      allOf:
      - $ref: '#/components/schemas/TransactionSummary'
      - type: object
      description: A transaction record.
      example:
        is_subsequent_payment: true
        merchant_initiated: true
        payment_source: ecommerce
      properties:
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        payment_source:
          description: The source of the transaction. Defaults to 'ecommerce'.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: ecommerce
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note this flag is only compatible with payment_source set to
            [recurring, installment, card_on_file] and will be ignored for other
            values or if payment_source is not present.
          example: true
          type: boolean
      title: Transaction
      type: object
      x-tags:
      - Transactions
    TransactionSummary:
      description: A transaction record.
      example:
        amount: 1299
        external_identifier: user-789123
        payment_service: ""
        created_at: 2013-07-16T19:23:00Z
        type: transaction
        refunded_amount: 100
        buyer: ""
        updated_at: 2000-01-23T04:56:07.000+00:00
        captured_amount: 999
        currency: USD
        id: fe26475d-ec3e-4884-9553-f7356683f7f9
        payment_method: ""
        status: processing
      properties:
        type:
          description: The type of this resource. Is always `transaction`.
          enum:
          - transaction
          example: transaction
          type: string
        id:
          description: The unique identifier for this transaction.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        status:
          description: |-
            The status of the transaction. The status may change over time as
            asynchronous  processing events occur.
          enum:
          - processing
          - processing_failed
          - capture_succeeded
          - capture_pending
          - capture_declined
          - capture_failed
          - authorization_succeeded
          - authorization_pending
          - authorization_declined
          - authorization_failed
          - authorization_expired
          - authorization_voided
          - refund_succeeded
          - refund_pending
          - refund_declined
          - refund_failed
          - buyer_approval_succeeded
          - buyer_approval_pending
          - buyer_approval_declined
          - buyer_approval_failed
          - buyer_approval_timedout
          example: processing
          type: string
        amount:
          description: |-
            The authorized amount for this transaction. This can be different than the
            actual captured amount and part of this amount may be refunded.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        captured_amount:
          description: |-
            The captured amount for this transaction. This can be a part and in some
            cases even more than the authorized amount.
          example: 999
          maximum: 99999999
          minimum: 0
          type: integer
        refunded_amount:
          description: |-
            The refunded amount for this transaction. This can be a part or all of the
            captured amount.
          example: 100
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: The currency code for this transaction.
          example: USD
          type: string
        payment_method:
          allOf:
          - $ref: '#/components/schemas/PaymentMethod--Snapshot'
          - description: The payment method used for this transaction.
        buyer:
          allOf:
          - $ref: '#/components/schemas/Buyer--Snapshot'
          - description: The buyer used for this transaction.
            nullable: true
        created_at:
          description: The date and time when this transaction was created in our
            system.
          example: 2013-07-16T19:23:00Z
          format: date-time
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        updated_at:
          description: Defines when the transaction was last updated.
          format: date-time
          type: string
        payment_service:
          allOf:
          - $ref: '#/components/schemas/PaymentService--Snapshot'
          - description: The payment service used for this transaction.
      title: Transaction
      type: object
      x-tags:
      - Transactions
    Transactions:
      description: A list of transactions.
      example:
        previous_cursor: previous_cursor
        next_cursor: ZXhhbXBsZTE
        limit: 1
        items:
        - amount: 1299
          external_identifier: user-789123
          payment_service: ""
          created_at: 2013-07-16T19:23:00Z
          type: transaction
          refunded_amount: 100
          buyer: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          captured_amount: 999
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          payment_method: ""
          status: processing
        - amount: 1299
          external_identifier: user-789123
          payment_service: ""
          created_at: 2013-07-16T19:23:00Z
          type: transaction
          refunded_amount: 100
          buyer: ""
          updated_at: 2000-01-23T04:56:07.000+00:00
          captured_amount: 999
          currency: USD
          id: fe26475d-ec3e-4884-9553-f7356683f7f9
          payment_method: ""
          status: processing
      properties:
        items:
          description: A list of transactions.
          items:
            $ref: '#/components/schemas/TransactionSummary'
          type: array
        limit:
          default: 20
          description: |-
            The limit applied to request. This represents the number of items that are at
            maximum returned by this request.
          example: 1
          format: int32
          maximum: 500
          minimum: 1
          type: integer
        next_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          example: ZXhhbXBsZTE
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
        previous_cursor:
          description: |-
            The cursor that represents the next page of results. Use the `cursor` query
            parameter to fetch this page of items.
          maxLength: 1000
          minLength: 1
          nullable: true
          type: string
      title: Transactions
      type: object
      x-tags:
      - Transactions
    TransactionsBatchCaptureRequest:
      description: A request to capture multiple previously authorized transactions.
      properties:
        amount:
          description: |-
            The (partial) amount to capture.

            When left blank, this will capture the entire amount.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: |
            A supported ISO-4217 currency code.
          example: USD
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          type: string
        transaction_id:
          description: The ID of the transaction to capture.
          type: string
      required:
      - amount
      - currency
      - transaction_id
      title: Batch Capture (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionRequest:
      description: A request to create a transaction.
      example:
        amount: 1299
        external_identifier: user-789123
        metadata:
          key: value
        currency: USD
        is_subsequent_payment: true
        store: true
        merchant_initiated: true
        payment_source: ecommerce
        intent: capture
        payment_method:
          number: "4111111111111111"
          external_identifier: user-789123
          buyer_external_identifier: user-789123
          security_code: "123"
          method: ""
          id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          expiration_date: 11/15
          buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
          redirect_url: https://example.com/callback
      properties:
        amount:
          description: |-
            The monetary amount to create an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
        currency:
          description: A supported ISO-4217 currency code.
          example: USD
          type: string
        payment_method:
          $ref: '#/components/schemas/TransactionPaymentMethodRequest'
        store:
          default: false
          description: |-
            Whether or not to also try and store the payment method with us so that
            it can be used again for future use. This is only supported for payment
            methods that support this feature.
          example: true
          type: boolean
        intent:
          default: authorize
          description: |-
            Defines the intent of this API call. This determines the desired initial
            state of the transaction.

            * `authorize` - (Default) Optionally approves and then authorizes a
            transaction but does not capture the funds.
            * `capture` - Optionally approves and then authorizes and captures the
            funds of the transaction.
          enum:
          - authorize
          - capture
          example: capture
          type: string
        external_identifier:
          description: An external identifier that can be used to match the transaction
            against your own records.
          example: user-789123
          nullable: true
          type: string
        three_d_secure_data:
          $ref: '#/components/schemas/ThreeDSecureDataV1V2'
        merchant_initiated:
          default: false
          description: |-
            Indicates whether the transaction was initiated by the merchant (true)
            or customer (false).
          example: true
          type: boolean
        payment_source:
          description: The source of the transaction. Defaults to 'ecommerce'.
          enum:
          - ecommerce
          - moto
          - recurring
          - installment
          - card_on_file
          example: ecommerce
          type: string
        is_subsequent_payment:
          default: false
          description: |-
            Indicates whether the transaction represents a subsequent payment
            coming from a setup recurring payment.
            Please note this flag is only compatible with payment_source set to
            [recurring, installment, card_on_file] and will be ignored for other
            values or if payment_source is not present.
          example: true
          type: boolean
        metadata:
          additionalProperties:
            type: string
          description: |-
            Any additional information about the transaction that you would like to
            store as key-value pairs. This data is passed to payment service
            providers that support it. Please visit https://gr4vy.com/docs/ under
            `Connections` for more information on how specific providers support
            metadata.
          example:
            key: value
          maxProperties: 20
          type: object
      required:
      - amount
      - currency
      - payment_method
      title: Transaction (Create)
      type: object
      x-tags:
      - Request Bodies
    TransactionCaptureRequest:
      description: A request to capture a transaction.
      example:
        amount: 1299
      properties:
        amount:
          description: |-
            The monetary amount to capture an authorization for, in the smallest
            currency unit for the given currency, for example `1299` cents to create
            an authorization for `$12.99`.

            When omitted blank, this will capture the entire amount.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
      title: Capture a transaction
      type: object
      x-tags:
      - Request Bodies
    TransactionRefundRequest:
      description: A request to refund a transaction.
      example:
        amount: 1299
      properties:
        amount:
          description: |-
            The (partial) amount to refund.

            When omitted blank, this will refund the entire amount.
          example: 1299
          maximum: 99999999
          minimum: 0
          type: integer
      title: Refund a transaction
      type: object
      x-tags:
      - Request Bodies
    TransactionPaymentMethodRequest:
      description: |-
        Payment method details to use in a transaction or to register
        a new payment method.
      example:
        number: "4111111111111111"
        external_identifier: user-789123
        buyer_external_identifier: user-789123
        security_code: "123"
        method: ""
        id: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
        expiration_date: 11/15
        buyer_id: fe26475d-ec3e-4884-9553-f7356683f7f9
        redirect_url: https://example.com/callback
      properties:
        method:
          allOf:
          - enum:
            - card
            - paypal
            - banked
            - gocardless
            - stripedd
            - applepay
            example: card
            type: string
          - description: The method to use for this request.
        number:
          description: |-
            The 15-16 digit number for this credit card as it can be found on the
            front of the card.

            If a card has been stored with us previously, this number will represent
            the unique tokenized card ID provided via our API.
          example: "4111111111111111"
          maxLength: 16
          minLength: 14
          pattern: ^[0-9]{14,16}$
          type: string
        expiration_date:
          description: |-
            The expiration date of the card, formatted `MM/YY`. If a card has been
            previously stored with us this value is optional.

            If the `number` of this card represents a tokenized card, then this value
            is ignored.
          example: 11/15
          maxLength: 5
          minLength: 5
          pattern: ^\d\d/\d\d$
          type: string
        security_code:
          description: |-
            The 3 or 4 digit security code often found on the card. This often
            referred to as the CVV or CVD.

            If the `number` of this card represents a tokenized card, then this value
            is ignored.
          example: "123"
          maxLength: 4
          minLength: 3
          pattern: ^\d{3,4}$
          type: string
        external_identifier:
          description: An external identifier that can be used to match the card against
            your own records.
          example: user-789123
          nullable: true
          type: string
        buyer_id:
          description: |-
            The ID of the buyer to associate this payment method to. If this field is
            provided then the `buyer_external_identifier` field needs to be unset.
          example: fe26475d-ec3e-4884-9553-f7356683f7f9
          format: uuid
          type: string
        buyer_external_identifier:
          description: |-
            The `external_identifier` of the buyer to associate this payment method
            to. If this field is provided then the `buyer_id` field
            needs to be unset.
          example: user-789123
          type: string
        redirect_url:
          description: |-
            The redirect URL to redirect a buyer to after they have authorized their
            transaction or payment method. This only applies to payment methods that
            require buyer approval.
          example: https://example.com/callback
          type: string
        id:
          description: |-
            An identifier for a previously tokenized payment method.
            This id can represent any type of payment method.
          example: 77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5
          type: string
      required:
      - method
      title: Transaction payment method request
      type: object
      x-tags:
      - Request Bodies
    UserRequest:
      description: A request to create a user.
      properties:
        display_name:
          description: An external identifier that can be used to match the buyer
            against your own records. This value needs to be unique for all buyers.
          example: John L.
          maxLength: 1000
          minLength: 1
          nullable: false
          type: string
        email_address:
          description: A unique name for this buyer which is used in the Gr4vy admin
            panel to give a buyer a human readable name.
          example: john@example.com
          maxLength: 200
          minLength: 1
          nullable: false
          type: string
      title: User (Create)
      type: object
      x-tags:
      - Users
    SetPasswordRequest:
      description: A request to set a password for a user.
      properties:
        reset_token:
          description: Unique reset token valid for 7 days.
          example: nXyWSHq2r5q_8F1_NXtppEStY7KbBHqwU9T8pdmOQa_LYJxpxxXcjOXL58xpHLy5gh1k6s0Myl3ygA6SnsxIjLXBKO3x1EZX3igq
          maxLength: 100
          minLength: 100
          nullable: false
          type: string
        password:
          description: The password the user to log in with.
          example: this-is-n0t-a-secure-passw0rd
          type: string
      title: Set Password (Create)
      type: object
      x-tags:
      - Users
    ResetPasswordRequest:
      description: A request to reset a password for a user.
      properties:
        email_address:
          description: The email address of the user account to reset.
          example: john@example.com
          type: string
      title: Reset Password (Create)
      type: object
      x-tags:
      - Users
    PaymentServiceRequest_allOf:
      properties:
        payment_service_definition_id:
          description: The ID of the payment service to use.
          example: stripe-card
          maxLength: 50
          minLength: 1
          type: string
      type: object
    PaymentServiceUpdate_fields:
      description: A field containing a key-value pair for a required field defined
        by the service for this payment service.
      example:
        value: sk_test_4eC39HqLyjWDarjtT1zdp7dc
        key: private_key
      properties:
        key:
          description: The key of the field to set a value for.
          example: private_key
          maxLength: 50
          minLength: 1
          type: string
        value:
          description: The value of a field to set.
          example: sk_test_4eC39HqLyjWDarjtT1zdp7dc
          maxLength: 1500
          minLength: 1
          type: string
      required:
      - key
      - value
      type: object
    PaymentServiceDefinition_fields:
      description: |-
        A single field that needs to be submitted for a payment service when it
        is created.
      example:
        format: text
        display_name: Private API key
        key: private_api_key
        required: true
      properties:
        key:
          description: The key of a field that needs to be submitted.
          example: private_api_key
          type: string
        display_name:
          description: The name to display for a field in the dashboard.
          example: Private API key
          type: string
        required:
          description: Defines if this field is required when the service is created.
          example: true
          type: boolean
        format:
          description: Defines the type of input that needs to be rendered for this
            field.
          enum:
          - text
          - multiline
          - number
          example: text
          type: string
      type: object
    PaymentServiceDefinition_supported_features:
      description: Features supported by the payment definition.
      example:
        three_d_secure_hosted: true
        apple_pay: false
        payment_method_tokenization: true
        three_d_secure_pass_through: false
      properties:
        payment_method_tokenization:
          description: Supports storing a payment method via tokenization.
          example: true
          type: boolean
        three_d_secure_hosted:
          description: Supports hosted 3-D Secure with a redirect.
          example: true
          type: boolean
        three_d_secure_pass_through:
          description: Supports passing 3-D Secure data to the underlying processor.
          example: false
          type: boolean
        apple_pay:
          description: |-
            Supports passing decrypted apple pay token to the underlying
            processor.
          example: false
          type: boolean
      type: object
    PaymentOption_context:
      description: |-
        Additional context specific to the payment option.
        This is currently only returned for Apple Pay.
      example:
        merchant_name: merchant_name
        supported_schemes:
        - amex
        - amex
      properties:
        merchant_name:
          description: Display name of the merchant for Apple Pay.
          type: string
        supported_schemes:
          description: Supported schemes for Apple Pay.
          items:
            enum:
            - amex
            - cartesBancaires
            - discover
            - eftpos
            - electron
            - elo
            - interac
            - jcb
            - mada
            - maestro
            - masterCard
            - privateLabel
            - visa
            - vPay
            type: string
          type: array
      type: object
    ThreeDSecureDataV1_allOf:
      properties:
        authentication_response:
          description: The authentication response.
          example: "Y"
          maxLength: 1
          type: string
        cavv_algorithm:
          description: The CAVV Algorithm used.
          maxLength: 1
          type: string
        xid:
          description: The transaction identifier.
          type: string
      required:
      - authentication_response
      - cavv_algorithm
      - xid
    ThreeDSecureDataV2_allOf:
      properties:
        authentication_response:
          description: |-
            The transaction status from the challenge result
            (not required for frictionless).
          example: "Y"
          maxLength: 1
          type: string
        directory_transaction_id:
          description: The transaction identifier.
          example: c4e59ceb-a382-4d6a-bc87-385d591fa09d
          type: string
      required:
      - directory_transaction_id
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
