/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TaxId The tax ID information associated to a buyer.
type TaxId struct {
	// The tax ID for the buyer.
	Id *string `json:"id,omitempty"`
	// The kind of tax ID.
	Kind string `json:"kind"`
}

// NewTaxId instantiates a new TaxId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxId(kind string) *TaxId {
	this := TaxId{}
	this.Kind = kind
	return &this
}

// NewTaxIdWithDefaults instantiates a new TaxId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxIdWithDefaults() *TaxId {
	this := TaxId{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TaxId) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxId) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TaxId) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TaxId) SetId(v string) {
	o.Id = &v
}

// GetKind returns the Kind field value
func (o *TaxId) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *TaxId) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *TaxId) SetKind(v string) {
	o.Kind = v
}

func (o TaxId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	return json.Marshal(toSerialize)
}

type NullableTaxId struct {
	value *TaxId
	isSet bool
}

func (v NullableTaxId) Get() *TaxId {
	return v.value
}

func (v *NullableTaxId) Set(val *TaxId) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxId) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxId(val *TaxId) *NullableTaxId {
	return &NullableTaxId{value: val, isSet: true}
}

func (v NullableTaxId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


