/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// CheckoutSessionUpdateRequest A request to update a checkout session.
type CheckoutSessionUpdateRequest struct {
	// An array of cart items that represents the line items of a transaction.
	CartItems []CartItem `json:"cart_items,omitempty"`
	// Any additional information about the transaction that you would like to store as key-value pairs. This data is passed to payment service providers that support it.
	Metadata map[string]string `json:"metadata,omitempty"`
}

// NewCheckoutSessionUpdateRequest instantiates a new CheckoutSessionUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutSessionUpdateRequest() *CheckoutSessionUpdateRequest {
	this := CheckoutSessionUpdateRequest{}
	return &this
}

// NewCheckoutSessionUpdateRequestWithDefaults instantiates a new CheckoutSessionUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutSessionUpdateRequestWithDefaults() *CheckoutSessionUpdateRequest {
	this := CheckoutSessionUpdateRequest{}
	return &this
}

// GetCartItems returns the CartItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckoutSessionUpdateRequest) GetCartItems() []CartItem {
	if o == nil  {
		var ret []CartItem
		return ret
	}
	return o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckoutSessionUpdateRequest) GetCartItemsOk() (*[]CartItem, bool) {
	if o == nil || o.CartItems == nil {
		return nil, false
	}
	return &o.CartItems, true
}

// HasCartItems returns a boolean if a field has been set.
func (o *CheckoutSessionUpdateRequest) HasCartItems() bool {
	if o != nil && o.CartItems != nil {
		return true
	}

	return false
}

// SetCartItems gets a reference to the given []CartItem and assigns it to the CartItems field.
func (o *CheckoutSessionUpdateRequest) SetCartItems(v []CartItem) {
	o.CartItems = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckoutSessionUpdateRequest) GetMetadata() map[string]string {
	if o == nil  {
		var ret map[string]string
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckoutSessionUpdateRequest) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CheckoutSessionUpdateRequest) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *CheckoutSessionUpdateRequest) SetMetadata(v map[string]string) {
	o.Metadata = v
}

func (o CheckoutSessionUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CartItems != nil {
		toSerialize["cart_items"] = o.CartItems
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableCheckoutSessionUpdateRequest struct {
	value *CheckoutSessionUpdateRequest
	isSet bool
}

func (v NullableCheckoutSessionUpdateRequest) Get() *CheckoutSessionUpdateRequest {
	return v.value
}

func (v *NullableCheckoutSessionUpdateRequest) Set(val *CheckoutSessionUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutSessionUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutSessionUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutSessionUpdateRequest(val *CheckoutSessionUpdateRequest) *NullableCheckoutSessionUpdateRequest {
	return &NullableCheckoutSessionUpdateRequest{value: val, isSet: true}
}

func (v NullableCheckoutSessionUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutSessionUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


