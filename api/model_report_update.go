/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// ReportUpdate Request body to update a report.
type ReportUpdate struct {
	// The name of the report.
	Name *string `json:"name,omitempty"`
	// The description of the report.
	Description NullableString `json:"description,omitempty"`
	// Indicates whether the report's scheduling is enabled. This value can only be set to `true` if this is a recurring report.  When this value is set to `true`, the report will be executed at the `next_execution_at` date and time.  When this value is set to `false`, future executions of the report are paused until this value is set to `true` again.  If scheduling is enabled after being disabled, then the `next_execution_at` value is updated if and only if its current value is a past date-time. The `next_execution_at` value is then set to the next closest date-time in the future depending on the values of `schedule` and `schedule_timezone`.
	ScheduleEnabled *bool `json:"schedule_enabled,omitempty"`
}

// NewReportUpdate instantiates a new ReportUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportUpdate() *ReportUpdate {
	this := ReportUpdate{}
	return &this
}

// NewReportUpdateWithDefaults instantiates a new ReportUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportUpdateWithDefaults() *ReportUpdate {
	this := ReportUpdate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ReportUpdate) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportUpdate) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ReportUpdate) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ReportUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReportUpdate) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReportUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ReportUpdate) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ReportUpdate) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ReportUpdate) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ReportUpdate) UnsetDescription() {
	o.Description.Unset()
}

// GetScheduleEnabled returns the ScheduleEnabled field value if set, zero value otherwise.
func (o *ReportUpdate) GetScheduleEnabled() bool {
	if o == nil || o.ScheduleEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ScheduleEnabled
}

// GetScheduleEnabledOk returns a tuple with the ScheduleEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportUpdate) GetScheduleEnabledOk() (*bool, bool) {
	if o == nil || o.ScheduleEnabled == nil {
		return nil, false
	}
	return o.ScheduleEnabled, true
}

// HasScheduleEnabled returns a boolean if a field has been set.
func (o *ReportUpdate) HasScheduleEnabled() bool {
	if o != nil && o.ScheduleEnabled != nil {
		return true
	}

	return false
}

// SetScheduleEnabled gets a reference to the given bool and assigns it to the ScheduleEnabled field.
func (o *ReportUpdate) SetScheduleEnabled(v bool) {
	o.ScheduleEnabled = &v
}

func (o ReportUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ScheduleEnabled != nil {
		toSerialize["schedule_enabled"] = o.ScheduleEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableReportUpdate struct {
	value *ReportUpdate
	isSet bool
}

func (v NullableReportUpdate) Get() *ReportUpdate {
	return v.value
}

func (v *NullableReportUpdate) Set(val *ReportUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableReportUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableReportUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportUpdate(val *ReportUpdate) *NullableReportUpdate {
	return &NullableReportUpdate{value: val, isSet: true}
}

func (v NullableReportUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


