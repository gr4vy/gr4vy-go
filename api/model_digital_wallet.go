/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// DigitalWallet A digital wallet (e.g. Apple Pay) that has been registered.
type DigitalWallet struct {
	// `digital-wallet`.
	Type *string `json:"type,omitempty"`
	// The name of the digital wallet provider.
	Provider *string `json:"provider,omitempty"`
	// The ID of the registered digital wallet.
	Id *string `json:"id,omitempty"`
	// The name of the merchant the digital wallet is registered to.
	MerchantName *string `json:"merchant_name,omitempty"`
	// The main URL of the merchant.
	MerchantUrl NullableString `json:"merchant_url,omitempty"`
	// The list of fully qualified domain names that a digital wallet provider processes payments for.
	DomainNames *[]string `json:"domain_names,omitempty"`
	// The date and time when this digital wallet was registered.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this digital wallet was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The Gr4vy environments in which this digital wallet is available.
	Environments *[]string `json:"environments,omitempty"`
}

// NewDigitalWallet instantiates a new DigitalWallet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWallet() *DigitalWallet {
	this := DigitalWallet{}
	var merchantUrl string = "null"
	this.MerchantUrl = *NewNullableString(&merchantUrl)
	return &this
}

// NewDigitalWalletWithDefaults instantiates a new DigitalWallet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletWithDefaults() *DigitalWallet {
	this := DigitalWallet{}
	var merchantUrl string = "null"
	this.MerchantUrl = *NewNullableString(&merchantUrl)
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DigitalWallet) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DigitalWallet) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DigitalWallet) SetType(v string) {
	o.Type = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *DigitalWallet) GetProvider() string {
	if o == nil || o.Provider == nil {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetProviderOk() (*string, bool) {
	if o == nil || o.Provider == nil {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *DigitalWallet) HasProvider() bool {
	if o != nil && o.Provider != nil {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *DigitalWallet) SetProvider(v string) {
	o.Provider = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DigitalWallet) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DigitalWallet) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DigitalWallet) SetId(v string) {
	o.Id = &v
}

// GetMerchantName returns the MerchantName field value if set, zero value otherwise.
func (o *DigitalWallet) GetMerchantName() string {
	if o == nil || o.MerchantName == nil {
		var ret string
		return ret
	}
	return *o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetMerchantNameOk() (*string, bool) {
	if o == nil || o.MerchantName == nil {
		return nil, false
	}
	return o.MerchantName, true
}

// HasMerchantName returns a boolean if a field has been set.
func (o *DigitalWallet) HasMerchantName() bool {
	if o != nil && o.MerchantName != nil {
		return true
	}

	return false
}

// SetMerchantName gets a reference to the given string and assigns it to the MerchantName field.
func (o *DigitalWallet) SetMerchantName(v string) {
	o.MerchantName = &v
}

// GetMerchantUrl returns the MerchantUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWallet) GetMerchantUrl() string {
	if o == nil || o.MerchantUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantUrl.Get()
}

// GetMerchantUrlOk returns a tuple with the MerchantUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWallet) GetMerchantUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantUrl.Get(), o.MerchantUrl.IsSet()
}

// HasMerchantUrl returns a boolean if a field has been set.
func (o *DigitalWallet) HasMerchantUrl() bool {
	if o != nil && o.MerchantUrl.IsSet() {
		return true
	}

	return false
}

// SetMerchantUrl gets a reference to the given NullableString and assigns it to the MerchantUrl field.
func (o *DigitalWallet) SetMerchantUrl(v string) {
	o.MerchantUrl.Set(&v)
}
// SetMerchantUrlNil sets the value for MerchantUrl to be an explicit nil
func (o *DigitalWallet) SetMerchantUrlNil() {
	o.MerchantUrl.Set(nil)
}

// UnsetMerchantUrl ensures that no value is present for MerchantUrl, not even an explicit nil
func (o *DigitalWallet) UnsetMerchantUrl() {
	o.MerchantUrl.Unset()
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *DigitalWallet) GetDomainNames() []string {
	if o == nil || o.DomainNames == nil {
		var ret []string
		return ret
	}
	return *o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetDomainNamesOk() (*[]string, bool) {
	if o == nil || o.DomainNames == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *DigitalWallet) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *DigitalWallet) SetDomainNames(v []string) {
	o.DomainNames = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DigitalWallet) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DigitalWallet) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *DigitalWallet) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DigitalWallet) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DigitalWallet) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DigitalWallet) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *DigitalWallet) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWallet) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *DigitalWallet) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *DigitalWallet) SetEnvironments(v []string) {
	o.Environments = &v
}

func (o DigitalWallet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MerchantName != nil {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if o.MerchantUrl.IsSet() {
		toSerialize["merchant_url"] = o.MerchantUrl.Get()
	}
	if o.DomainNames != nil {
		toSerialize["domain_names"] = o.DomainNames
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableDigitalWallet struct {
	value *DigitalWallet
	isSet bool
}

func (v NullableDigitalWallet) Get() *DigitalWallet {
	return v.value
}

func (v *NullableDigitalWallet) Set(val *DigitalWallet) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWallet) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWallet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWallet(val *DigitalWallet) *NullableDigitalWallet {
	return &NullableDigitalWallet{value: val, isSet: true}
}

func (v NullableDigitalWallet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWallet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


