/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// Connections A list of configured connections.
type Connections struct {
	Items *[]Connection `json:"items,omitempty"`
}

// NewConnections instantiates a new Connections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnections() *Connections {
	this := Connections{}
	return &this
}

// NewConnectionsWithDefaults instantiates a new Connections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsWithDefaults() *Connections {
	this := Connections{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Connections) GetItems() []Connection {
	if o == nil || o.Items == nil {
		var ret []Connection
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetItemsOk() (*[]Connection, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Connections) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Connection and assigns it to the Items field.
func (o *Connections) SetItems(v []Connection) {
	o.Items = &v
}

func (o Connections) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableConnections struct {
	value *Connections
	isSet bool
}

func (v NullableConnections) Get() *Connections {
	return v.value
}

func (v *NullableConnections) Set(val *Connections) {
	v.value = val
	v.isSet = true
}

func (v NullableConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnections(val *Connections) *NullableConnections {
	return &NullableConnections{value: val, isSet: true}
}

func (v NullableConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


