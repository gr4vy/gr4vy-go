/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// Transaction A transaction record.
type Transaction struct {
	// The type of this resource. Is always `transaction`.
	Type *string `json:"type,omitempty"`
	// The unique identifier for this transaction.
	Id *string `json:"id,omitempty"`
	// The status of the transaction. The status may change over time as asynchronous  processing events occur.
	Status *string `json:"status,omitempty"`
	// The authorized amount for this transaction. This can be different than the actual captured amount and part of this amount may be refunded.
	Amount *int32 `json:"amount,omitempty"`
	// The captured amount for this transaction. This can be a part and in some cases even more than the authorized amount.
	CapturedAmount *int32 `json:"captured_amount,omitempty"`
	// The refunded amount for this transaction. This can be a part or all of the captured amount.
	RefundedAmount *int32 `json:"refunded_amount,omitempty"`
	// The currency code for this transaction.
	Currency *string `json:"currency,omitempty"`
	PaymentMethod *PaymentMethodSnapshot `json:"payment_method,omitempty"`
	Buyer *BuyerSnapshot `json:"buyer,omitempty"`
	// The date and time when this transaction was created in our system.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// An external identifier that can be used to match the transaction against your own records.
	ExternalIdentifier NullableString `json:"external_identifier,omitempty"`
	// Defines when the transaction was last updated.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	PaymentService *PaymentServiceSnapshot `json:"payment_service,omitempty"`
	// Indicates whether the transaction was initiated by the merchant (true) or customer (false).
	MerchantInitiated *bool `json:"merchant_initiated,omitempty"`
	// The source of the transaction. Defaults to `ecommerce`.
	PaymentSource *string `json:"payment_source,omitempty"`
	// Indicates whether the transaction represents a subsequent payment coming from a setup recurring payment. Please note this flag is only compatible with `payment_source` set to `recurring`, `installment`, or `card_on_file` and will be ignored for other values or if `payment_source` is not present.
	IsSubsequentPayment *bool `json:"is_subsequent_payment,omitempty"`
	// An array of cart items that represents the line items of a transaction.
	CartItems *[]CartItem `json:"cart_items,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction() *Transaction {
	this := Transaction{}
	var merchantInitiated bool = false
	this.MerchantInitiated = &merchantInitiated
	var isSubsequentPayment bool = false
	this.IsSubsequentPayment = &isSubsequentPayment
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	var merchantInitiated bool = false
	this.MerchantInitiated = &merchantInitiated
	var isSubsequentPayment bool = false
	this.IsSubsequentPayment = &isSubsequentPayment
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Transaction) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Transaction) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Transaction) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Transaction) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Transaction) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Transaction) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Transaction) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Transaction) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Transaction) SetStatus(v string) {
	o.Status = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Transaction) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Transaction) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Transaction) SetAmount(v int32) {
	o.Amount = &v
}

// GetCapturedAmount returns the CapturedAmount field value if set, zero value otherwise.
func (o *Transaction) GetCapturedAmount() int32 {
	if o == nil || o.CapturedAmount == nil {
		var ret int32
		return ret
	}
	return *o.CapturedAmount
}

// GetCapturedAmountOk returns a tuple with the CapturedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCapturedAmountOk() (*int32, bool) {
	if o == nil || o.CapturedAmount == nil {
		return nil, false
	}
	return o.CapturedAmount, true
}

// HasCapturedAmount returns a boolean if a field has been set.
func (o *Transaction) HasCapturedAmount() bool {
	if o != nil && o.CapturedAmount != nil {
		return true
	}

	return false
}

// SetCapturedAmount gets a reference to the given int32 and assigns it to the CapturedAmount field.
func (o *Transaction) SetCapturedAmount(v int32) {
	o.CapturedAmount = &v
}

// GetRefundedAmount returns the RefundedAmount field value if set, zero value otherwise.
func (o *Transaction) GetRefundedAmount() int32 {
	if o == nil || o.RefundedAmount == nil {
		var ret int32
		return ret
	}
	return *o.RefundedAmount
}

// GetRefundedAmountOk returns a tuple with the RefundedAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetRefundedAmountOk() (*int32, bool) {
	if o == nil || o.RefundedAmount == nil {
		return nil, false
	}
	return o.RefundedAmount, true
}

// HasRefundedAmount returns a boolean if a field has been set.
func (o *Transaction) HasRefundedAmount() bool {
	if o != nil && o.RefundedAmount != nil {
		return true
	}

	return false
}

// SetRefundedAmount gets a reference to the given int32 and assigns it to the RefundedAmount field.
func (o *Transaction) SetRefundedAmount(v int32) {
	o.RefundedAmount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Transaction) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Transaction) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Transaction) SetCurrency(v string) {
	o.Currency = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *Transaction) GetPaymentMethod() PaymentMethodSnapshot {
	if o == nil || o.PaymentMethod == nil {
		var ret PaymentMethodSnapshot
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPaymentMethodOk() (*PaymentMethodSnapshot, bool) {
	if o == nil || o.PaymentMethod == nil {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *Transaction) HasPaymentMethod() bool {
	if o != nil && o.PaymentMethod != nil {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PaymentMethodSnapshot and assigns it to the PaymentMethod field.
func (o *Transaction) SetPaymentMethod(v PaymentMethodSnapshot) {
	o.PaymentMethod = &v
}

// GetBuyer returns the Buyer field value if set, zero value otherwise.
func (o *Transaction) GetBuyer() BuyerSnapshot {
	if o == nil || o.Buyer == nil {
		var ret BuyerSnapshot
		return ret
	}
	return *o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBuyerOk() (*BuyerSnapshot, bool) {
	if o == nil || o.Buyer == nil {
		return nil, false
	}
	return o.Buyer, true
}

// HasBuyer returns a boolean if a field has been set.
func (o *Transaction) HasBuyer() bool {
	if o != nil && o.Buyer != nil {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given BuyerSnapshot and assigns it to the Buyer field.
func (o *Transaction) SetBuyer(v BuyerSnapshot) {
	o.Buyer = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Transaction) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Transaction) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Transaction) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transaction) GetExternalIdentifier() string {
	if o == nil || o.ExternalIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier.Get()
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transaction) GetExternalIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalIdentifier.Get(), o.ExternalIdentifier.IsSet()
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *Transaction) HasExternalIdentifier() bool {
	if o != nil && o.ExternalIdentifier.IsSet() {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given NullableString and assigns it to the ExternalIdentifier field.
func (o *Transaction) SetExternalIdentifier(v string) {
	o.ExternalIdentifier.Set(&v)
}
// SetExternalIdentifierNil sets the value for ExternalIdentifier to be an explicit nil
func (o *Transaction) SetExternalIdentifierNil() {
	o.ExternalIdentifier.Set(nil)
}

// UnsetExternalIdentifier ensures that no value is present for ExternalIdentifier, not even an explicit nil
func (o *Transaction) UnsetExternalIdentifier() {
	o.ExternalIdentifier.Unset()
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Transaction) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Transaction) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Transaction) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPaymentService returns the PaymentService field value if set, zero value otherwise.
func (o *Transaction) GetPaymentService() PaymentServiceSnapshot {
	if o == nil || o.PaymentService == nil {
		var ret PaymentServiceSnapshot
		return ret
	}
	return *o.PaymentService
}

// GetPaymentServiceOk returns a tuple with the PaymentService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPaymentServiceOk() (*PaymentServiceSnapshot, bool) {
	if o == nil || o.PaymentService == nil {
		return nil, false
	}
	return o.PaymentService, true
}

// HasPaymentService returns a boolean if a field has been set.
func (o *Transaction) HasPaymentService() bool {
	if o != nil && o.PaymentService != nil {
		return true
	}

	return false
}

// SetPaymentService gets a reference to the given PaymentServiceSnapshot and assigns it to the PaymentService field.
func (o *Transaction) SetPaymentService(v PaymentServiceSnapshot) {
	o.PaymentService = &v
}

// GetMerchantInitiated returns the MerchantInitiated field value if set, zero value otherwise.
func (o *Transaction) GetMerchantInitiated() bool {
	if o == nil || o.MerchantInitiated == nil {
		var ret bool
		return ret
	}
	return *o.MerchantInitiated
}

// GetMerchantInitiatedOk returns a tuple with the MerchantInitiated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMerchantInitiatedOk() (*bool, bool) {
	if o == nil || o.MerchantInitiated == nil {
		return nil, false
	}
	return o.MerchantInitiated, true
}

// HasMerchantInitiated returns a boolean if a field has been set.
func (o *Transaction) HasMerchantInitiated() bool {
	if o != nil && o.MerchantInitiated != nil {
		return true
	}

	return false
}

// SetMerchantInitiated gets a reference to the given bool and assigns it to the MerchantInitiated field.
func (o *Transaction) SetMerchantInitiated(v bool) {
	o.MerchantInitiated = &v
}

// GetPaymentSource returns the PaymentSource field value if set, zero value otherwise.
func (o *Transaction) GetPaymentSource() string {
	if o == nil || o.PaymentSource == nil {
		var ret string
		return ret
	}
	return *o.PaymentSource
}

// GetPaymentSourceOk returns a tuple with the PaymentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetPaymentSourceOk() (*string, bool) {
	if o == nil || o.PaymentSource == nil {
		return nil, false
	}
	return o.PaymentSource, true
}

// HasPaymentSource returns a boolean if a field has been set.
func (o *Transaction) HasPaymentSource() bool {
	if o != nil && o.PaymentSource != nil {
		return true
	}

	return false
}

// SetPaymentSource gets a reference to the given string and assigns it to the PaymentSource field.
func (o *Transaction) SetPaymentSource(v string) {
	o.PaymentSource = &v
}

// GetIsSubsequentPayment returns the IsSubsequentPayment field value if set, zero value otherwise.
func (o *Transaction) GetIsSubsequentPayment() bool {
	if o == nil || o.IsSubsequentPayment == nil {
		var ret bool
		return ret
	}
	return *o.IsSubsequentPayment
}

// GetIsSubsequentPaymentOk returns a tuple with the IsSubsequentPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIsSubsequentPaymentOk() (*bool, bool) {
	if o == nil || o.IsSubsequentPayment == nil {
		return nil, false
	}
	return o.IsSubsequentPayment, true
}

// HasIsSubsequentPayment returns a boolean if a field has been set.
func (o *Transaction) HasIsSubsequentPayment() bool {
	if o != nil && o.IsSubsequentPayment != nil {
		return true
	}

	return false
}

// SetIsSubsequentPayment gets a reference to the given bool and assigns it to the IsSubsequentPayment field.
func (o *Transaction) SetIsSubsequentPayment(v bool) {
	o.IsSubsequentPayment = &v
}

// GetCartItems returns the CartItems field value if set, zero value otherwise.
func (o *Transaction) GetCartItems() []CartItem {
	if o == nil || o.CartItems == nil {
		var ret []CartItem
		return ret
	}
	return *o.CartItems
}

// GetCartItemsOk returns a tuple with the CartItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetCartItemsOk() (*[]CartItem, bool) {
	if o == nil || o.CartItems == nil {
		return nil, false
	}
	return o.CartItems, true
}

// HasCartItems returns a boolean if a field has been set.
func (o *Transaction) HasCartItems() bool {
	if o != nil && o.CartItems != nil {
		return true
	}

	return false
}

// SetCartItems gets a reference to the given []CartItem and assigns it to the CartItems field.
func (o *Transaction) SetCartItems(v []CartItem) {
	o.CartItems = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.CapturedAmount != nil {
		toSerialize["captured_amount"] = o.CapturedAmount
	}
	if o.RefundedAmount != nil {
		toSerialize["refunded_amount"] = o.RefundedAmount
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.PaymentMethod != nil {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	if o.Buyer != nil {
		toSerialize["buyer"] = o.Buyer
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ExternalIdentifier.IsSet() {
		toSerialize["external_identifier"] = o.ExternalIdentifier.Get()
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.PaymentService != nil {
		toSerialize["payment_service"] = o.PaymentService
	}
	if o.MerchantInitiated != nil {
		toSerialize["merchant_initiated"] = o.MerchantInitiated
	}
	if o.PaymentSource != nil {
		toSerialize["payment_source"] = o.PaymentSource
	}
	if o.IsSubsequentPayment != nil {
		toSerialize["is_subsequent_payment"] = o.IsSubsequentPayment
	}
	if o.CartItems != nil {
		toSerialize["cart_items"] = o.CartItems
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


