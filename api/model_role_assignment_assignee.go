/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// RoleAssignmentAssignee The assignee for this role assignment.
type RoleAssignmentAssignee struct {
	// The type of the assignee.
	Type *string `json:"type,omitempty"`
	// The unique ID of the assignee.
	Id *string `json:"id,omitempty"`
}

// NewRoleAssignmentAssignee instantiates a new RoleAssignmentAssignee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAssignmentAssignee() *RoleAssignmentAssignee {
	this := RoleAssignmentAssignee{}
	return &this
}

// NewRoleAssignmentAssigneeWithDefaults instantiates a new RoleAssignmentAssignee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAssignmentAssigneeWithDefaults() *RoleAssignmentAssignee {
	this := RoleAssignmentAssignee{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoleAssignmentAssignee) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentAssignee) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoleAssignmentAssignee) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoleAssignmentAssignee) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleAssignmentAssignee) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignmentAssignee) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleAssignmentAssignee) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleAssignmentAssignee) SetId(v string) {
	o.Id = &v
}

func (o RoleAssignmentAssignee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableRoleAssignmentAssignee struct {
	value *RoleAssignmentAssignee
	isSet bool
}

func (v NullableRoleAssignmentAssignee) Get() *RoleAssignmentAssignee {
	return v.value
}

func (v *NullableRoleAssignmentAssignee) Set(val *RoleAssignmentAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignmentAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignmentAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignmentAssignee(val *RoleAssignmentAssignee) *NullableRoleAssignmentAssignee {
	return &NullableRoleAssignmentAssignee{value: val, isSet: true}
}

func (v NullableRoleAssignmentAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignmentAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


