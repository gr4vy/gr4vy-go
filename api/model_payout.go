/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
	"time"
)

// Payout struct for Payout
type Payout struct {
	// The type of this resource. Is always `payout`.
	Type *string `json:"type,omitempty"`
	// The ID of a payout.
	Id *string `json:"id,omitempty"`
	// The optional ID of the merchant account this payout should be assigned to.
	MerchantAccountId NullableString `json:"merchant_account_id,omitempty"`
	// The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`.
	Amount *int32 `json:"amount,omitempty"`
	// A supported ISO-4217 currency code.
	Currency *string `json:"currency,omitempty"`
	// The date and time when this payout was created.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// The date and time when this payout was created.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// The payment service used for this payout.
	PaymentService *PaymentServiceSnapshot `json:"payment_service,omitempty"`
	// The ID of the payout in the underlying payment service.
	PaymentServicePayoutId NullableString `json:"payment_service_payout_id,omitempty"`
	// The type of payout to process.
	Category *string `json:"category,omitempty"`
	// The status of the payout.
	Status *string `json:"status,omitempty"`
	// An external identifier that can be used to match the payout against your own records. This value needs to be unique for all buyers.
	ExternalIdentifier NullableString `json:"external_identifier,omitempty"`
	// The merchant details associated to this payout.
	Merchant NullableMerchant `json:"merchant,omitempty"`
	// The buyer used for this transaction.
	Buyer *BuyerSnapshot `json:"buyer,omitempty"`
	// The payment method used for this payout.
	PaymentMethod *PaymentMethodSnapshot `json:"payment_method,omitempty"`
}

// NewPayout instantiates a new Payout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayout() *Payout {
	this := Payout{}
	return &this
}

// NewPayoutWithDefaults instantiates a new Payout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayoutWithDefaults() *Payout {
	this := Payout{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Payout) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Payout) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Payout) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Payout) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Payout) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Payout) SetId(v string) {
	o.Id = &v
}

// GetMerchantAccountId returns the MerchantAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payout) GetMerchantAccountId() string {
	if o == nil || o.MerchantAccountId.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantAccountId.Get()
}

// GetMerchantAccountIdOk returns a tuple with the MerchantAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payout) GetMerchantAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantAccountId.Get(), o.MerchantAccountId.IsSet()
}

// HasMerchantAccountId returns a boolean if a field has been set.
func (o *Payout) HasMerchantAccountId() bool {
	if o != nil && o.MerchantAccountId.IsSet() {
		return true
	}

	return false
}

// SetMerchantAccountId gets a reference to the given NullableString and assigns it to the MerchantAccountId field.
func (o *Payout) SetMerchantAccountId(v string) {
	o.MerchantAccountId.Set(&v)
}
// SetMerchantAccountIdNil sets the value for MerchantAccountId to be an explicit nil
func (o *Payout) SetMerchantAccountIdNil() {
	o.MerchantAccountId.Set(nil)
}

// UnsetMerchantAccountId ensures that no value is present for MerchantAccountId, not even an explicit nil
func (o *Payout) UnsetMerchantAccountId() {
	o.MerchantAccountId.Unset()
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Payout) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Payout) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *Payout) SetAmount(v int32) {
	o.Amount = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Payout) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Payout) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Payout) SetCurrency(v string) {
	o.Currency = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Payout) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Payout) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Payout) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Payout) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Payout) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Payout) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetPaymentService returns the PaymentService field value if set, zero value otherwise.
func (o *Payout) GetPaymentService() PaymentServiceSnapshot {
	if o == nil || o.PaymentService == nil {
		var ret PaymentServiceSnapshot
		return ret
	}
	return *o.PaymentService
}

// GetPaymentServiceOk returns a tuple with the PaymentService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetPaymentServiceOk() (*PaymentServiceSnapshot, bool) {
	if o == nil || o.PaymentService == nil {
		return nil, false
	}
	return o.PaymentService, true
}

// HasPaymentService returns a boolean if a field has been set.
func (o *Payout) HasPaymentService() bool {
	if o != nil && o.PaymentService != nil {
		return true
	}

	return false
}

// SetPaymentService gets a reference to the given PaymentServiceSnapshot and assigns it to the PaymentService field.
func (o *Payout) SetPaymentService(v PaymentServiceSnapshot) {
	o.PaymentService = &v
}

// GetPaymentServicePayoutId returns the PaymentServicePayoutId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payout) GetPaymentServicePayoutId() string {
	if o == nil || o.PaymentServicePayoutId.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaymentServicePayoutId.Get()
}

// GetPaymentServicePayoutIdOk returns a tuple with the PaymentServicePayoutId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payout) GetPaymentServicePayoutIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentServicePayoutId.Get(), o.PaymentServicePayoutId.IsSet()
}

// HasPaymentServicePayoutId returns a boolean if a field has been set.
func (o *Payout) HasPaymentServicePayoutId() bool {
	if o != nil && o.PaymentServicePayoutId.IsSet() {
		return true
	}

	return false
}

// SetPaymentServicePayoutId gets a reference to the given NullableString and assigns it to the PaymentServicePayoutId field.
func (o *Payout) SetPaymentServicePayoutId(v string) {
	o.PaymentServicePayoutId.Set(&v)
}
// SetPaymentServicePayoutIdNil sets the value for PaymentServicePayoutId to be an explicit nil
func (o *Payout) SetPaymentServicePayoutIdNil() {
	o.PaymentServicePayoutId.Set(nil)
}

// UnsetPaymentServicePayoutId ensures that no value is present for PaymentServicePayoutId, not even an explicit nil
func (o *Payout) UnsetPaymentServicePayoutId() {
	o.PaymentServicePayoutId.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Payout) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Payout) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Payout) SetCategory(v string) {
	o.Category = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Payout) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Payout) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Payout) SetStatus(v string) {
	o.Status = &v
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payout) GetExternalIdentifier() string {
	if o == nil || o.ExternalIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier.Get()
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payout) GetExternalIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalIdentifier.Get(), o.ExternalIdentifier.IsSet()
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *Payout) HasExternalIdentifier() bool {
	if o != nil && o.ExternalIdentifier.IsSet() {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given NullableString and assigns it to the ExternalIdentifier field.
func (o *Payout) SetExternalIdentifier(v string) {
	o.ExternalIdentifier.Set(&v)
}
// SetExternalIdentifierNil sets the value for ExternalIdentifier to be an explicit nil
func (o *Payout) SetExternalIdentifierNil() {
	o.ExternalIdentifier.Set(nil)
}

// UnsetExternalIdentifier ensures that no value is present for ExternalIdentifier, not even an explicit nil
func (o *Payout) UnsetExternalIdentifier() {
	o.ExternalIdentifier.Unset()
}

// GetMerchant returns the Merchant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payout) GetMerchant() Merchant {
	if o == nil || o.Merchant.Get() == nil {
		var ret Merchant
		return ret
	}
	return *o.Merchant.Get()
}

// GetMerchantOk returns a tuple with the Merchant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payout) GetMerchantOk() (*Merchant, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Merchant.Get(), o.Merchant.IsSet()
}

// HasMerchant returns a boolean if a field has been set.
func (o *Payout) HasMerchant() bool {
	if o != nil && o.Merchant.IsSet() {
		return true
	}

	return false
}

// SetMerchant gets a reference to the given NullableMerchant and assigns it to the Merchant field.
func (o *Payout) SetMerchant(v Merchant) {
	o.Merchant.Set(&v)
}
// SetMerchantNil sets the value for Merchant to be an explicit nil
func (o *Payout) SetMerchantNil() {
	o.Merchant.Set(nil)
}

// UnsetMerchant ensures that no value is present for Merchant, not even an explicit nil
func (o *Payout) UnsetMerchant() {
	o.Merchant.Unset()
}

// GetBuyer returns the Buyer field value if set, zero value otherwise.
func (o *Payout) GetBuyer() BuyerSnapshot {
	if o == nil || o.Buyer == nil {
		var ret BuyerSnapshot
		return ret
	}
	return *o.Buyer
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetBuyerOk() (*BuyerSnapshot, bool) {
	if o == nil || o.Buyer == nil {
		return nil, false
	}
	return o.Buyer, true
}

// HasBuyer returns a boolean if a field has been set.
func (o *Payout) HasBuyer() bool {
	if o != nil && o.Buyer != nil {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given BuyerSnapshot and assigns it to the Buyer field.
func (o *Payout) SetBuyer(v BuyerSnapshot) {
	o.Buyer = &v
}

// GetPaymentMethod returns the PaymentMethod field value if set, zero value otherwise.
func (o *Payout) GetPaymentMethod() PaymentMethodSnapshot {
	if o == nil || o.PaymentMethod == nil {
		var ret PaymentMethodSnapshot
		return ret
	}
	return *o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payout) GetPaymentMethodOk() (*PaymentMethodSnapshot, bool) {
	if o == nil || o.PaymentMethod == nil {
		return nil, false
	}
	return o.PaymentMethod, true
}

// HasPaymentMethod returns a boolean if a field has been set.
func (o *Payout) HasPaymentMethod() bool {
	if o != nil && o.PaymentMethod != nil {
		return true
	}

	return false
}

// SetPaymentMethod gets a reference to the given PaymentMethodSnapshot and assigns it to the PaymentMethod field.
func (o *Payout) SetPaymentMethod(v PaymentMethodSnapshot) {
	o.PaymentMethod = &v
}

func (o Payout) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MerchantAccountId.IsSet() {
		toSerialize["merchant_account_id"] = o.MerchantAccountId.Get()
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.PaymentService != nil {
		toSerialize["payment_service"] = o.PaymentService
	}
	if o.PaymentServicePayoutId.IsSet() {
		toSerialize["payment_service_payout_id"] = o.PaymentServicePayoutId.Get()
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ExternalIdentifier.IsSet() {
		toSerialize["external_identifier"] = o.ExternalIdentifier.Get()
	}
	if o.Merchant.IsSet() {
		toSerialize["merchant"] = o.Merchant.Get()
	}
	if o.Buyer != nil {
		toSerialize["buyer"] = o.Buyer
	}
	if o.PaymentMethod != nil {
		toSerialize["payment_method"] = o.PaymentMethod
	}
	return json.Marshal(toSerialize)
}

type NullablePayout struct {
	value *Payout
	isSet bool
}

func (v NullablePayout) Get() *Payout {
	return v.value
}

func (v *NullablePayout) Set(val *Payout) {
	v.value = val
	v.isSet = true
}

func (v NullablePayout) IsSet() bool {
	return v.isSet
}

func (v *NullablePayout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayout(val *Payout) *NullablePayout {
	return &NullablePayout{value: val, isSet: true}
}

func (v NullablePayout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


