/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TransactionsReportSpecParamsFilters The filters for the report.
type TransactionsReportSpecParamsFilters struct {
	// A list of statuses to filter by.
	Status *[]string `json:"status,omitempty"`
	CreatedAt *TransactionRetriesReportSpecParamsFiltersCreatedAt `json:"created_at,omitempty"`
	UpdatedAt *TransactionsReportSpecParamsFiltersUpdatedAt `json:"updated_at,omitempty"`
	AuthorizedAt *TransactionsReportSpecParamsFiltersAuthorizedAt `json:"authorized_at,omitempty"`
	CapturedAt *TransactionsReportSpecParamsFiltersCapturedAt `json:"captured_at,omitempty"`
	VoidedAt *TransactionsReportSpecParamsFiltersVoidedAt `json:"voided_at,omitempty"`
	// A list of ISO-4217 currency codes to filter by.
	Currency *[]string `json:"currency,omitempty"`
	// A list of payment methods to filter by.
	Method *[]string `json:"method,omitempty"`
	// A list of card schemes to filter by.
	Scheme *[]string `json:"scheme,omitempty"`
	// A list of metadata as key-value pairs to filter by.
	Metadata *[]map[string]interface{} `json:"metadata,omitempty"`
	// A list of 3DS challenge statuses to filter by.
	ThreeDSecureStatus *[]string `json:"three_d_secure_status,omitempty"`
	// A list of electric commerce indicators to filter by.
	ThreeDSecureEci *[]string `json:"three_d_secure_eci,omitempty"`
	// A list of 3DS responses to filter by.
	ThreeDSecureAuthResp *[]string `json:"three_d_secure_auth_resp,omitempty"`
	// A list of payment sources to filter by.
	PaymentSource *[]string `json:"payment_source,omitempty"`
	// A flag indicating transactions initiated by the merchant to filter by.
	MerchantInitiated *bool `json:"merchant_initiated,omitempty"`
	// A flag indicating transactions with subsequent payments to filter by.
	IsSubsequentPayment *bool `json:"is_subsequent_payment,omitempty"`
}

// NewTransactionsReportSpecParamsFilters instantiates a new TransactionsReportSpecParamsFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsReportSpecParamsFilters() *TransactionsReportSpecParamsFilters {
	this := TransactionsReportSpecParamsFilters{}
	return &this
}

// NewTransactionsReportSpecParamsFiltersWithDefaults instantiates a new TransactionsReportSpecParamsFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsReportSpecParamsFiltersWithDefaults() *TransactionsReportSpecParamsFilters {
	this := TransactionsReportSpecParamsFilters{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetStatus() []string {
	if o == nil || o.Status == nil {
		var ret []string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetStatusOk() (*[]string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *TransactionsReportSpecParamsFilters) SetStatus(v []string) {
	o.Status = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetCreatedAt() TransactionRetriesReportSpecParamsFiltersCreatedAt {
	if o == nil || o.CreatedAt == nil {
		var ret TransactionRetriesReportSpecParamsFiltersCreatedAt
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetCreatedAtOk() (*TransactionRetriesReportSpecParamsFiltersCreatedAt, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given TransactionRetriesReportSpecParamsFiltersCreatedAt and assigns it to the CreatedAt field.
func (o *TransactionsReportSpecParamsFilters) SetCreatedAt(v TransactionRetriesReportSpecParamsFiltersCreatedAt) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetUpdatedAt() TransactionsReportSpecParamsFiltersUpdatedAt {
	if o == nil || o.UpdatedAt == nil {
		var ret TransactionsReportSpecParamsFiltersUpdatedAt
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetUpdatedAtOk() (*TransactionsReportSpecParamsFiltersUpdatedAt, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given TransactionsReportSpecParamsFiltersUpdatedAt and assigns it to the UpdatedAt field.
func (o *TransactionsReportSpecParamsFilters) SetUpdatedAt(v TransactionsReportSpecParamsFiltersUpdatedAt) {
	o.UpdatedAt = &v
}

// GetAuthorizedAt returns the AuthorizedAt field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetAuthorizedAt() TransactionsReportSpecParamsFiltersAuthorizedAt {
	if o == nil || o.AuthorizedAt == nil {
		var ret TransactionsReportSpecParamsFiltersAuthorizedAt
		return ret
	}
	return *o.AuthorizedAt
}

// GetAuthorizedAtOk returns a tuple with the AuthorizedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetAuthorizedAtOk() (*TransactionsReportSpecParamsFiltersAuthorizedAt, bool) {
	if o == nil || o.AuthorizedAt == nil {
		return nil, false
	}
	return o.AuthorizedAt, true
}

// HasAuthorizedAt returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasAuthorizedAt() bool {
	if o != nil && o.AuthorizedAt != nil {
		return true
	}

	return false
}

// SetAuthorizedAt gets a reference to the given TransactionsReportSpecParamsFiltersAuthorizedAt and assigns it to the AuthorizedAt field.
func (o *TransactionsReportSpecParamsFilters) SetAuthorizedAt(v TransactionsReportSpecParamsFiltersAuthorizedAt) {
	o.AuthorizedAt = &v
}

// GetCapturedAt returns the CapturedAt field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetCapturedAt() TransactionsReportSpecParamsFiltersCapturedAt {
	if o == nil || o.CapturedAt == nil {
		var ret TransactionsReportSpecParamsFiltersCapturedAt
		return ret
	}
	return *o.CapturedAt
}

// GetCapturedAtOk returns a tuple with the CapturedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetCapturedAtOk() (*TransactionsReportSpecParamsFiltersCapturedAt, bool) {
	if o == nil || o.CapturedAt == nil {
		return nil, false
	}
	return o.CapturedAt, true
}

// HasCapturedAt returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasCapturedAt() bool {
	if o != nil && o.CapturedAt != nil {
		return true
	}

	return false
}

// SetCapturedAt gets a reference to the given TransactionsReportSpecParamsFiltersCapturedAt and assigns it to the CapturedAt field.
func (o *TransactionsReportSpecParamsFilters) SetCapturedAt(v TransactionsReportSpecParamsFiltersCapturedAt) {
	o.CapturedAt = &v
}

// GetVoidedAt returns the VoidedAt field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetVoidedAt() TransactionsReportSpecParamsFiltersVoidedAt {
	if o == nil || o.VoidedAt == nil {
		var ret TransactionsReportSpecParamsFiltersVoidedAt
		return ret
	}
	return *o.VoidedAt
}

// GetVoidedAtOk returns a tuple with the VoidedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetVoidedAtOk() (*TransactionsReportSpecParamsFiltersVoidedAt, bool) {
	if o == nil || o.VoidedAt == nil {
		return nil, false
	}
	return o.VoidedAt, true
}

// HasVoidedAt returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasVoidedAt() bool {
	if o != nil && o.VoidedAt != nil {
		return true
	}

	return false
}

// SetVoidedAt gets a reference to the given TransactionsReportSpecParamsFiltersVoidedAt and assigns it to the VoidedAt field.
func (o *TransactionsReportSpecParamsFilters) SetVoidedAt(v TransactionsReportSpecParamsFiltersVoidedAt) {
	o.VoidedAt = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetCurrency() []string {
	if o == nil || o.Currency == nil {
		var ret []string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetCurrencyOk() (*[]string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given []string and assigns it to the Currency field.
func (o *TransactionsReportSpecParamsFilters) SetCurrency(v []string) {
	o.Currency = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetMethod() []string {
	if o == nil || o.Method == nil {
		var ret []string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetMethodOk() (*[]string, bool) {
	if o == nil || o.Method == nil {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasMethod() bool {
	if o != nil && o.Method != nil {
		return true
	}

	return false
}

// SetMethod gets a reference to the given []string and assigns it to the Method field.
func (o *TransactionsReportSpecParamsFilters) SetMethod(v []string) {
	o.Method = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetScheme() []string {
	if o == nil || o.Scheme == nil {
		var ret []string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetSchemeOk() (*[]string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given []string and assigns it to the Scheme field.
func (o *TransactionsReportSpecParamsFilters) SetScheme(v []string) {
	o.Scheme = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetMetadata() []map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetMetadataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []map[string]interface{} and assigns it to the Metadata field.
func (o *TransactionsReportSpecParamsFilters) SetMetadata(v []map[string]interface{}) {
	o.Metadata = &v
}

// GetThreeDSecureStatus returns the ThreeDSecureStatus field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureStatus() []string {
	if o == nil || o.ThreeDSecureStatus == nil {
		var ret []string
		return ret
	}
	return *o.ThreeDSecureStatus
}

// GetThreeDSecureStatusOk returns a tuple with the ThreeDSecureStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureStatusOk() (*[]string, bool) {
	if o == nil || o.ThreeDSecureStatus == nil {
		return nil, false
	}
	return o.ThreeDSecureStatus, true
}

// HasThreeDSecureStatus returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasThreeDSecureStatus() bool {
	if o != nil && o.ThreeDSecureStatus != nil {
		return true
	}

	return false
}

// SetThreeDSecureStatus gets a reference to the given []string and assigns it to the ThreeDSecureStatus field.
func (o *TransactionsReportSpecParamsFilters) SetThreeDSecureStatus(v []string) {
	o.ThreeDSecureStatus = &v
}

// GetThreeDSecureEci returns the ThreeDSecureEci field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureEci() []string {
	if o == nil || o.ThreeDSecureEci == nil {
		var ret []string
		return ret
	}
	return *o.ThreeDSecureEci
}

// GetThreeDSecureEciOk returns a tuple with the ThreeDSecureEci field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureEciOk() (*[]string, bool) {
	if o == nil || o.ThreeDSecureEci == nil {
		return nil, false
	}
	return o.ThreeDSecureEci, true
}

// HasThreeDSecureEci returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasThreeDSecureEci() bool {
	if o != nil && o.ThreeDSecureEci != nil {
		return true
	}

	return false
}

// SetThreeDSecureEci gets a reference to the given []string and assigns it to the ThreeDSecureEci field.
func (o *TransactionsReportSpecParamsFilters) SetThreeDSecureEci(v []string) {
	o.ThreeDSecureEci = &v
}

// GetThreeDSecureAuthResp returns the ThreeDSecureAuthResp field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureAuthResp() []string {
	if o == nil || o.ThreeDSecureAuthResp == nil {
		var ret []string
		return ret
	}
	return *o.ThreeDSecureAuthResp
}

// GetThreeDSecureAuthRespOk returns a tuple with the ThreeDSecureAuthResp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetThreeDSecureAuthRespOk() (*[]string, bool) {
	if o == nil || o.ThreeDSecureAuthResp == nil {
		return nil, false
	}
	return o.ThreeDSecureAuthResp, true
}

// HasThreeDSecureAuthResp returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasThreeDSecureAuthResp() bool {
	if o != nil && o.ThreeDSecureAuthResp != nil {
		return true
	}

	return false
}

// SetThreeDSecureAuthResp gets a reference to the given []string and assigns it to the ThreeDSecureAuthResp field.
func (o *TransactionsReportSpecParamsFilters) SetThreeDSecureAuthResp(v []string) {
	o.ThreeDSecureAuthResp = &v
}

// GetPaymentSource returns the PaymentSource field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetPaymentSource() []string {
	if o == nil || o.PaymentSource == nil {
		var ret []string
		return ret
	}
	return *o.PaymentSource
}

// GetPaymentSourceOk returns a tuple with the PaymentSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetPaymentSourceOk() (*[]string, bool) {
	if o == nil || o.PaymentSource == nil {
		return nil, false
	}
	return o.PaymentSource, true
}

// HasPaymentSource returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasPaymentSource() bool {
	if o != nil && o.PaymentSource != nil {
		return true
	}

	return false
}

// SetPaymentSource gets a reference to the given []string and assigns it to the PaymentSource field.
func (o *TransactionsReportSpecParamsFilters) SetPaymentSource(v []string) {
	o.PaymentSource = &v
}

// GetMerchantInitiated returns the MerchantInitiated field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetMerchantInitiated() bool {
	if o == nil || o.MerchantInitiated == nil {
		var ret bool
		return ret
	}
	return *o.MerchantInitiated
}

// GetMerchantInitiatedOk returns a tuple with the MerchantInitiated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetMerchantInitiatedOk() (*bool, bool) {
	if o == nil || o.MerchantInitiated == nil {
		return nil, false
	}
	return o.MerchantInitiated, true
}

// HasMerchantInitiated returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasMerchantInitiated() bool {
	if o != nil && o.MerchantInitiated != nil {
		return true
	}

	return false
}

// SetMerchantInitiated gets a reference to the given bool and assigns it to the MerchantInitiated field.
func (o *TransactionsReportSpecParamsFilters) SetMerchantInitiated(v bool) {
	o.MerchantInitiated = &v
}

// GetIsSubsequentPayment returns the IsSubsequentPayment field value if set, zero value otherwise.
func (o *TransactionsReportSpecParamsFilters) GetIsSubsequentPayment() bool {
	if o == nil || o.IsSubsequentPayment == nil {
		var ret bool
		return ret
	}
	return *o.IsSubsequentPayment
}

// GetIsSubsequentPaymentOk returns a tuple with the IsSubsequentPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsReportSpecParamsFilters) GetIsSubsequentPaymentOk() (*bool, bool) {
	if o == nil || o.IsSubsequentPayment == nil {
		return nil, false
	}
	return o.IsSubsequentPayment, true
}

// HasIsSubsequentPayment returns a boolean if a field has been set.
func (o *TransactionsReportSpecParamsFilters) HasIsSubsequentPayment() bool {
	if o != nil && o.IsSubsequentPayment != nil {
		return true
	}

	return false
}

// SetIsSubsequentPayment gets a reference to the given bool and assigns it to the IsSubsequentPayment field.
func (o *TransactionsReportSpecParamsFilters) SetIsSubsequentPayment(v bool) {
	o.IsSubsequentPayment = &v
}

func (o TransactionsReportSpecParamsFilters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.AuthorizedAt != nil {
		toSerialize["authorized_at"] = o.AuthorizedAt
	}
	if o.CapturedAt != nil {
		toSerialize["captured_at"] = o.CapturedAt
	}
	if o.VoidedAt != nil {
		toSerialize["voided_at"] = o.VoidedAt
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	if o.Method != nil {
		toSerialize["method"] = o.Method
	}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ThreeDSecureStatus != nil {
		toSerialize["three_d_secure_status"] = o.ThreeDSecureStatus
	}
	if o.ThreeDSecureEci != nil {
		toSerialize["three_d_secure_eci"] = o.ThreeDSecureEci
	}
	if o.ThreeDSecureAuthResp != nil {
		toSerialize["three_d_secure_auth_resp"] = o.ThreeDSecureAuthResp
	}
	if o.PaymentSource != nil {
		toSerialize["payment_source"] = o.PaymentSource
	}
	if o.MerchantInitiated != nil {
		toSerialize["merchant_initiated"] = o.MerchantInitiated
	}
	if o.IsSubsequentPayment != nil {
		toSerialize["is_subsequent_payment"] = o.IsSubsequentPayment
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionsReportSpecParamsFilters struct {
	value *TransactionsReportSpecParamsFilters
	isSet bool
}

func (v NullableTransactionsReportSpecParamsFilters) Get() *TransactionsReportSpecParamsFilters {
	return v.value
}

func (v *NullableTransactionsReportSpecParamsFilters) Set(val *TransactionsReportSpecParamsFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsReportSpecParamsFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsReportSpecParamsFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsReportSpecParamsFilters(val *TransactionsReportSpecParamsFilters) *NullableTransactionsReportSpecParamsFilters {
	return &NullableTransactionsReportSpecParamsFilters{value: val, isSet: true}
}

func (v NullableTransactionsReportSpecParamsFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsReportSpecParamsFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


