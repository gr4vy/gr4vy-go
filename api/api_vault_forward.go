/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// VaultForwardApiService VaultForwardApi service
type VaultForwardApiService service

type ApiMakeVaultForwardRequest struct {
	ctx _context.Context
	ApiService *VaultForwardApiService
	xVaultForwardPaymentMethods *string
	xVaultForwardCheckoutSession *string
	xVaultForwardUrl *string
	xVaultForwardHttpMethod *string
	xVaultForwardAuthentications *string
	xVaultForwardHeaderHEADERNAME *string
	xVaultForwardTimeout *int32
	body *string
}

func (r ApiMakeVaultForwardRequest) XVaultForwardPaymentMethods(xVaultForwardPaymentMethods string) ApiMakeVaultForwardRequest {
	r.xVaultForwardPaymentMethods = &xVaultForwardPaymentMethods
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardCheckoutSession(xVaultForwardCheckoutSession string) ApiMakeVaultForwardRequest {
	r.xVaultForwardCheckoutSession = &xVaultForwardCheckoutSession
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardUrl(xVaultForwardUrl string) ApiMakeVaultForwardRequest {
	r.xVaultForwardUrl = &xVaultForwardUrl
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardHttpMethod(xVaultForwardHttpMethod string) ApiMakeVaultForwardRequest {
	r.xVaultForwardHttpMethod = &xVaultForwardHttpMethod
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardAuthentications(xVaultForwardAuthentications string) ApiMakeVaultForwardRequest {
	r.xVaultForwardAuthentications = &xVaultForwardAuthentications
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardHeaderHEADERNAME(xVaultForwardHeaderHEADERNAME string) ApiMakeVaultForwardRequest {
	r.xVaultForwardHeaderHEADERNAME = &xVaultForwardHeaderHEADERNAME
	return r
}
func (r ApiMakeVaultForwardRequest) XVaultForwardTimeout(xVaultForwardTimeout int32) ApiMakeVaultForwardRequest {
	r.xVaultForwardTimeout = &xVaultForwardTimeout
	return r
}
func (r ApiMakeVaultForwardRequest) Body(body string) ApiMakeVaultForwardRequest {
	r.body = &body
	return r
}

func (r ApiMakeVaultForwardRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.MakeVaultForwardExecute(r)
}

/*
 * MakeVaultForward Forward PCI data
 * Forward an API call to a PCI endpoint. The request body is evaluated and any template fields are replaced by the card data before the request is sent to the given destination.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiMakeVaultForwardRequest
 */
func (a *VaultForwardApiService) MakeVaultForward(ctx _context.Context) ApiMakeVaultForwardRequest {
	return ApiMakeVaultForwardRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *VaultForwardApiService) MakeVaultForwardExecute(r ApiMakeVaultForwardRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VaultForwardApiService.MakeVaultForward")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/vault-forward"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.xVaultForwardPaymentMethods == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardPaymentMethods is required and must be specified")
	}
	if r.xVaultForwardCheckoutSession == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardCheckoutSession is required and must be specified")
	}
	if r.xVaultForwardUrl == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardUrl is required and must be specified")
	}
	if r.xVaultForwardHttpMethod == nil {
		return localVarReturnValue, nil, reportError("xVaultForwardHttpMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["x-vault-forward-payment-methods"] = parameterToString(*r.xVaultForwardPaymentMethods, "")
	localVarHeaderParams["x-vault-forward-checkout-session"] = parameterToString(*r.xVaultForwardCheckoutSession, "")
	if r.xVaultForwardAuthentications != nil {
		localVarHeaderParams["x-vault-forward-authentications"] = parameterToString(*r.xVaultForwardAuthentications, "")
	}
	localVarHeaderParams["x-vault-forward-url"] = parameterToString(*r.xVaultForwardUrl, "")
	localVarHeaderParams["x-vault-forward-http-method"] = parameterToString(*r.xVaultForwardHttpMethod, "")
	if r.xVaultForwardHeaderHEADERNAME != nil {
		localVarHeaderParams["x-vault-forward-header-{HEADER_NAME}"] = parameterToString(*r.xVaultForwardHeaderHEADERNAME, "")
	}
	if r.xVaultForwardTimeout != nil {
		localVarHeaderParams["x-vault-forward-timeout"] = parameterToString(*r.xVaultForwardTimeout, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Error400BadRequest
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Error401Unauthorized
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
