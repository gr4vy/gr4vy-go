/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// ShippingAddresses A list of shipping addresses.
type ShippingAddresses struct {
	// A list of shipping addresses.
	Items *[]ShippingAddress `json:"items,omitempty"`
}

// NewShippingAddresses instantiates a new ShippingAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShippingAddresses() *ShippingAddresses {
	this := ShippingAddresses{}
	return &this
}

// NewShippingAddressesWithDefaults instantiates a new ShippingAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingAddressesWithDefaults() *ShippingAddresses {
	this := ShippingAddresses{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ShippingAddresses) GetItems() []ShippingAddress {
	if o == nil || o.Items == nil {
		var ret []ShippingAddress
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShippingAddresses) GetItemsOk() (*[]ShippingAddress, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ShippingAddresses) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ShippingAddress and assigns it to the Items field.
func (o *ShippingAddresses) SetItems(v []ShippingAddress) {
	o.Items = &v
}

func (o ShippingAddresses) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableShippingAddresses struct {
	value *ShippingAddresses
	isSet bool
}

func (v NullableShippingAddresses) Get() *ShippingAddresses {
	return v.value
}

func (v *NullableShippingAddresses) Set(val *ShippingAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingAddresses(val *ShippingAddresses) *NullableShippingAddresses {
	return &NullableShippingAddresses{value: val, isSet: true}
}

func (v NullableShippingAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


