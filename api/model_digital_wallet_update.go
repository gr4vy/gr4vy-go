/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// DigitalWalletUpdate Request body to update a registered digital wallet's details.
type DigitalWalletUpdate struct {
	// The name of the merchant. This is used to update the value initially used to register with a digital wallet provider and this name is not displayed to the buyer.
	MerchantName *string `json:"merchant_name,omitempty"`
	// The list of fully qualified domain names that a digital wallet provider should process payments for.
	DomainNames *[]string `json:"domain_names,omitempty"`
	// Determines the Gr4vy environments in which this digital wallet should be available.
	Environments *[]string `json:"environments,omitempty"`
}

// NewDigitalWalletUpdate instantiates a new DigitalWalletUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletUpdate() *DigitalWalletUpdate {
	this := DigitalWalletUpdate{}
	return &this
}

// NewDigitalWalletUpdateWithDefaults instantiates a new DigitalWalletUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletUpdateWithDefaults() *DigitalWalletUpdate {
	this := DigitalWalletUpdate{}
	return &this
}

// GetMerchantName returns the MerchantName field value if set, zero value otherwise.
func (o *DigitalWalletUpdate) GetMerchantName() string {
	if o == nil || o.MerchantName == nil {
		var ret string
		return ret
	}
	return *o.MerchantName
}

// GetMerchantNameOk returns a tuple with the MerchantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletUpdate) GetMerchantNameOk() (*string, bool) {
	if o == nil || o.MerchantName == nil {
		return nil, false
	}
	return o.MerchantName, true
}

// HasMerchantName returns a boolean if a field has been set.
func (o *DigitalWalletUpdate) HasMerchantName() bool {
	if o != nil && o.MerchantName != nil {
		return true
	}

	return false
}

// SetMerchantName gets a reference to the given string and assigns it to the MerchantName field.
func (o *DigitalWalletUpdate) SetMerchantName(v string) {
	o.MerchantName = &v
}

// GetDomainNames returns the DomainNames field value if set, zero value otherwise.
func (o *DigitalWalletUpdate) GetDomainNames() []string {
	if o == nil || o.DomainNames == nil {
		var ret []string
		return ret
	}
	return *o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletUpdate) GetDomainNamesOk() (*[]string, bool) {
	if o == nil || o.DomainNames == nil {
		return nil, false
	}
	return o.DomainNames, true
}

// HasDomainNames returns a boolean if a field has been set.
func (o *DigitalWalletUpdate) HasDomainNames() bool {
	if o != nil && o.DomainNames != nil {
		return true
	}

	return false
}

// SetDomainNames gets a reference to the given []string and assigns it to the DomainNames field.
func (o *DigitalWalletUpdate) SetDomainNames(v []string) {
	o.DomainNames = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *DigitalWalletUpdate) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletUpdate) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *DigitalWalletUpdate) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *DigitalWalletUpdate) SetEnvironments(v []string) {
	o.Environments = &v
}

func (o DigitalWalletUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MerchantName != nil {
		toSerialize["merchant_name"] = o.MerchantName
	}
	if o.DomainNames != nil {
		toSerialize["domain_names"] = o.DomainNames
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableDigitalWalletUpdate struct {
	value *DigitalWalletUpdate
	isSet bool
}

func (v NullableDigitalWalletUpdate) Get() *DigitalWalletUpdate {
	return v.value
}

func (v *NullableDigitalWalletUpdate) Set(val *DigitalWalletUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletUpdate(val *DigitalWalletUpdate) *NullableDigitalWalletUpdate {
	return &NullableDigitalWalletUpdate{value: val, isSet: true}
}

func (v NullableDigitalWalletUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


