/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// BINLookupRequestContext BIN lookup request context.
type BINLookupRequestContext struct {
	// The response body received from the `url`.
	Response NullableString `json:"response,omitempty"`
	// The response status code received from the `url`.
	ResponseStatusCode *int32 `json:"response_status_code,omitempty"`
	// Whether the BIN lookup was successful or not.
	Success *bool `json:"success,omitempty"`
	// The value used to lookup BIN details.
	Bin NullableString `json:"bin,omitempty"`
	// The type of card, i.e. credit or debit, from the lookup response.
	Type NullableString `json:"type,omitempty"`
	// The card scheme result from the lookup response.
	Scheme NullableString `json:"scheme,omitempty"`
	// The card additional schemes from the lookup response.
	AdditionalSchemes []string `json:"additional_schemes,omitempty"`
	// The card country code result from the lookup response.
	CountryCode NullableString `json:"country_code,omitempty"`
	// Whether Account Updater is enabled for this card.
	AccountUpdater NullableBool `json:"account_updater,omitempty"`
	// Whether the issuing bank supports network tokenization for this card.
	IssuerTokenization NullableBool `json:"issuer_tokenization,omitempty"`
}

// NewBINLookupRequestContext instantiates a new BINLookupRequestContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBINLookupRequestContext() *BINLookupRequestContext {
	this := BINLookupRequestContext{}
	return &this
}

// NewBINLookupRequestContextWithDefaults instantiates a new BINLookupRequestContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBINLookupRequestContextWithDefaults() *BINLookupRequestContext {
	this := BINLookupRequestContext{}
	return &this
}

// GetResponse returns the Response field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetResponse() string {
	if o == nil || o.Response.Get() == nil {
		var ret string
		return ret
	}
	return *o.Response.Get()
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetResponseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Response.Get(), o.Response.IsSet()
}

// HasResponse returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasResponse() bool {
	if o != nil && o.Response.IsSet() {
		return true
	}

	return false
}

// SetResponse gets a reference to the given NullableString and assigns it to the Response field.
func (o *BINLookupRequestContext) SetResponse(v string) {
	o.Response.Set(&v)
}
// SetResponseNil sets the value for Response to be an explicit nil
func (o *BINLookupRequestContext) SetResponseNil() {
	o.Response.Set(nil)
}

// UnsetResponse ensures that no value is present for Response, not even an explicit nil
func (o *BINLookupRequestContext) UnsetResponse() {
	o.Response.Unset()
}

// GetResponseStatusCode returns the ResponseStatusCode field value if set, zero value otherwise.
func (o *BINLookupRequestContext) GetResponseStatusCode() int32 {
	if o == nil || o.ResponseStatusCode == nil {
		var ret int32
		return ret
	}
	return *o.ResponseStatusCode
}

// GetResponseStatusCodeOk returns a tuple with the ResponseStatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BINLookupRequestContext) GetResponseStatusCodeOk() (*int32, bool) {
	if o == nil || o.ResponseStatusCode == nil {
		return nil, false
	}
	return o.ResponseStatusCode, true
}

// HasResponseStatusCode returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasResponseStatusCode() bool {
	if o != nil && o.ResponseStatusCode != nil {
		return true
	}

	return false
}

// SetResponseStatusCode gets a reference to the given int32 and assigns it to the ResponseStatusCode field.
func (o *BINLookupRequestContext) SetResponseStatusCode(v int32) {
	o.ResponseStatusCode = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *BINLookupRequestContext) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BINLookupRequestContext) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *BINLookupRequestContext) SetSuccess(v bool) {
	o.Success = &v
}

// GetBin returns the Bin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetBin() string {
	if o == nil || o.Bin.Get() == nil {
		var ret string
		return ret
	}
	return *o.Bin.Get()
}

// GetBinOk returns a tuple with the Bin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetBinOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Bin.Get(), o.Bin.IsSet()
}

// HasBin returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasBin() bool {
	if o != nil && o.Bin.IsSet() {
		return true
	}

	return false
}

// SetBin gets a reference to the given NullableString and assigns it to the Bin field.
func (o *BINLookupRequestContext) SetBin(v string) {
	o.Bin.Set(&v)
}
// SetBinNil sets the value for Bin to be an explicit nil
func (o *BINLookupRequestContext) SetBinNil() {
	o.Bin.Set(nil)
}

// UnsetBin ensures that no value is present for Bin, not even an explicit nil
func (o *BINLookupRequestContext) UnsetBin() {
	o.Bin.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *BINLookupRequestContext) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *BINLookupRequestContext) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *BINLookupRequestContext) UnsetType() {
	o.Type.Unset()
}

// GetScheme returns the Scheme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetScheme() string {
	if o == nil || o.Scheme.Get() == nil {
		var ret string
		return ret
	}
	return *o.Scheme.Get()
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetSchemeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Scheme.Get(), o.Scheme.IsSet()
}

// HasScheme returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasScheme() bool {
	if o != nil && o.Scheme.IsSet() {
		return true
	}

	return false
}

// SetScheme gets a reference to the given NullableString and assigns it to the Scheme field.
func (o *BINLookupRequestContext) SetScheme(v string) {
	o.Scheme.Set(&v)
}
// SetSchemeNil sets the value for Scheme to be an explicit nil
func (o *BINLookupRequestContext) SetSchemeNil() {
	o.Scheme.Set(nil)
}

// UnsetScheme ensures that no value is present for Scheme, not even an explicit nil
func (o *BINLookupRequestContext) UnsetScheme() {
	o.Scheme.Unset()
}

// GetAdditionalSchemes returns the AdditionalSchemes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetAdditionalSchemes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AdditionalSchemes
}

// GetAdditionalSchemesOk returns a tuple with the AdditionalSchemes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetAdditionalSchemesOk() (*[]string, bool) {
	if o == nil || o.AdditionalSchemes == nil {
		return nil, false
	}
	return &o.AdditionalSchemes, true
}

// HasAdditionalSchemes returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasAdditionalSchemes() bool {
	if o != nil && o.AdditionalSchemes != nil {
		return true
	}

	return false
}

// SetAdditionalSchemes gets a reference to the given []string and assigns it to the AdditionalSchemes field.
func (o *BINLookupRequestContext) SetAdditionalSchemes(v []string) {
	o.AdditionalSchemes = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetCountryCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// HasCountryCode returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasCountryCode() bool {
	if o != nil && o.CountryCode.IsSet() {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given NullableString and assigns it to the CountryCode field.
func (o *BINLookupRequestContext) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}
// SetCountryCodeNil sets the value for CountryCode to be an explicit nil
func (o *BINLookupRequestContext) SetCountryCodeNil() {
	o.CountryCode.Set(nil)
}

// UnsetCountryCode ensures that no value is present for CountryCode, not even an explicit nil
func (o *BINLookupRequestContext) UnsetCountryCode() {
	o.CountryCode.Unset()
}

// GetAccountUpdater returns the AccountUpdater field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetAccountUpdater() bool {
	if o == nil || o.AccountUpdater.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AccountUpdater.Get()
}

// GetAccountUpdaterOk returns a tuple with the AccountUpdater field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetAccountUpdaterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountUpdater.Get(), o.AccountUpdater.IsSet()
}

// HasAccountUpdater returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasAccountUpdater() bool {
	if o != nil && o.AccountUpdater.IsSet() {
		return true
	}

	return false
}

// SetAccountUpdater gets a reference to the given NullableBool and assigns it to the AccountUpdater field.
func (o *BINLookupRequestContext) SetAccountUpdater(v bool) {
	o.AccountUpdater.Set(&v)
}
// SetAccountUpdaterNil sets the value for AccountUpdater to be an explicit nil
func (o *BINLookupRequestContext) SetAccountUpdaterNil() {
	o.AccountUpdater.Set(nil)
}

// UnsetAccountUpdater ensures that no value is present for AccountUpdater, not even an explicit nil
func (o *BINLookupRequestContext) UnsetAccountUpdater() {
	o.AccountUpdater.Unset()
}

// GetIssuerTokenization returns the IssuerTokenization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BINLookupRequestContext) GetIssuerTokenization() bool {
	if o == nil || o.IssuerTokenization.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IssuerTokenization.Get()
}

// GetIssuerTokenizationOk returns a tuple with the IssuerTokenization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BINLookupRequestContext) GetIssuerTokenizationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuerTokenization.Get(), o.IssuerTokenization.IsSet()
}

// HasIssuerTokenization returns a boolean if a field has been set.
func (o *BINLookupRequestContext) HasIssuerTokenization() bool {
	if o != nil && o.IssuerTokenization.IsSet() {
		return true
	}

	return false
}

// SetIssuerTokenization gets a reference to the given NullableBool and assigns it to the IssuerTokenization field.
func (o *BINLookupRequestContext) SetIssuerTokenization(v bool) {
	o.IssuerTokenization.Set(&v)
}
// SetIssuerTokenizationNil sets the value for IssuerTokenization to be an explicit nil
func (o *BINLookupRequestContext) SetIssuerTokenizationNil() {
	o.IssuerTokenization.Set(nil)
}

// UnsetIssuerTokenization ensures that no value is present for IssuerTokenization, not even an explicit nil
func (o *BINLookupRequestContext) UnsetIssuerTokenization() {
	o.IssuerTokenization.Unset()
}

func (o BINLookupRequestContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Response.IsSet() {
		toSerialize["response"] = o.Response.Get()
	}
	if o.ResponseStatusCode != nil {
		toSerialize["response_status_code"] = o.ResponseStatusCode
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if o.Bin.IsSet() {
		toSerialize["bin"] = o.Bin.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Scheme.IsSet() {
		toSerialize["scheme"] = o.Scheme.Get()
	}
	if o.AdditionalSchemes != nil {
		toSerialize["additional_schemes"] = o.AdditionalSchemes
	}
	if o.CountryCode.IsSet() {
		toSerialize["country_code"] = o.CountryCode.Get()
	}
	if o.AccountUpdater.IsSet() {
		toSerialize["account_updater"] = o.AccountUpdater.Get()
	}
	if o.IssuerTokenization.IsSet() {
		toSerialize["issuer_tokenization"] = o.IssuerTokenization.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBINLookupRequestContext struct {
	value *BINLookupRequestContext
	isSet bool
}

func (v NullableBINLookupRequestContext) Get() *BINLookupRequestContext {
	return v.value
}

func (v *NullableBINLookupRequestContext) Set(val *BINLookupRequestContext) {
	v.value = val
	v.isSet = true
}

func (v NullableBINLookupRequestContext) IsSet() bool {
	return v.isSet
}

func (v *NullableBINLookupRequestContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBINLookupRequestContext(val *BINLookupRequestContext) *NullableBINLookupRequestContext {
	return &NullableBINLookupRequestContext{value: val, isSet: true}
}

func (v NullableBINLookupRequestContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBINLookupRequestContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


