/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// TransactionPaymentMethodRequest Payment method details to use in a transaction or to register a new payment method.
type TransactionPaymentMethodRequest struct {
	// The method to use for this request.
	Method string `json:"method"`
	// The 13-19 digit number for this credit card as it can be found on the front of the card.
	Number NullableString `json:"number,omitempty"`
	// The expiration date of the card, formatted `MM/YY`. If a card has been previously stored with us this value is optional.
	ExpirationDate NullableString `json:"expiration_date,omitempty"`
	// The 3 or 4 digit security code often found on the card. This often referred to as the CVV or CVD.
	SecurityCode NullableString `json:"security_code,omitempty"`
	// An external identifier that can be used to match the card against your own records.
	ExternalIdentifier NullableString `json:"external_identifier,omitempty"`
	// The redirect URL to redirect a buyer to after they have authorized their transaction or payment method. This only applies to payment methods that require buyer approval.
	RedirectUrl NullableString `json:"redirect_url,omitempty"`
	// An identifier for a previously tokenized payment method or checkout-session. This id can represent any type of payment method or checkout-session.
	Id NullableString `json:"id,omitempty"`
	// The ISO-4217 currency code to use this payment method for. This is used to select the payment service to use.
	Currency NullableString `json:"currency,omitempty"`
	// The 2-letter ISO code of the country to use this payment method for. This is used to select the payment service to use.
	Country NullableString `json:"country,omitempty"`
	// The encrypted (opaque) token that was passed to the `onpaymentauthorized` callback by the Apple Pay integration.
	Token map[string]interface{} `json:"token,omitempty"`
	AssuranceDetails NullableGooglePayRequestAssuranceDetails `json:"assurance_details,omitempty"`
	// Name of the card holder.
	CardholderName NullableString `json:"cardholder_name,omitempty"`
	// The cryptogram of the network token.
	Cryptogram NullableString `json:"cryptogram,omitempty"`
}

// NewTransactionPaymentMethodRequest instantiates a new TransactionPaymentMethodRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionPaymentMethodRequest(method string) *TransactionPaymentMethodRequest {
	this := TransactionPaymentMethodRequest{}
	this.Method = method
	return &this
}

// NewTransactionPaymentMethodRequestWithDefaults instantiates a new TransactionPaymentMethodRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionPaymentMethodRequestWithDefaults() *TransactionPaymentMethodRequest {
	this := TransactionPaymentMethodRequest{}
	return &this
}

// GetMethod returns the Method field value
func (o *TransactionPaymentMethodRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *TransactionPaymentMethodRequest) GetMethodOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *TransactionPaymentMethodRequest) SetMethod(v string) {
	o.Method = v
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetNumber() string {
	if o == nil || o.Number.Get() == nil {
		var ret string
		return ret
	}
	return *o.Number.Get()
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Number.Get(), o.Number.IsSet()
}

// HasNumber returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasNumber() bool {
	if o != nil && o.Number.IsSet() {
		return true
	}

	return false
}

// SetNumber gets a reference to the given NullableString and assigns it to the Number field.
func (o *TransactionPaymentMethodRequest) SetNumber(v string) {
	o.Number.Set(&v)
}
// SetNumberNil sets the value for Number to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetNumberNil() {
	o.Number.Set(nil)
}

// UnsetNumber ensures that no value is present for Number, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetNumber() {
	o.Number.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetExpirationDate() string {
	if o == nil || o.ExpirationDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate.Get()
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetExpirationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDate.Get(), o.ExpirationDate.IsSet()
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given NullableString and assigns it to the ExpirationDate field.
func (o *TransactionPaymentMethodRequest) SetExpirationDate(v string) {
	o.ExpirationDate.Set(&v)
}
// SetExpirationDateNil sets the value for ExpirationDate to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetExpirationDateNil() {
	o.ExpirationDate.Set(nil)
}

// UnsetExpirationDate ensures that no value is present for ExpirationDate, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetExpirationDate() {
	o.ExpirationDate.Unset()
}

// GetSecurityCode returns the SecurityCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetSecurityCode() string {
	if o == nil || o.SecurityCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityCode.Get()
}

// GetSecurityCodeOk returns a tuple with the SecurityCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetSecurityCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityCode.Get(), o.SecurityCode.IsSet()
}

// HasSecurityCode returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasSecurityCode() bool {
	if o != nil && o.SecurityCode.IsSet() {
		return true
	}

	return false
}

// SetSecurityCode gets a reference to the given NullableString and assigns it to the SecurityCode field.
func (o *TransactionPaymentMethodRequest) SetSecurityCode(v string) {
	o.SecurityCode.Set(&v)
}
// SetSecurityCodeNil sets the value for SecurityCode to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetSecurityCodeNil() {
	o.SecurityCode.Set(nil)
}

// UnsetSecurityCode ensures that no value is present for SecurityCode, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetSecurityCode() {
	o.SecurityCode.Unset()
}

// GetExternalIdentifier returns the ExternalIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetExternalIdentifier() string {
	if o == nil || o.ExternalIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalIdentifier.Get()
}

// GetExternalIdentifierOk returns a tuple with the ExternalIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetExternalIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalIdentifier.Get(), o.ExternalIdentifier.IsSet()
}

// HasExternalIdentifier returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasExternalIdentifier() bool {
	if o != nil && o.ExternalIdentifier.IsSet() {
		return true
	}

	return false
}

// SetExternalIdentifier gets a reference to the given NullableString and assigns it to the ExternalIdentifier field.
func (o *TransactionPaymentMethodRequest) SetExternalIdentifier(v string) {
	o.ExternalIdentifier.Set(&v)
}
// SetExternalIdentifierNil sets the value for ExternalIdentifier to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetExternalIdentifierNil() {
	o.ExternalIdentifier.Set(nil)
}

// UnsetExternalIdentifier ensures that no value is present for ExternalIdentifier, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetExternalIdentifier() {
	o.ExternalIdentifier.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetRedirectUrl() string {
	if o == nil || o.RedirectUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetRedirectUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *TransactionPaymentMethodRequest) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TransactionPaymentMethodRequest) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetId() {
	o.Id.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetCurrency() string {
	if o == nil || o.Currency.Get() == nil {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *TransactionPaymentMethodRequest) SetCurrency(v string) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetCurrency() {
	o.Currency.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *TransactionPaymentMethodRequest) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetCountry() {
	o.Country.Unset()
}

// GetToken returns the Token field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetToken() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}
	return o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetTokenOk() (*map[string]interface{}, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return &o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given map[string]interface{} and assigns it to the Token field.
func (o *TransactionPaymentMethodRequest) SetToken(v map[string]interface{}) {
	o.Token = v
}

// GetAssuranceDetails returns the AssuranceDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetAssuranceDetails() GooglePayRequestAssuranceDetails {
	if o == nil || o.AssuranceDetails.Get() == nil {
		var ret GooglePayRequestAssuranceDetails
		return ret
	}
	return *o.AssuranceDetails.Get()
}

// GetAssuranceDetailsOk returns a tuple with the AssuranceDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetAssuranceDetailsOk() (*GooglePayRequestAssuranceDetails, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssuranceDetails.Get(), o.AssuranceDetails.IsSet()
}

// HasAssuranceDetails returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasAssuranceDetails() bool {
	if o != nil && o.AssuranceDetails.IsSet() {
		return true
	}

	return false
}

// SetAssuranceDetails gets a reference to the given NullableGooglePayRequestAssuranceDetails and assigns it to the AssuranceDetails field.
func (o *TransactionPaymentMethodRequest) SetAssuranceDetails(v GooglePayRequestAssuranceDetails) {
	o.AssuranceDetails.Set(&v)
}
// SetAssuranceDetailsNil sets the value for AssuranceDetails to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetAssuranceDetailsNil() {
	o.AssuranceDetails.Set(nil)
}

// UnsetAssuranceDetails ensures that no value is present for AssuranceDetails, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetAssuranceDetails() {
	o.AssuranceDetails.Unset()
}

// GetCardholderName returns the CardholderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetCardholderName() string {
	if o == nil || o.CardholderName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CardholderName.Get()
}

// GetCardholderNameOk returns a tuple with the CardholderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetCardholderNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CardholderName.Get(), o.CardholderName.IsSet()
}

// HasCardholderName returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasCardholderName() bool {
	if o != nil && o.CardholderName.IsSet() {
		return true
	}

	return false
}

// SetCardholderName gets a reference to the given NullableString and assigns it to the CardholderName field.
func (o *TransactionPaymentMethodRequest) SetCardholderName(v string) {
	o.CardholderName.Set(&v)
}
// SetCardholderNameNil sets the value for CardholderName to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetCardholderNameNil() {
	o.CardholderName.Set(nil)
}

// UnsetCardholderName ensures that no value is present for CardholderName, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetCardholderName() {
	o.CardholderName.Unset()
}

// GetCryptogram returns the Cryptogram field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionPaymentMethodRequest) GetCryptogram() string {
	if o == nil || o.Cryptogram.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cryptogram.Get()
}

// GetCryptogramOk returns a tuple with the Cryptogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionPaymentMethodRequest) GetCryptogramOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cryptogram.Get(), o.Cryptogram.IsSet()
}

// HasCryptogram returns a boolean if a field has been set.
func (o *TransactionPaymentMethodRequest) HasCryptogram() bool {
	if o != nil && o.Cryptogram.IsSet() {
		return true
	}

	return false
}

// SetCryptogram gets a reference to the given NullableString and assigns it to the Cryptogram field.
func (o *TransactionPaymentMethodRequest) SetCryptogram(v string) {
	o.Cryptogram.Set(&v)
}
// SetCryptogramNil sets the value for Cryptogram to be an explicit nil
func (o *TransactionPaymentMethodRequest) SetCryptogramNil() {
	o.Cryptogram.Set(nil)
}

// UnsetCryptogram ensures that no value is present for Cryptogram, not even an explicit nil
func (o *TransactionPaymentMethodRequest) UnsetCryptogram() {
	o.Cryptogram.Unset()
}

func (o TransactionPaymentMethodRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["method"] = o.Method
	}
	if o.Number.IsSet() {
		toSerialize["number"] = o.Number.Get()
	}
	if o.ExpirationDate.IsSet() {
		toSerialize["expiration_date"] = o.ExpirationDate.Get()
	}
	if o.SecurityCode.IsSet() {
		toSerialize["security_code"] = o.SecurityCode.Get()
	}
	if o.ExternalIdentifier.IsSet() {
		toSerialize["external_identifier"] = o.ExternalIdentifier.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirect_url"] = o.RedirectUrl.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.AssuranceDetails.IsSet() {
		toSerialize["assurance_details"] = o.AssuranceDetails.Get()
	}
	if o.CardholderName.IsSet() {
		toSerialize["cardholder_name"] = o.CardholderName.Get()
	}
	if o.Cryptogram.IsSet() {
		toSerialize["cryptogram"] = o.Cryptogram.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionPaymentMethodRequest struct {
	value *TransactionPaymentMethodRequest
	isSet bool
}

func (v NullableTransactionPaymentMethodRequest) Get() *TransactionPaymentMethodRequest {
	return v.value
}

func (v *NullableTransactionPaymentMethodRequest) Set(val *TransactionPaymentMethodRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionPaymentMethodRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionPaymentMethodRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionPaymentMethodRequest(val *TransactionPaymentMethodRequest) *NullableTransactionPaymentMethodRequest {
	return &NullableTransactionPaymentMethodRequest{value: val, isSet: true}
}

func (v NullableTransactionPaymentMethodRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionPaymentMethodRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


