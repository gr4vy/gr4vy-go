/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// DigitalWalletApplePayTokenDecryptedContext Apple Pay decrypted token context.
type DigitalWalletApplePayTokenDecryptedContext struct {
	// Version information about the payment token.
	Version *string `json:"version,omitempty"`
	// The type of payment instrument.
	Type NullableString `json:"type,omitempty"`
	// Expiration of the decrypted data.
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// Online payment cryptogram, as defined by 3D Secure.
	HasCryptogram *bool `json:"has_cryptogram,omitempty"`
	// ECI indicator, as defined by 3D Secure.
	Eci NullableString `json:"eci,omitempty"`
	// Hash of the application data property of the original request.
	ApplicationData NullableString `json:"application_data,omitempty"`
	// The unique identifier from Apple Pay.
	TransactionIdentifier *string `json:"transaction_identifier,omitempty"`
	// The cardholder name.
	CardholderName NullableString `json:"cardholder_name,omitempty"`
	// ISO 4217 numeric currency code for the transaction.
	CurrencyCode *string `json:"currency_code,omitempty"`
	// The amount for the transaction.
	TransactionAmount *int32 `json:"transaction_amount,omitempty"`
	// Hex-encoded device manufacturer identifier which initiated the transaction.
	DeviceManufacturerIdentifier *string `json:"device_manufacturer_identifier,omitempty"`
	// Either \"3DSecure\" or \"EMV\".
	PaymentDataType *string `json:"payment_data_type,omitempty"`
	// For a merchant token request, the provisioned merchant token identifier from the payment network.
	MerchantTokenIdentifier NullableString `json:"merchant_token_identifier,omitempty"`
	// Expiration date of card.
	CardExpirationDate NullableString `json:"card_expiration_date,omitempty"`
	// Last four digits of card PAN.
	CardSuffix NullableString `json:"card_suffix,omitempty"`
}

// NewDigitalWalletApplePayTokenDecryptedContext instantiates a new DigitalWalletApplePayTokenDecryptedContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDigitalWalletApplePayTokenDecryptedContext() *DigitalWalletApplePayTokenDecryptedContext {
	this := DigitalWalletApplePayTokenDecryptedContext{}
	return &this
}

// NewDigitalWalletApplePayTokenDecryptedContextWithDefaults instantiates a new DigitalWalletApplePayTokenDecryptedContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDigitalWalletApplePayTokenDecryptedContextWithDefaults() *DigitalWalletApplePayTokenDecryptedContext {
	this := DigitalWalletApplePayTokenDecryptedContext{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetType() {
	o.Type.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetExpirationDate() string {
	if o == nil || o.ExpirationDate == nil {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetExpirationDateOk() (*string, bool) {
	if o == nil || o.ExpirationDate == nil {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasExpirationDate() bool {
	if o != nil && o.ExpirationDate != nil {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetHasCryptogram returns the HasCryptogram field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetHasCryptogram() bool {
	if o == nil || o.HasCryptogram == nil {
		var ret bool
		return ret
	}
	return *o.HasCryptogram
}

// GetHasCryptogramOk returns a tuple with the HasCryptogram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetHasCryptogramOk() (*bool, bool) {
	if o == nil || o.HasCryptogram == nil {
		return nil, false
	}
	return o.HasCryptogram, true
}

// HasHasCryptogram returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasHasCryptogram() bool {
	if o != nil && o.HasCryptogram != nil {
		return true
	}

	return false
}

// SetHasCryptogram gets a reference to the given bool and assigns it to the HasCryptogram field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetHasCryptogram(v bool) {
	o.HasCryptogram = &v
}

// GetEci returns the Eci field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetEci() string {
	if o == nil || o.Eci.Get() == nil {
		var ret string
		return ret
	}
	return *o.Eci.Get()
}

// GetEciOk returns a tuple with the Eci field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetEciOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Eci.Get(), o.Eci.IsSet()
}

// HasEci returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasEci() bool {
	if o != nil && o.Eci.IsSet() {
		return true
	}

	return false
}

// SetEci gets a reference to the given NullableString and assigns it to the Eci field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetEci(v string) {
	o.Eci.Set(&v)
}
// SetEciNil sets the value for Eci to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetEciNil() {
	o.Eci.Set(nil)
}

// UnsetEci ensures that no value is present for Eci, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetEci() {
	o.Eci.Unset()
}

// GetApplicationData returns the ApplicationData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetApplicationData() string {
	if o == nil || o.ApplicationData.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApplicationData.Get()
}

// GetApplicationDataOk returns a tuple with the ApplicationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetApplicationDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApplicationData.Get(), o.ApplicationData.IsSet()
}

// HasApplicationData returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasApplicationData() bool {
	if o != nil && o.ApplicationData.IsSet() {
		return true
	}

	return false
}

// SetApplicationData gets a reference to the given NullableString and assigns it to the ApplicationData field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetApplicationData(v string) {
	o.ApplicationData.Set(&v)
}
// SetApplicationDataNil sets the value for ApplicationData to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetApplicationDataNil() {
	o.ApplicationData.Set(nil)
}

// UnsetApplicationData ensures that no value is present for ApplicationData, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetApplicationData() {
	o.ApplicationData.Unset()
}

// GetTransactionIdentifier returns the TransactionIdentifier field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetTransactionIdentifier() string {
	if o == nil || o.TransactionIdentifier == nil {
		var ret string
		return ret
	}
	return *o.TransactionIdentifier
}

// GetTransactionIdentifierOk returns a tuple with the TransactionIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetTransactionIdentifierOk() (*string, bool) {
	if o == nil || o.TransactionIdentifier == nil {
		return nil, false
	}
	return o.TransactionIdentifier, true
}

// HasTransactionIdentifier returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasTransactionIdentifier() bool {
	if o != nil && o.TransactionIdentifier != nil {
		return true
	}

	return false
}

// SetTransactionIdentifier gets a reference to the given string and assigns it to the TransactionIdentifier field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetTransactionIdentifier(v string) {
	o.TransactionIdentifier = &v
}

// GetCardholderName returns the CardholderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardholderName() string {
	if o == nil || o.CardholderName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CardholderName.Get()
}

// GetCardholderNameOk returns a tuple with the CardholderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardholderNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CardholderName.Get(), o.CardholderName.IsSet()
}

// HasCardholderName returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasCardholderName() bool {
	if o != nil && o.CardholderName.IsSet() {
		return true
	}

	return false
}

// SetCardholderName gets a reference to the given NullableString and assigns it to the CardholderName field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardholderName(v string) {
	o.CardholderName.Set(&v)
}
// SetCardholderNameNil sets the value for CardholderName to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardholderNameNil() {
	o.CardholderName.Set(nil)
}

// UnsetCardholderName ensures that no value is present for CardholderName, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetCardholderName() {
	o.CardholderName.Unset()
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetTransactionAmount returns the TransactionAmount field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetTransactionAmount() int32 {
	if o == nil || o.TransactionAmount == nil {
		var ret int32
		return ret
	}
	return *o.TransactionAmount
}

// GetTransactionAmountOk returns a tuple with the TransactionAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetTransactionAmountOk() (*int32, bool) {
	if o == nil || o.TransactionAmount == nil {
		return nil, false
	}
	return o.TransactionAmount, true
}

// HasTransactionAmount returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasTransactionAmount() bool {
	if o != nil && o.TransactionAmount != nil {
		return true
	}

	return false
}

// SetTransactionAmount gets a reference to the given int32 and assigns it to the TransactionAmount field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetTransactionAmount(v int32) {
	o.TransactionAmount = &v
}

// GetDeviceManufacturerIdentifier returns the DeviceManufacturerIdentifier field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetDeviceManufacturerIdentifier() string {
	if o == nil || o.DeviceManufacturerIdentifier == nil {
		var ret string
		return ret
	}
	return *o.DeviceManufacturerIdentifier
}

// GetDeviceManufacturerIdentifierOk returns a tuple with the DeviceManufacturerIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetDeviceManufacturerIdentifierOk() (*string, bool) {
	if o == nil || o.DeviceManufacturerIdentifier == nil {
		return nil, false
	}
	return o.DeviceManufacturerIdentifier, true
}

// HasDeviceManufacturerIdentifier returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasDeviceManufacturerIdentifier() bool {
	if o != nil && o.DeviceManufacturerIdentifier != nil {
		return true
	}

	return false
}

// SetDeviceManufacturerIdentifier gets a reference to the given string and assigns it to the DeviceManufacturerIdentifier field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetDeviceManufacturerIdentifier(v string) {
	o.DeviceManufacturerIdentifier = &v
}

// GetPaymentDataType returns the PaymentDataType field value if set, zero value otherwise.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetPaymentDataType() string {
	if o == nil || o.PaymentDataType == nil {
		var ret string
		return ret
	}
	return *o.PaymentDataType
}

// GetPaymentDataTypeOk returns a tuple with the PaymentDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) GetPaymentDataTypeOk() (*string, bool) {
	if o == nil || o.PaymentDataType == nil {
		return nil, false
	}
	return o.PaymentDataType, true
}

// HasPaymentDataType returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasPaymentDataType() bool {
	if o != nil && o.PaymentDataType != nil {
		return true
	}

	return false
}

// SetPaymentDataType gets a reference to the given string and assigns it to the PaymentDataType field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetPaymentDataType(v string) {
	o.PaymentDataType = &v
}

// GetMerchantTokenIdentifier returns the MerchantTokenIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetMerchantTokenIdentifier() string {
	if o == nil || o.MerchantTokenIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.MerchantTokenIdentifier.Get()
}

// GetMerchantTokenIdentifierOk returns a tuple with the MerchantTokenIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetMerchantTokenIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantTokenIdentifier.Get(), o.MerchantTokenIdentifier.IsSet()
}

// HasMerchantTokenIdentifier returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasMerchantTokenIdentifier() bool {
	if o != nil && o.MerchantTokenIdentifier.IsSet() {
		return true
	}

	return false
}

// SetMerchantTokenIdentifier gets a reference to the given NullableString and assigns it to the MerchantTokenIdentifier field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetMerchantTokenIdentifier(v string) {
	o.MerchantTokenIdentifier.Set(&v)
}
// SetMerchantTokenIdentifierNil sets the value for MerchantTokenIdentifier to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetMerchantTokenIdentifierNil() {
	o.MerchantTokenIdentifier.Set(nil)
}

// UnsetMerchantTokenIdentifier ensures that no value is present for MerchantTokenIdentifier, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetMerchantTokenIdentifier() {
	o.MerchantTokenIdentifier.Unset()
}

// GetCardExpirationDate returns the CardExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardExpirationDate() string {
	if o == nil || o.CardExpirationDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.CardExpirationDate.Get()
}

// GetCardExpirationDateOk returns a tuple with the CardExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardExpirationDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CardExpirationDate.Get(), o.CardExpirationDate.IsSet()
}

// HasCardExpirationDate returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasCardExpirationDate() bool {
	if o != nil && o.CardExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetCardExpirationDate gets a reference to the given NullableString and assigns it to the CardExpirationDate field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardExpirationDate(v string) {
	o.CardExpirationDate.Set(&v)
}
// SetCardExpirationDateNil sets the value for CardExpirationDate to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardExpirationDateNil() {
	o.CardExpirationDate.Set(nil)
}

// UnsetCardExpirationDate ensures that no value is present for CardExpirationDate, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetCardExpirationDate() {
	o.CardExpirationDate.Unset()
}

// GetCardSuffix returns the CardSuffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardSuffix() string {
	if o == nil || o.CardSuffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.CardSuffix.Get()
}

// GetCardSuffixOk returns a tuple with the CardSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DigitalWalletApplePayTokenDecryptedContext) GetCardSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CardSuffix.Get(), o.CardSuffix.IsSet()
}

// HasCardSuffix returns a boolean if a field has been set.
func (o *DigitalWalletApplePayTokenDecryptedContext) HasCardSuffix() bool {
	if o != nil && o.CardSuffix.IsSet() {
		return true
	}

	return false
}

// SetCardSuffix gets a reference to the given NullableString and assigns it to the CardSuffix field.
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardSuffix(v string) {
	o.CardSuffix.Set(&v)
}
// SetCardSuffixNil sets the value for CardSuffix to be an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) SetCardSuffixNil() {
	o.CardSuffix.Set(nil)
}

// UnsetCardSuffix ensures that no value is present for CardSuffix, not even an explicit nil
func (o *DigitalWalletApplePayTokenDecryptedContext) UnsetCardSuffix() {
	o.CardSuffix.Unset()
}

func (o DigitalWalletApplePayTokenDecryptedContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ExpirationDate != nil {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	if o.HasCryptogram != nil {
		toSerialize["has_cryptogram"] = o.HasCryptogram
	}
	if o.Eci.IsSet() {
		toSerialize["eci"] = o.Eci.Get()
	}
	if o.ApplicationData.IsSet() {
		toSerialize["application_data"] = o.ApplicationData.Get()
	}
	if o.TransactionIdentifier != nil {
		toSerialize["transaction_identifier"] = o.TransactionIdentifier
	}
	if o.CardholderName.IsSet() {
		toSerialize["cardholder_name"] = o.CardholderName.Get()
	}
	if o.CurrencyCode != nil {
		toSerialize["currency_code"] = o.CurrencyCode
	}
	if o.TransactionAmount != nil {
		toSerialize["transaction_amount"] = o.TransactionAmount
	}
	if o.DeviceManufacturerIdentifier != nil {
		toSerialize["device_manufacturer_identifier"] = o.DeviceManufacturerIdentifier
	}
	if o.PaymentDataType != nil {
		toSerialize["payment_data_type"] = o.PaymentDataType
	}
	if o.MerchantTokenIdentifier.IsSet() {
		toSerialize["merchant_token_identifier"] = o.MerchantTokenIdentifier.Get()
	}
	if o.CardExpirationDate.IsSet() {
		toSerialize["card_expiration_date"] = o.CardExpirationDate.Get()
	}
	if o.CardSuffix.IsSet() {
		toSerialize["card_suffix"] = o.CardSuffix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDigitalWalletApplePayTokenDecryptedContext struct {
	value *DigitalWalletApplePayTokenDecryptedContext
	isSet bool
}

func (v NullableDigitalWalletApplePayTokenDecryptedContext) Get() *DigitalWalletApplePayTokenDecryptedContext {
	return v.value
}

func (v *NullableDigitalWalletApplePayTokenDecryptedContext) Set(val *DigitalWalletApplePayTokenDecryptedContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDigitalWalletApplePayTokenDecryptedContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDigitalWalletApplePayTokenDecryptedContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDigitalWalletApplePayTokenDecryptedContext(val *DigitalWalletApplePayTokenDecryptedContext) *NullableDigitalWalletApplePayTokenDecryptedContext {
	return &NullableDigitalWalletApplePayTokenDecryptedContext{value: val, isSet: true}
}

func (v NullableDigitalWalletApplePayTokenDecryptedContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDigitalWalletApplePayTokenDecryptedContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


