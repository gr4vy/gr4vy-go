/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// PaymentServiceUpdate Request body for updating an active payment service.
type PaymentServiceUpdate struct {
	// A custom name for the payment service. This will be shown in the Admin UI.
	DisplayName *string `json:"display_name,omitempty"`
	// A list of fields, each containing a key-value pair for each field defined by the definition for this payment service e.g. for stripe-card `secret_key` is required and so must be sent within this field.
	Fields *[]PaymentServiceUpdateFields `json:"fields,omitempty"`
	// The `reporting_fields` field should contain a list of key-value pairs. Each key-value pair represents a reporting field defined by the payment service. For example, when enabling settlement reporting for `nuvei-card`, the `ssh_username` field is required and must be included in `reporting_fields`.
	ReportingFields *[]PaymentServiceUpdateReportingFields `json:"reporting_fields,omitempty"`
	// A list of countries that this payment service needs to support in ISO two-letter code format.
	AcceptedCountries *[]string `json:"accepted_countries,omitempty"`
	// A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.
	AcceptedCurrencies *[]string `json:"accepted_currencies,omitempty"`
	// Defines if 3-D Secure is enabled for the service. This feature can only be enabled if the payment service definition supports the `three_d_secure_hosted` feature. This does not affect pass through 3-D Secure data.
	ThreeDSecureEnabled *bool `json:"three_d_secure_enabled,omitempty"`
	// Configuration for each supported card scheme. When updating a Payment Service, a key not being present will indicate no updates to be done on that scheme, whereas an object being sent as Null for a key will empty the configuration for that scheme.
	MerchantProfile NullableMerchantProfile `json:"merchant_profile,omitempty"`
	// Defines if this service is currently active or not.
	Active *bool `json:"active,omitempty"`
	// Defines if the service works as an open-loop service. This feature can only be enabled if the PSP is set up to accept previous scheme transaction IDs.  If this value is set to `null`, it will be set to the value of `open_loop` in the payment service definition.  If `open_loop_toggle` is `false` in the payment service definition, `open_loop` should either not be provided or set to `null`, or it will fail with a validation error.
	OpenLoop NullableBool `json:"open_loop,omitempty"`
	// Defines if tokenization is enabled for the service. This feature can only be enabled if the payment service is NOT set as `open_loop` and the PSP is set up to tokenize.
	PaymentMethodTokenizationEnabled NullableBool `json:"payment_method_tokenization_enabled,omitempty"`
	// Defines if network tokens are enabled for the service. This feature can only be enabled if the payment service is set as `open_loop` and the PSP is set up to accept network tokens.  If this value is set to `null`, it will be set to the value of `network_tokens_default` in the payment service definition.  If `network_tokens_toggle` is `false` in the payment service definition, `network_tokens_enabled` should either not be provided or set to `null`, or it will fail with a validation error.
	NetworkTokensEnabled NullableBool `json:"network_tokens_enabled,omitempty"`
	// Defines if settlement reporting is enabled for the service. This feature can only be enabled if the payment service definition supports the `settlement_reporting` feature.
	SettlementReportingEnabled *bool `json:"settlement_reporting_enabled,omitempty"`
}

// NewPaymentServiceUpdate instantiates a new PaymentServiceUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaymentServiceUpdate() *PaymentServiceUpdate {
	this := PaymentServiceUpdate{}
	var threeDSecureEnabled bool = false
	this.ThreeDSecureEnabled = &threeDSecureEnabled
	var active bool = true
	this.Active = &active
	var settlementReportingEnabled bool = false
	this.SettlementReportingEnabled = &settlementReportingEnabled
	return &this
}

// NewPaymentServiceUpdateWithDefaults instantiates a new PaymentServiceUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentServiceUpdateWithDefaults() *PaymentServiceUpdate {
	this := PaymentServiceUpdate{}
	var threeDSecureEnabled bool = false
	this.ThreeDSecureEnabled = &threeDSecureEnabled
	var active bool = true
	this.Active = &active
	var settlementReportingEnabled bool = false
	this.SettlementReportingEnabled = &settlementReportingEnabled
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *PaymentServiceUpdate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetFields() []PaymentServiceUpdateFields {
	if o == nil || o.Fields == nil {
		var ret []PaymentServiceUpdateFields
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetFieldsOk() (*[]PaymentServiceUpdateFields, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []PaymentServiceUpdateFields and assigns it to the Fields field.
func (o *PaymentServiceUpdate) SetFields(v []PaymentServiceUpdateFields) {
	o.Fields = &v
}

// GetReportingFields returns the ReportingFields field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetReportingFields() []PaymentServiceUpdateReportingFields {
	if o == nil || o.ReportingFields == nil {
		var ret []PaymentServiceUpdateReportingFields
		return ret
	}
	return *o.ReportingFields
}

// GetReportingFieldsOk returns a tuple with the ReportingFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetReportingFieldsOk() (*[]PaymentServiceUpdateReportingFields, bool) {
	if o == nil || o.ReportingFields == nil {
		return nil, false
	}
	return o.ReportingFields, true
}

// HasReportingFields returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasReportingFields() bool {
	if o != nil && o.ReportingFields != nil {
		return true
	}

	return false
}

// SetReportingFields gets a reference to the given []PaymentServiceUpdateReportingFields and assigns it to the ReportingFields field.
func (o *PaymentServiceUpdate) SetReportingFields(v []PaymentServiceUpdateReportingFields) {
	o.ReportingFields = &v
}

// GetAcceptedCountries returns the AcceptedCountries field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetAcceptedCountries() []string {
	if o == nil || o.AcceptedCountries == nil {
		var ret []string
		return ret
	}
	return *o.AcceptedCountries
}

// GetAcceptedCountriesOk returns a tuple with the AcceptedCountries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetAcceptedCountriesOk() (*[]string, bool) {
	if o == nil || o.AcceptedCountries == nil {
		return nil, false
	}
	return o.AcceptedCountries, true
}

// HasAcceptedCountries returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasAcceptedCountries() bool {
	if o != nil && o.AcceptedCountries != nil {
		return true
	}

	return false
}

// SetAcceptedCountries gets a reference to the given []string and assigns it to the AcceptedCountries field.
func (o *PaymentServiceUpdate) SetAcceptedCountries(v []string) {
	o.AcceptedCountries = &v
}

// GetAcceptedCurrencies returns the AcceptedCurrencies field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetAcceptedCurrencies() []string {
	if o == nil || o.AcceptedCurrencies == nil {
		var ret []string
		return ret
	}
	return *o.AcceptedCurrencies
}

// GetAcceptedCurrenciesOk returns a tuple with the AcceptedCurrencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetAcceptedCurrenciesOk() (*[]string, bool) {
	if o == nil || o.AcceptedCurrencies == nil {
		return nil, false
	}
	return o.AcceptedCurrencies, true
}

// HasAcceptedCurrencies returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasAcceptedCurrencies() bool {
	if o != nil && o.AcceptedCurrencies != nil {
		return true
	}

	return false
}

// SetAcceptedCurrencies gets a reference to the given []string and assigns it to the AcceptedCurrencies field.
func (o *PaymentServiceUpdate) SetAcceptedCurrencies(v []string) {
	o.AcceptedCurrencies = &v
}

// GetThreeDSecureEnabled returns the ThreeDSecureEnabled field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetThreeDSecureEnabled() bool {
	if o == nil || o.ThreeDSecureEnabled == nil {
		var ret bool
		return ret
	}
	return *o.ThreeDSecureEnabled
}

// GetThreeDSecureEnabledOk returns a tuple with the ThreeDSecureEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetThreeDSecureEnabledOk() (*bool, bool) {
	if o == nil || o.ThreeDSecureEnabled == nil {
		return nil, false
	}
	return o.ThreeDSecureEnabled, true
}

// HasThreeDSecureEnabled returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasThreeDSecureEnabled() bool {
	if o != nil && o.ThreeDSecureEnabled != nil {
		return true
	}

	return false
}

// SetThreeDSecureEnabled gets a reference to the given bool and assigns it to the ThreeDSecureEnabled field.
func (o *PaymentServiceUpdate) SetThreeDSecureEnabled(v bool) {
	o.ThreeDSecureEnabled = &v
}

// GetMerchantProfile returns the MerchantProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentServiceUpdate) GetMerchantProfile() MerchantProfile {
	if o == nil || o.MerchantProfile.Get() == nil {
		var ret MerchantProfile
		return ret
	}
	return *o.MerchantProfile.Get()
}

// GetMerchantProfileOk returns a tuple with the MerchantProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentServiceUpdate) GetMerchantProfileOk() (*MerchantProfile, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantProfile.Get(), o.MerchantProfile.IsSet()
}

// HasMerchantProfile returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasMerchantProfile() bool {
	if o != nil && o.MerchantProfile.IsSet() {
		return true
	}

	return false
}

// SetMerchantProfile gets a reference to the given NullableMerchantProfile and assigns it to the MerchantProfile field.
func (o *PaymentServiceUpdate) SetMerchantProfile(v MerchantProfile) {
	o.MerchantProfile.Set(&v)
}
// SetMerchantProfileNil sets the value for MerchantProfile to be an explicit nil
func (o *PaymentServiceUpdate) SetMerchantProfileNil() {
	o.MerchantProfile.Set(nil)
}

// UnsetMerchantProfile ensures that no value is present for MerchantProfile, not even an explicit nil
func (o *PaymentServiceUpdate) UnsetMerchantProfile() {
	o.MerchantProfile.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PaymentServiceUpdate) SetActive(v bool) {
	o.Active = &v
}

// GetOpenLoop returns the OpenLoop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentServiceUpdate) GetOpenLoop() bool {
	if o == nil || o.OpenLoop.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OpenLoop.Get()
}

// GetOpenLoopOk returns a tuple with the OpenLoop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentServiceUpdate) GetOpenLoopOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OpenLoop.Get(), o.OpenLoop.IsSet()
}

// HasOpenLoop returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasOpenLoop() bool {
	if o != nil && o.OpenLoop.IsSet() {
		return true
	}

	return false
}

// SetOpenLoop gets a reference to the given NullableBool and assigns it to the OpenLoop field.
func (o *PaymentServiceUpdate) SetOpenLoop(v bool) {
	o.OpenLoop.Set(&v)
}
// SetOpenLoopNil sets the value for OpenLoop to be an explicit nil
func (o *PaymentServiceUpdate) SetOpenLoopNil() {
	o.OpenLoop.Set(nil)
}

// UnsetOpenLoop ensures that no value is present for OpenLoop, not even an explicit nil
func (o *PaymentServiceUpdate) UnsetOpenLoop() {
	o.OpenLoop.Unset()
}

// GetPaymentMethodTokenizationEnabled returns the PaymentMethodTokenizationEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentServiceUpdate) GetPaymentMethodTokenizationEnabled() bool {
	if o == nil || o.PaymentMethodTokenizationEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PaymentMethodTokenizationEnabled.Get()
}

// GetPaymentMethodTokenizationEnabledOk returns a tuple with the PaymentMethodTokenizationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentServiceUpdate) GetPaymentMethodTokenizationEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaymentMethodTokenizationEnabled.Get(), o.PaymentMethodTokenizationEnabled.IsSet()
}

// HasPaymentMethodTokenizationEnabled returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasPaymentMethodTokenizationEnabled() bool {
	if o != nil && o.PaymentMethodTokenizationEnabled.IsSet() {
		return true
	}

	return false
}

// SetPaymentMethodTokenizationEnabled gets a reference to the given NullableBool and assigns it to the PaymentMethodTokenizationEnabled field.
func (o *PaymentServiceUpdate) SetPaymentMethodTokenizationEnabled(v bool) {
	o.PaymentMethodTokenizationEnabled.Set(&v)
}
// SetPaymentMethodTokenizationEnabledNil sets the value for PaymentMethodTokenizationEnabled to be an explicit nil
func (o *PaymentServiceUpdate) SetPaymentMethodTokenizationEnabledNil() {
	o.PaymentMethodTokenizationEnabled.Set(nil)
}

// UnsetPaymentMethodTokenizationEnabled ensures that no value is present for PaymentMethodTokenizationEnabled, not even an explicit nil
func (o *PaymentServiceUpdate) UnsetPaymentMethodTokenizationEnabled() {
	o.PaymentMethodTokenizationEnabled.Unset()
}

// GetNetworkTokensEnabled returns the NetworkTokensEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaymentServiceUpdate) GetNetworkTokensEnabled() bool {
	if o == nil || o.NetworkTokensEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.NetworkTokensEnabled.Get()
}

// GetNetworkTokensEnabledOk returns a tuple with the NetworkTokensEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaymentServiceUpdate) GetNetworkTokensEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkTokensEnabled.Get(), o.NetworkTokensEnabled.IsSet()
}

// HasNetworkTokensEnabled returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasNetworkTokensEnabled() bool {
	if o != nil && o.NetworkTokensEnabled.IsSet() {
		return true
	}

	return false
}

// SetNetworkTokensEnabled gets a reference to the given NullableBool and assigns it to the NetworkTokensEnabled field.
func (o *PaymentServiceUpdate) SetNetworkTokensEnabled(v bool) {
	o.NetworkTokensEnabled.Set(&v)
}
// SetNetworkTokensEnabledNil sets the value for NetworkTokensEnabled to be an explicit nil
func (o *PaymentServiceUpdate) SetNetworkTokensEnabledNil() {
	o.NetworkTokensEnabled.Set(nil)
}

// UnsetNetworkTokensEnabled ensures that no value is present for NetworkTokensEnabled, not even an explicit nil
func (o *PaymentServiceUpdate) UnsetNetworkTokensEnabled() {
	o.NetworkTokensEnabled.Unset()
}

// GetSettlementReportingEnabled returns the SettlementReportingEnabled field value if set, zero value otherwise.
func (o *PaymentServiceUpdate) GetSettlementReportingEnabled() bool {
	if o == nil || o.SettlementReportingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.SettlementReportingEnabled
}

// GetSettlementReportingEnabledOk returns a tuple with the SettlementReportingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaymentServiceUpdate) GetSettlementReportingEnabledOk() (*bool, bool) {
	if o == nil || o.SettlementReportingEnabled == nil {
		return nil, false
	}
	return o.SettlementReportingEnabled, true
}

// HasSettlementReportingEnabled returns a boolean if a field has been set.
func (o *PaymentServiceUpdate) HasSettlementReportingEnabled() bool {
	if o != nil && o.SettlementReportingEnabled != nil {
		return true
	}

	return false
}

// SetSettlementReportingEnabled gets a reference to the given bool and assigns it to the SettlementReportingEnabled field.
func (o *PaymentServiceUpdate) SetSettlementReportingEnabled(v bool) {
	o.SettlementReportingEnabled = &v
}

func (o PaymentServiceUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	if o.ReportingFields != nil {
		toSerialize["reporting_fields"] = o.ReportingFields
	}
	if o.AcceptedCountries != nil {
		toSerialize["accepted_countries"] = o.AcceptedCountries
	}
	if o.AcceptedCurrencies != nil {
		toSerialize["accepted_currencies"] = o.AcceptedCurrencies
	}
	if o.ThreeDSecureEnabled != nil {
		toSerialize["three_d_secure_enabled"] = o.ThreeDSecureEnabled
	}
	if o.MerchantProfile.IsSet() {
		toSerialize["merchant_profile"] = o.MerchantProfile.Get()
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.OpenLoop.IsSet() {
		toSerialize["open_loop"] = o.OpenLoop.Get()
	}
	if o.PaymentMethodTokenizationEnabled.IsSet() {
		toSerialize["payment_method_tokenization_enabled"] = o.PaymentMethodTokenizationEnabled.Get()
	}
	if o.NetworkTokensEnabled.IsSet() {
		toSerialize["network_tokens_enabled"] = o.NetworkTokensEnabled.Get()
	}
	if o.SettlementReportingEnabled != nil {
		toSerialize["settlement_reporting_enabled"] = o.SettlementReportingEnabled
	}
	return json.Marshal(toSerialize)
}

type NullablePaymentServiceUpdate struct {
	value *PaymentServiceUpdate
	isSet bool
}

func (v NullablePaymentServiceUpdate) Get() *PaymentServiceUpdate {
	return v.value
}

func (v *NullablePaymentServiceUpdate) Set(val *PaymentServiceUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentServiceUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentServiceUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentServiceUpdate(val *PaymentServiceUpdate) *NullablePaymentServiceUpdate {
	return &NullablePaymentServiceUpdate{value: val, isSet: true}
}

func (v NullablePaymentServiceUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentServiceUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


