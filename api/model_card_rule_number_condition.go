/*
 * Gr4vy API (Beta)
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.0
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// CardRuleNumberCondition Part of a rule that matches numeric fields. It defines the condition under which this rule applies.
type CardRuleNumberCondition struct {
	// `number`.
	Match string `json:"match"`
	// The transaction field to filter by.
	Key string `json:"key"`
	// The comparison to make to `value` property.
	Operator string `json:"operator"`
	// The values to compare the `key` to.
	Value float32 `json:"value"`
}

// NewCardRuleNumberCondition instantiates a new CardRuleNumberCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardRuleNumberCondition(match string, key string, operator string, value float32) *CardRuleNumberCondition {
	this := CardRuleNumberCondition{}
	this.Match = match
	this.Key = key
	this.Operator = operator
	this.Value = value
	return &this
}

// NewCardRuleNumberConditionWithDefaults instantiates a new CardRuleNumberCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardRuleNumberConditionWithDefaults() *CardRuleNumberCondition {
	this := CardRuleNumberCondition{}
	return &this
}

// GetMatch returns the Match field value
func (o *CardRuleNumberCondition) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *CardRuleNumberCondition) GetMatchOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *CardRuleNumberCondition) SetMatch(v string) {
	o.Match = v
}

// GetKey returns the Key field value
func (o *CardRuleNumberCondition) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *CardRuleNumberCondition) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *CardRuleNumberCondition) SetKey(v string) {
	o.Key = v
}

// GetOperator returns the Operator field value
func (o *CardRuleNumberCondition) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *CardRuleNumberCondition) GetOperatorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *CardRuleNumberCondition) SetOperator(v string) {
	o.Operator = v
}

// GetValue returns the Value field value
func (o *CardRuleNumberCondition) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CardRuleNumberCondition) GetValueOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CardRuleNumberCondition) SetValue(v float32) {
	o.Value = v
}

func (o CardRuleNumberCondition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["match"] = o.Match
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["operator"] = o.Operator
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableCardRuleNumberCondition struct {
	value *CardRuleNumberCondition
	isSet bool
}

func (v NullableCardRuleNumberCondition) Get() *CardRuleNumberCondition {
	return v.value
}

func (v *NullableCardRuleNumberCondition) Set(val *CardRuleNumberCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableCardRuleNumberCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableCardRuleNumberCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardRuleNumberCondition(val *CardRuleNumberCondition) *NullableCardRuleNumberCondition {
	return &NullableCardRuleNumberCondition{value: val, isSet: true}
}

func (v NullableCardRuleNumberCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardRuleNumberCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


