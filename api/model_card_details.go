/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// CardDetails Details about a card.
type CardDetails struct {
	// `card-detail`.
	Type *string `json:"type,omitempty"`
	// The 6-8 digit BIN of the card.
	Id *string `json:"id,omitempty"`
	// The type of card.
	CardType *string `json:"card_type,omitempty"`
	// The scheme/brand of the card.
	Scheme *string `json:"scheme,omitempty"`
	// The 2-letter ISO code of the issuing country of the card.
	Country *string `json:"country,omitempty"`
	// A list of fields that are required to process a transaction for this card.
	RequiredFields *[]string `json:"required_fields,omitempty"`
}

// NewCardDetails instantiates a new CardDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardDetails() *CardDetails {
	this := CardDetails{}
	return &this
}

// NewCardDetailsWithDefaults instantiates a new CardDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardDetailsWithDefaults() *CardDetails {
	this := CardDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CardDetails) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CardDetails) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CardDetails) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CardDetails) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CardDetails) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CardDetails) SetId(v string) {
	o.Id = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *CardDetails) GetCardType() string {
	if o == nil || o.CardType == nil {
		var ret string
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetCardTypeOk() (*string, bool) {
	if o == nil || o.CardType == nil {
		return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *CardDetails) HasCardType() bool {
	if o != nil && o.CardType != nil {
		return true
	}

	return false
}

// SetCardType gets a reference to the given string and assigns it to the CardType field.
func (o *CardDetails) SetCardType(v string) {
	o.CardType = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *CardDetails) GetScheme() string {
	if o == nil || o.Scheme == nil {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetSchemeOk() (*string, bool) {
	if o == nil || o.Scheme == nil {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *CardDetails) HasScheme() bool {
	if o != nil && o.Scheme != nil {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *CardDetails) SetScheme(v string) {
	o.Scheme = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CardDetails) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CardDetails) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CardDetails) SetCountry(v string) {
	o.Country = &v
}

// GetRequiredFields returns the RequiredFields field value if set, zero value otherwise.
func (o *CardDetails) GetRequiredFields() []string {
	if o == nil || o.RequiredFields == nil {
		var ret []string
		return ret
	}
	return *o.RequiredFields
}

// GetRequiredFieldsOk returns a tuple with the RequiredFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardDetails) GetRequiredFieldsOk() (*[]string, bool) {
	if o == nil || o.RequiredFields == nil {
		return nil, false
	}
	return o.RequiredFields, true
}

// HasRequiredFields returns a boolean if a field has been set.
func (o *CardDetails) HasRequiredFields() bool {
	if o != nil && o.RequiredFields != nil {
		return true
	}

	return false
}

// SetRequiredFields gets a reference to the given []string and assigns it to the RequiredFields field.
func (o *CardDetails) SetRequiredFields(v []string) {
	o.RequiredFields = &v
}

func (o CardDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.CardType != nil {
		toSerialize["card_type"] = o.CardType
	}
	if o.Scheme != nil {
		toSerialize["scheme"] = o.Scheme
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.RequiredFields != nil {
		toSerialize["required_fields"] = o.RequiredFields
	}
	return json.Marshal(toSerialize)
}

type NullableCardDetails struct {
	value *CardDetails
	isSet bool
}

func (v NullableCardDetails) Get() *CardDetails {
	return v.value
}

func (v *NullableCardDetails) Set(val *CardDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableCardDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableCardDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardDetails(val *CardDetails) *NullableCardDetails {
	return &NullableCardDetails{value: val, isSet: true}
}

func (v NullableCardDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


