/*
 * Gr4vy API
 *
 * Welcome to the Gr4vy API reference documentation. Our API is still very much a work in product and subject to change.
 *
 * API version: 1.1.0-beta
 * Contact: code@gr4vy.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package Openapi

import (
	"encoding/json"
)

// FlowPaymentOptionOutcome Outcome for checkout flow/select payment options action. Each option is a Gr4vy payment option object.
type FlowPaymentOptionOutcome struct {
	// The type of this resource. Is always `action`.
	Type *string `json:"type,omitempty"`
	// Payment option identifier.
	Id *string `json:"id,omitempty"`
	// Verbose payment option name.
	Label *string `json:"label,omitempty"`
	// The status of the payment option, true if at least one underlying connection is active, otherwise false.
	Active *bool `json:"active,omitempty"`
	// Optional group label for a given payment option, e.g. `Bank`.
	Group NullableString `json:"group,omitempty"`
	// Payment option icon URL.
	IconUrl *string `json:"icon_url,omitempty"`
}

// NewFlowPaymentOptionOutcome instantiates a new FlowPaymentOptionOutcome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowPaymentOptionOutcome() *FlowPaymentOptionOutcome {
	this := FlowPaymentOptionOutcome{}
	return &this
}

// NewFlowPaymentOptionOutcomeWithDefaults instantiates a new FlowPaymentOptionOutcome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowPaymentOptionOutcomeWithDefaults() *FlowPaymentOptionOutcome {
	this := FlowPaymentOptionOutcome{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FlowPaymentOptionOutcome) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPaymentOptionOutcome) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FlowPaymentOptionOutcome) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FlowPaymentOptionOutcome) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPaymentOptionOutcome) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FlowPaymentOptionOutcome) SetId(v string) {
	o.Id = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *FlowPaymentOptionOutcome) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPaymentOptionOutcome) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *FlowPaymentOptionOutcome) SetLabel(v string) {
	o.Label = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *FlowPaymentOptionOutcome) GetActive() bool {
	if o == nil || o.Active == nil {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPaymentOptionOutcome) GetActiveOk() (*bool, bool) {
	if o == nil || o.Active == nil {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasActive() bool {
	if o != nil && o.Active != nil {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *FlowPaymentOptionOutcome) SetActive(v bool) {
	o.Active = &v
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlowPaymentOptionOutcome) GetGroup() string {
	if o == nil || o.Group.Get() == nil {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlowPaymentOptionOutcome) GetGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *FlowPaymentOptionOutcome) SetGroup(v string) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *FlowPaymentOptionOutcome) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *FlowPaymentOptionOutcome) UnsetGroup() {
	o.Group.Unset()
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *FlowPaymentOptionOutcome) GetIconUrl() string {
	if o == nil || o.IconUrl == nil {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowPaymentOptionOutcome) GetIconUrlOk() (*string, bool) {
	if o == nil || o.IconUrl == nil {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *FlowPaymentOptionOutcome) HasIconUrl() bool {
	if o != nil && o.IconUrl != nil {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *FlowPaymentOptionOutcome) SetIconUrl(v string) {
	o.IconUrl = &v
}

func (o FlowPaymentOptionOutcome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Active != nil {
		toSerialize["active"] = o.Active
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.IconUrl != nil {
		toSerialize["icon_url"] = o.IconUrl
	}
	return json.Marshal(toSerialize)
}

type NullableFlowPaymentOptionOutcome struct {
	value *FlowPaymentOptionOutcome
	isSet bool
}

func (v NullableFlowPaymentOptionOutcome) Get() *FlowPaymentOptionOutcome {
	return v.value
}

func (v *NullableFlowPaymentOptionOutcome) Set(val *FlowPaymentOptionOutcome) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowPaymentOptionOutcome) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowPaymentOptionOutcome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowPaymentOptionOutcome(val *FlowPaymentOptionOutcome) *NullableFlowPaymentOptionOutcome {
	return &NullableFlowPaymentOptionOutcome{value: val, isSet: true}
}

func (v NullableFlowPaymentOptionOutcome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowPaymentOptionOutcome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


