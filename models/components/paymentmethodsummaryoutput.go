// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

// PaymentMethodSummaryOutput - Payment Method
//
// A summary of a payment method.
type PaymentMethodSummaryOutput struct {
	// Always `payment-method`.
	type_ *string `const:"payment-method" json:"type"`
	// The optional URL that the buyer needs to be redirected to to further authorize their payment.
	ApprovalURL *string `json:"approval_url,omitempty"`
	// The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
	Country *string `json:"country,omitempty"`
	// The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
	Currency *string `json:"currency,omitempty"`
	// Details for credit or debit card payment method.
	Details *PaymentMethodDetailsCard `json:"details,omitempty"`
	// The expiration date for the payment method.
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// The unique hash derived from the payment method identifier (e.g. card number).
	Fingerprint *string `json:"fingerprint,omitempty"`
	// A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
	Label *string `json:"label,omitempty"`
	// The date and time when this card was last replaced by the account updater.
	LastReplacedAt *time.Time `json:"last_replaced_at,omitempty"`
	Method         Method     `json:"method"`
	// The mode to use with this payment method.
	Mode *Mode `json:"mode,omitempty"`
	// The scheme of the card. Only applies to card payments.
	Scheme *CardScheme `json:"scheme,omitempty"`
	// The ID for the payment method.
	ID string `json:"id"`
	// The ID of the merchant account this buyer belongs to.
	MerchantAccountID string `json:"merchant_account_id"`
	// Additional schemes of the card besides the primary scheme. Only applies to card payment methods.
	AdditionalSchemes []CardScheme `json:"additional_schemes,omitempty"`
	// The timestamp when this payment method was last used in a transaction for client initiated transactions.
	CitLastUsedAt *time.Time `json:"cit_last_used_at,omitempty"`
	// The number of times this payment method has been used in transactions for client initiated transactions.
	CitUsageCount int64 `json:"cit_usage_count"`
	// Whether this card has a pending replacement that hasn't been applied yet.
	HasReplacement bool `json:"has_replacement"`
	// The timestamp when this payment method was last used in a transaction.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// The number of times this payment method has been used in transactions.
	UsageCount int64 `json:"usage_count"`
}

func (p PaymentMethodSummaryOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentMethodSummaryOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"method", "id", "merchant_account_id", "cit_usage_count", "has_replacement", "usage_count"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentMethodSummaryOutput) GetType() *string {
	return types.Pointer("payment-method")
}

func (p *PaymentMethodSummaryOutput) GetApprovalURL() *string {
	if p == nil {
		return nil
	}
	return p.ApprovalURL
}

func (p *PaymentMethodSummaryOutput) GetCountry() *string {
	if p == nil {
		return nil
	}
	return p.Country
}

func (p *PaymentMethodSummaryOutput) GetCurrency() *string {
	if p == nil {
		return nil
	}
	return p.Currency
}

func (p *PaymentMethodSummaryOutput) GetDetails() *PaymentMethodDetailsCard {
	if p == nil {
		return nil
	}
	return p.Details
}

func (p *PaymentMethodSummaryOutput) GetExpirationDate() *string {
	if p == nil {
		return nil
	}
	return p.ExpirationDate
}

func (p *PaymentMethodSummaryOutput) GetFingerprint() *string {
	if p == nil {
		return nil
	}
	return p.Fingerprint
}

func (p *PaymentMethodSummaryOutput) GetLabel() *string {
	if p == nil {
		return nil
	}
	return p.Label
}

func (p *PaymentMethodSummaryOutput) GetLastReplacedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastReplacedAt
}

func (p *PaymentMethodSummaryOutput) GetMethod() Method {
	if p == nil {
		return Method("")
	}
	return p.Method
}

func (p *PaymentMethodSummaryOutput) GetMode() *Mode {
	if p == nil {
		return nil
	}
	return p.Mode
}

func (p *PaymentMethodSummaryOutput) GetScheme() *CardScheme {
	if p == nil {
		return nil
	}
	return p.Scheme
}

func (p *PaymentMethodSummaryOutput) GetID() string {
	if p == nil {
		return ""
	}
	return p.ID
}

func (p *PaymentMethodSummaryOutput) GetMerchantAccountID() string {
	if p == nil {
		return ""
	}
	return p.MerchantAccountID
}

func (p *PaymentMethodSummaryOutput) GetAdditionalSchemes() []CardScheme {
	if p == nil {
		return nil
	}
	return p.AdditionalSchemes
}

func (p *PaymentMethodSummaryOutput) GetCitLastUsedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.CitLastUsedAt
}

func (p *PaymentMethodSummaryOutput) GetCitUsageCount() int64 {
	if p == nil {
		return 0
	}
	return p.CitUsageCount
}

func (p *PaymentMethodSummaryOutput) GetHasReplacement() bool {
	if p == nil {
		return false
	}
	return p.HasReplacement
}

func (p *PaymentMethodSummaryOutput) GetLastUsedAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.LastUsedAt
}

func (p *PaymentMethodSummaryOutput) GetUsageCount() int64 {
	if p == nil {
		return 0
	}
	return p.UsageCount
}
