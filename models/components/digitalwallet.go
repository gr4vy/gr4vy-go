// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type DigitalWallet struct {
	// Always `digital-wallet`.
	type_ *string `const:"digital-wallet" json:"type"`
	// The ID for the digital wallet.
	ID string `json:"id"`
	// The ID of the merchant account this digital wallet belongs to.
	MerchantAccountID string                `json:"merchant_account_id"`
	Provider          DigitalWalletProvider `json:"provider"`
	// The name of the merchant the digital wallet is registered to.
	MerchantName string `json:"merchant_name"`
	// The consumer facing name of the merchant.
	MerchantDisplayName *string `json:"merchant_display_name,omitempty"`
	// The main URL of the merchant.
	MerchantURL *string `json:"merchant_url,omitempty"`
	// The country code where the merchant is registered.
	MerchantCountryCode *string `json:"merchant_country_code,omitempty"`
	// The list of domain names that a digital wallet can be used on (deprecated).
	DomainNames []string `json:"domain_names"`
	// The number of active custom certificates registered for this digital wallet (Apple Pay only).
	ActiveCertificateCount *int64 `default:"0" json:"active_certificate_count"`
	// The number of pending custom certificates registered for this digital wallet (Apple Pay only).
	PendingCertificateCount *int64 `default:"0" json:"pending_certificate_count"`
	// The number of expired custom certificates registered for this digital wallet (Apple Pay only).
	ExpiredCertificateCount *int64 `default:"0" json:"expired_certificate_count"`
	// Custom attributes for some digital wallets. Currently only used by Click to Pay.
	Fields map[string]any `json:"fields,omitempty"`
	// The date this buyer was created at.
	CreatedAt time.Time `json:"created_at"`
	// The date this buyer was last updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

func (d DigitalWallet) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DigitalWallet) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DigitalWallet) GetType() *string {
	return types.String("digital-wallet")
}

func (o *DigitalWallet) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DigitalWallet) GetMerchantAccountID() string {
	if o == nil {
		return ""
	}
	return o.MerchantAccountID
}

func (o *DigitalWallet) GetProvider() DigitalWalletProvider {
	if o == nil {
		return DigitalWalletProvider("")
	}
	return o.Provider
}

func (o *DigitalWallet) GetMerchantName() string {
	if o == nil {
		return ""
	}
	return o.MerchantName
}

func (o *DigitalWallet) GetMerchantDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.MerchantDisplayName
}

func (o *DigitalWallet) GetMerchantURL() *string {
	if o == nil {
		return nil
	}
	return o.MerchantURL
}

func (o *DigitalWallet) GetMerchantCountryCode() *string {
	if o == nil {
		return nil
	}
	return o.MerchantCountryCode
}

func (o *DigitalWallet) GetDomainNames() []string {
	if o == nil {
		return []string{}
	}
	return o.DomainNames
}

func (o *DigitalWallet) GetActiveCertificateCount() *int64 {
	if o == nil {
		return nil
	}
	return o.ActiveCertificateCount
}

func (o *DigitalWallet) GetPendingCertificateCount() *int64 {
	if o == nil {
		return nil
	}
	return o.PendingCertificateCount
}

func (o *DigitalWallet) GetExpiredCertificateCount() *int64 {
	if o == nil {
		return nil
	}
	return o.ExpiredCertificateCount
}

func (o *DigitalWallet) GetFields() map[string]any {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *DigitalWallet) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *DigitalWallet) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
