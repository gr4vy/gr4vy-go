// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type RequiredFields1Type string

const (
	RequiredFields1TypeBoolean RequiredFields1Type = "boolean"
	RequiredFields1TypeAny     RequiredFields1Type = "any"
)

type RequiredFields1 struct {
	Boolean *bool `queryParam:"inline"`
	Any     any   `queryParam:"inline"`

	Type RequiredFields1Type
}

func CreateRequiredFields1Boolean(boolean bool) RequiredFields1 {
	typ := RequiredFields1TypeBoolean

	return RequiredFields1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateRequiredFields1Any(anyT any) RequiredFields1 {
	typ := RequiredFields1TypeAny

	return RequiredFields1{
		Any:  anyT,
		Type: typ,
	}
}

func (u *RequiredFields1) UnmarshalJSON(data []byte) error {

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = RequiredFields1TypeBoolean
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = RequiredFields1TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequiredFields1", string(data))
}

func (u RequiredFields1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RequiredFields1: all fields are null")
}

type RequiredFields2Type string

const (
	RequiredFields2TypeBoolean              RequiredFields2Type = "boolean"
	RequiredFields2TypeMapOfRequiredFields1 RequiredFields2Type = "mapOfRequiredFields1"
)

type RequiredFields2 struct {
	Boolean              *bool                      `queryParam:"inline"`
	MapOfRequiredFields1 map[string]RequiredFields1 `queryParam:"inline"`

	Type RequiredFields2Type
}

func CreateRequiredFields2Boolean(boolean bool) RequiredFields2 {
	typ := RequiredFields2TypeBoolean

	return RequiredFields2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateRequiredFields2MapOfRequiredFields1(mapOfRequiredFields1 map[string]RequiredFields1) RequiredFields2 {
	typ := RequiredFields2TypeMapOfRequiredFields1

	return RequiredFields2{
		MapOfRequiredFields1: mapOfRequiredFields1,
		Type:                 typ,
	}
}

func (u *RequiredFields2) UnmarshalJSON(data []byte) error {

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, nil); err == nil {
		u.Boolean = &boolean
		u.Type = RequiredFields2TypeBoolean
		return nil
	}

	var mapOfRequiredFields1 map[string]RequiredFields1 = map[string]RequiredFields1{}
	if err := utils.UnmarshalJSON(data, &mapOfRequiredFields1, "", true, nil); err == nil {
		u.MapOfRequiredFields1 = mapOfRequiredFields1
		u.Type = RequiredFields2TypeMapOfRequiredFields1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequiredFields2", string(data))
}

func (u RequiredFields2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.MapOfRequiredFields1 != nil {
		return utils.MarshalJSON(u.MapOfRequiredFields1, "", true)
	}

	return nil, errors.New("could not marshal union type RequiredFields2: all fields are null")
}

type PaymentOptionContext struct {
	ApprovalUI                     *PaymentOptionContextApprovalUI `json:"approval_ui,omitempty"`
	RequiredFields                 map[string]RequiredFields2      `json:"required_fields,omitempty"`
	RedirectRequiresPopup          bool                            `json:"redirect_requires_popup"`
	RequiresTokenizedRedirectPopup bool                            `json:"requires_tokenized_redirect_popup"`
}

func (p PaymentOptionContext) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentOptionContext) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"redirect_requires_popup", "requires_tokenized_redirect_popup"}); err != nil {
		return err
	}
	return nil
}

func (o *PaymentOptionContext) GetApprovalUI() *PaymentOptionContextApprovalUI {
	if o == nil {
		return nil
	}
	return o.ApprovalUI
}

func (o *PaymentOptionContext) GetRequiredFields() map[string]RequiredFields2 {
	if o == nil {
		return nil
	}
	return o.RequiredFields
}

func (o *PaymentOptionContext) GetRedirectRequiresPopup() bool {
	if o == nil {
		return false
	}
	return o.RedirectRequiresPopup
}

func (o *PaymentOptionContext) GetRequiresTokenizedRedirectPopup() bool {
	if o == nil {
		return false
	}
	return o.RequiresTokenizedRedirectPopup
}
