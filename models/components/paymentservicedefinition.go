// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
)

type PaymentServiceDefinition struct {
	// The definition ID of the payment service that can be configured. This is the underlying provider followed by a dash followed by the method.
	ID string `json:"id"`
	// Always `payment-service-definition`.
	type_ *string `const:"payment-service-definition" json:"type"`
	// A human friendly name for this service.
	DisplayName string `json:"display_name"`
	Method      Method `json:"method"`
	// A list of credentials and related fields which can be configured for this service.
	Fields []DefinitionField `json:"fields"`
	// A list of reporting fields which can be configured for this service.
	ReportingFields []DefinitionField `json:"reporting_fields"`
	// A list of three-letter ISO currency codes that this service supports.
	SupportedCurrencies []string `json:"supported_currencies"`
	// A list of two-letter ISO country codes that this service supports.
	SupportedCountries []string `json:"supported_countries"`
	Mode               Mode     `json:"mode"`
	// An icon to display for the payment service.
	IconURL *string `json:"icon_url,omitempty"`
	// Features supported by the payment service.
	SupportedFeatures map[string]bool `json:"supported_features"`
	// A list of condition that define when some fields must be provided with a transaction request.
	RequiredCheckoutFields []RequiredCheckoutFields    `json:"required_checkout_fields"`
	Configuration          PaymentServiceConfiguration `json:"configuration"`
}

func (p PaymentServiceDefinition) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentServiceDefinition) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"id", "display_name", "method", "fields", "reporting_fields", "supported_currencies", "supported_countries", "mode", "supported_features", "required_checkout_fields", "configuration"}); err != nil {
		return err
	}
	return nil
}

func (o *PaymentServiceDefinition) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PaymentServiceDefinition) GetType() *string {
	return types.String("payment-service-definition")
}

func (o *PaymentServiceDefinition) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *PaymentServiceDefinition) GetMethod() Method {
	if o == nil {
		return Method("")
	}
	return o.Method
}

func (o *PaymentServiceDefinition) GetFields() []DefinitionField {
	if o == nil {
		return []DefinitionField{}
	}
	return o.Fields
}

func (o *PaymentServiceDefinition) GetReportingFields() []DefinitionField {
	if o == nil {
		return []DefinitionField{}
	}
	return o.ReportingFields
}

func (o *PaymentServiceDefinition) GetSupportedCurrencies() []string {
	if o == nil {
		return []string{}
	}
	return o.SupportedCurrencies
}

func (o *PaymentServiceDefinition) GetSupportedCountries() []string {
	if o == nil {
		return []string{}
	}
	return o.SupportedCountries
}

func (o *PaymentServiceDefinition) GetMode() Mode {
	if o == nil {
		return Mode("")
	}
	return o.Mode
}

func (o *PaymentServiceDefinition) GetIconURL() *string {
	if o == nil {
		return nil
	}
	return o.IconURL
}

func (o *PaymentServiceDefinition) GetSupportedFeatures() map[string]bool {
	if o == nil {
		return map[string]bool{}
	}
	return o.SupportedFeatures
}

func (o *PaymentServiceDefinition) GetRequiredCheckoutFields() []RequiredCheckoutFields {
	if o == nil {
		return []RequiredCheckoutFields{}
	}
	return o.RequiredCheckoutFields
}

func (o *PaymentServiceDefinition) GetConfiguration() PaymentServiceConfiguration {
	if o == nil {
		return PaymentServiceConfiguration{}
	}
	return o.Configuration
}
