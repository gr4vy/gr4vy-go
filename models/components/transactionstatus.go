// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TransactionStatus string

const (
	TransactionStatusProcessing               TransactionStatus = "processing"
	TransactionStatusAuthorizationSucceeded   TransactionStatus = "authorization_succeeded"
	TransactionStatusAuthorizationDeclined    TransactionStatus = "authorization_declined"
	TransactionStatusAuthorizationFailed      TransactionStatus = "authorization_failed"
	TransactionStatusAuthorizationVoided      TransactionStatus = "authorization_voided"
	TransactionStatusAuthorizationVoidPending TransactionStatus = "authorization_void_pending"
	TransactionStatusCaptureSucceeded         TransactionStatus = "capture_succeeded"
	TransactionStatusCapturePending           TransactionStatus = "capture_pending"
	TransactionStatusBuyerApprovalPending     TransactionStatus = "buyer_approval_pending"
)

func (e TransactionStatus) ToPointer() *TransactionStatus {
	return &e
}
func (e *TransactionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "processing":
		fallthrough
	case "authorization_succeeded":
		fallthrough
	case "authorization_declined":
		fallthrough
	case "authorization_failed":
		fallthrough
	case "authorization_voided":
		fallthrough
	case "authorization_void_pending":
		fallthrough
	case "capture_succeeded":
		fallthrough
	case "capture_pending":
		fallthrough
	case "buyer_approval_pending":
		*e = TransactionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransactionStatus: %v", v)
	}
}
