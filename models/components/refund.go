// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type Refund struct {
	// Always `refund`.
	type_ *string `const:"refund" json:"type"`
	// The ID for the refund.
	ID string `json:"id"`
	// The ID of the transaction associated with this refund.
	TransactionID string `json:"transaction_id"`
	// The payment service's unique ID for the refund.
	PaymentServiceRefundID *string      `json:"payment_service_refund_id,omitempty"`
	Status                 RefundStatus `json:"status"`
	// The currency code for this refund.  Will always match that of the associated transaction.
	Currency string `json:"currency"`
	// The amount requested for this refund.
	Amount int64 `json:"amount"`
	// The reason for this refund. Could be a multiline string.
	Reason     *string          `json:"reason,omitempty"`
	TargetType RefundTargetType `json:"target_type"`
	// The optional ID of the instrument that was refunded. This may be `null` if the instrument was not stored.
	TargetID *string `json:"target_id,omitempty"`
	// The base62 encoded refund ID. This represents a shorter version of this refund's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's refund against our system.
	ReconciliationID string `json:"reconciliation_id"`
	// An external identifier that can be used to match the refund against your own records.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The base62 encoded transaction ID. This represents a shorter version of the related transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system.
	TransactionReconciliationID string `json:"transaction_reconciliation_id"`
	// An external identifier that can be used to match the transaction against your own records.
	TransactionExternalIdentifier *string `json:"transaction_external_identifier,omitempty"`
	// The date this refund was created at.
	CreatedAt time.Time `json:"created_at"`
	// The date this refund was last updated at.
	UpdatedAt time.Time `json:"updated_at"`
	// The user that created this resource
	Creator *Creator `json:"creator,omitempty"`
}

func (r Refund) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Refund) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Refund) GetType() *string {
	return types.String("refund")
}

func (o *Refund) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Refund) GetTransactionID() string {
	if o == nil {
		return ""
	}
	return o.TransactionID
}

func (o *Refund) GetPaymentServiceRefundID() *string {
	if o == nil {
		return nil
	}
	return o.PaymentServiceRefundID
}

func (o *Refund) GetStatus() RefundStatus {
	if o == nil {
		return RefundStatus("")
	}
	return o.Status
}

func (o *Refund) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *Refund) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *Refund) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *Refund) GetTargetType() RefundTargetType {
	if o == nil {
		return RefundTargetType("")
	}
	return o.TargetType
}

func (o *Refund) GetTargetID() *string {
	if o == nil {
		return nil
	}
	return o.TargetID
}

func (o *Refund) GetReconciliationID() string {
	if o == nil {
		return ""
	}
	return o.ReconciliationID
}

func (o *Refund) GetExternalIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ExternalIdentifier
}

func (o *Refund) GetTransactionReconciliationID() string {
	if o == nil {
		return ""
	}
	return o.TransactionReconciliationID
}

func (o *Refund) GetTransactionExternalIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.TransactionExternalIdentifier
}

func (o *Refund) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Refund) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *Refund) GetCreator() *Creator {
	if o == nil {
		return nil
	}
	return o.Creator
}
