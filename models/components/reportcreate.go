// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type SpecType string

const (
	SpecTypeAccountsReceivables SpecType = "accounts_receivables"
	SpecTypeDetailedSettlement  SpecType = "detailed_settlement"
	SpecTypeTransactionRetries  SpecType = "transaction_retries"
	SpecTypeTransactions        SpecType = "transactions"
)

// Spec - The report specification.
type Spec struct {
	TransactionsReportSpec        *TransactionsReportSpec        `queryParam:"inline,name=Spec"`
	TransactionRetriesReportSpec  *TransactionRetriesReportSpec  `queryParam:"inline,name=Spec"`
	DetailedSettlementReportSpec  *DetailedSettlementReportSpec  `queryParam:"inline,name=Spec"`
	AccountsReceivablesReportSpec *AccountsReceivablesReportSpec `queryParam:"inline,name=Spec"`

	Type SpecType
}

func CreateSpecAccountsReceivables(accountsReceivables AccountsReceivablesReportSpec) Spec {
	typ := SpecTypeAccountsReceivables

	return Spec{
		AccountsReceivablesReportSpec: &accountsReceivables,
		Type:                          typ,
	}
}

func CreateSpecDetailedSettlement(detailedSettlement DetailedSettlementReportSpec) Spec {
	typ := SpecTypeDetailedSettlement

	return Spec{
		DetailedSettlementReportSpec: &detailedSettlement,
		Type:                         typ,
	}
}

func CreateSpecTransactionRetries(transactionRetries TransactionRetriesReportSpec) Spec {
	typ := SpecTypeTransactionRetries

	return Spec{
		TransactionRetriesReportSpec: &transactionRetries,
		Type:                         typ,
	}
}

func CreateSpecTransactions(transactions TransactionsReportSpec) Spec {
	typ := SpecTypeTransactions

	return Spec{
		TransactionsReportSpec: &transactions,
		Type:                   typ,
	}
}

func (u *Spec) UnmarshalJSON(data []byte) error {

	type discriminator struct {
		Model string `json:"model"`
	}

	dis := new(discriminator)
	if err := json.Unmarshal(data, &dis); err != nil {
		return fmt.Errorf("could not unmarshal discriminator: %w", err)
	}

	switch dis.Model {
	case "accounts_receivables":
		accountsReceivablesReportSpec := new(AccountsReceivablesReportSpec)
		if err := utils.UnmarshalJSON(data, &accountsReceivablesReportSpec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Model == accounts_receivables) type AccountsReceivablesReportSpec within Spec: %w", string(data), err)
		}

		u.AccountsReceivablesReportSpec = accountsReceivablesReportSpec
		u.Type = SpecTypeAccountsReceivables
		return nil
	case "detailed_settlement":
		detailedSettlementReportSpec := new(DetailedSettlementReportSpec)
		if err := utils.UnmarshalJSON(data, &detailedSettlementReportSpec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Model == detailed_settlement) type DetailedSettlementReportSpec within Spec: %w", string(data), err)
		}

		u.DetailedSettlementReportSpec = detailedSettlementReportSpec
		u.Type = SpecTypeDetailedSettlement
		return nil
	case "transaction_retries":
		transactionRetriesReportSpec := new(TransactionRetriesReportSpec)
		if err := utils.UnmarshalJSON(data, &transactionRetriesReportSpec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Model == transaction_retries) type TransactionRetriesReportSpec within Spec: %w", string(data), err)
		}

		u.TransactionRetriesReportSpec = transactionRetriesReportSpec
		u.Type = SpecTypeTransactionRetries
		return nil
	case "transactions":
		transactionsReportSpec := new(TransactionsReportSpec)
		if err := utils.UnmarshalJSON(data, &transactionsReportSpec, "", true, nil); err != nil {
			return fmt.Errorf("could not unmarshal `%s` into expected (Model == transactions) type TransactionsReportSpec within Spec: %w", string(data), err)
		}

		u.TransactionsReportSpec = transactionsReportSpec
		u.Type = SpecTypeTransactions
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Spec", string(data))
}

func (u Spec) MarshalJSON() ([]byte, error) {
	if u.TransactionsReportSpec != nil {
		return utils.MarshalJSON(u.TransactionsReportSpec, "", true)
	}

	if u.TransactionRetriesReportSpec != nil {
		return utils.MarshalJSON(u.TransactionRetriesReportSpec, "", true)
	}

	if u.DetailedSettlementReportSpec != nil {
		return utils.MarshalJSON(u.DetailedSettlementReportSpec, "", true)
	}

	if u.AccountsReceivablesReportSpec != nil {
		return utils.MarshalJSON(u.AccountsReceivablesReportSpec, "", true)
	}

	return nil, errors.New("could not marshal union type Spec: all fields are null")
}

type ReportCreate struct {
	// The name of the report.
	Name string `json:"name"`
	// A description of the report.
	Description *string        `json:"description,omitempty"`
	Schedule    ReportSchedule `json:"schedule"`
	// Whether the report schedule is enabled.
	ScheduleEnabled bool `json:"schedule_enabled"`
	// The timezone for the report schedule.
	ScheduleTimezone *string `default:"Etc/UTC" json:"schedule_timezone"`
	// The report specification.
	Spec Spec `json:"spec"`
}

func (r ReportCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReportCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"name", "schedule", "schedule_enabled", "spec"}); err != nil {
		return err
	}
	return nil
}

func (r *ReportCreate) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *ReportCreate) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *ReportCreate) GetSchedule() ReportSchedule {
	if r == nil {
		return ReportSchedule("")
	}
	return r.Schedule
}

func (r *ReportCreate) GetScheduleEnabled() bool {
	if r == nil {
		return false
	}
	return r.ScheduleEnabled
}

func (r *ReportCreate) GetScheduleTimezone() *string {
	if r == nil {
		return nil
	}
	return r.ScheduleTimezone
}

func (r *ReportCreate) GetSpec() Spec {
	if r == nil {
		return Spec{}
	}
	return r.Spec
}

func (r *ReportCreate) GetSpecAccountsReceivables() *AccountsReceivablesReportSpec {
	return r.GetSpec().AccountsReceivablesReportSpec
}

func (r *ReportCreate) GetSpecDetailedSettlement() *DetailedSettlementReportSpec {
	return r.GetSpec().DetailedSettlementReportSpec
}

func (r *ReportCreate) GetSpecTransactionRetries() *TransactionRetriesReportSpec {
	return r.GetSpec().TransactionRetriesReportSpec
}

func (r *ReportCreate) GetSpecTransactions() *TransactionsReportSpec {
	return r.GetSpec().TransactionsReportSpec
}
