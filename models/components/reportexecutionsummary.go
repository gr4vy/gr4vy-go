// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type ReportExecutionSummary struct {
	// Always `report-execution`.
	type_ *string `const:"report-execution" json:"type"`
	// The unique ID for the report execution.
	ID string `json:"id"`
	// The date this report execution was created at.
	CreatedAt time.Time `json:"created_at"`
	// The date this report execution was last updated.
	UpdatedAt time.Time              `json:"updated_at"`
	Status    ReportExecutionStatus  `json:"status"`
	Context   ReportExecutionContext `json:"context"`
}

func (r ReportExecutionSummary) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ReportExecutionSummary) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ReportExecutionSummary) GetType() *string {
	return types.String("report-execution")
}

func (o *ReportExecutionSummary) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ReportExecutionSummary) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ReportExecutionSummary) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}

func (o *ReportExecutionSummary) GetStatus() ReportExecutionStatus {
	if o == nil {
		return ReportExecutionStatus("")
	}
	return o.Status
}

func (o *ReportExecutionSummary) GetContext() ReportExecutionContext {
	if o == nil {
		return ReportExecutionContext{}
	}
	return o.Context
}
