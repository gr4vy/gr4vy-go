// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"time"
)

type Locale string

const (
	LocaleEn   Locale = "en"
	LocaleEnGb Locale = "en-GB"
	LocalePt   Locale = "pt"
	LocalePtBr Locale = "pt-BR"
	LocaleEs   Locale = "es"
)

func (e Locale) ToPointer() *Locale {
	return &e
}

type PaymentLinkCreate struct {
	// The guest buyer for the payment link.
	Buyer *GuestBuyerInput `json:"buyer,omitempty"`
	// The expiration date and time for the payment link.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Connection options for the payment link.
	ConnectionOptions *TransactionConnectionOptions `json:"connection_options,omitempty"`
	// The merchant reference for the payment link.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The statement descriptor for the payment link.
	StatementDescriptor *StatementDescriptor `json:"statement_descriptor,omitempty"`
	// The locale for the payment link.
	Locale *Locale `json:"locale,omitempty"`
	// The merchant's display name.
	MerchantName *string `json:"merchant_name,omitempty"`
	// The merchant's website URL.
	MerchantURL *string `json:"merchant_url,omitempty"`
	// The merchant's banner image URL.
	MerchantBannerURL *string `json:"merchant_banner_url,omitempty"`
	// The merchant's brand color.
	MerchantColor *string `json:"merchant_color,omitempty"`
	// A message from the merchant.
	MerchantMessage *string `json:"merchant_message,omitempty"`
	// URL to the merchant's terms and conditions.
	MerchantTermsAndConditionsURL *string `json:"merchant_terms_and_conditions_url,omitempty"`
	// URL to the merchant's favicon.
	MerchantFaviconURL *string `json:"merchant_favicon_url,omitempty"`
	// The amount for the payment link.
	Amount int64 `json:"amount"`
	// The country code for the payment link.
	Country string `json:"country"`
	// The currency code for the payment link.
	Currency string             `json:"currency"`
	Intent   *TransactionIntent `json:"intent,omitempty"`
	// The return URL after payment completion.
	ReturnURL *string `json:"return_url,omitempty"`
	// The cart items for the payment link.
	CartItems []CartItem `json:"cart_items,omitempty"`
	// Arbitrary metadata for the payment link.
	Metadata map[string]any `json:"metadata,omitempty"`
	// The way payment method information made it to this transaction.
	PaymentSource *TransactionPaymentSource `json:"payment_source,omitempty"`
}

func (p PaymentLinkCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentLinkCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"amount", "country", "currency"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentLinkCreate) GetBuyer() *GuestBuyerInput {
	if p == nil {
		return nil
	}
	return p.Buyer
}

func (p *PaymentLinkCreate) GetExpiresAt() *time.Time {
	if p == nil {
		return nil
	}
	return p.ExpiresAt
}

func (p *PaymentLinkCreate) GetConnectionOptions() *TransactionConnectionOptions {
	if p == nil {
		return nil
	}
	return p.ConnectionOptions
}

func (p *PaymentLinkCreate) GetExternalIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.ExternalIdentifier
}

func (p *PaymentLinkCreate) GetStatementDescriptor() *StatementDescriptor {
	if p == nil {
		return nil
	}
	return p.StatementDescriptor
}

func (p *PaymentLinkCreate) GetLocale() *Locale {
	if p == nil {
		return nil
	}
	return p.Locale
}

func (p *PaymentLinkCreate) GetMerchantName() *string {
	if p == nil {
		return nil
	}
	return p.MerchantName
}

func (p *PaymentLinkCreate) GetMerchantURL() *string {
	if p == nil {
		return nil
	}
	return p.MerchantURL
}

func (p *PaymentLinkCreate) GetMerchantBannerURL() *string {
	if p == nil {
		return nil
	}
	return p.MerchantBannerURL
}

func (p *PaymentLinkCreate) GetMerchantColor() *string {
	if p == nil {
		return nil
	}
	return p.MerchantColor
}

func (p *PaymentLinkCreate) GetMerchantMessage() *string {
	if p == nil {
		return nil
	}
	return p.MerchantMessage
}

func (p *PaymentLinkCreate) GetMerchantTermsAndConditionsURL() *string {
	if p == nil {
		return nil
	}
	return p.MerchantTermsAndConditionsURL
}

func (p *PaymentLinkCreate) GetMerchantFaviconURL() *string {
	if p == nil {
		return nil
	}
	return p.MerchantFaviconURL
}

func (p *PaymentLinkCreate) GetAmount() int64 {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PaymentLinkCreate) GetCountry() string {
	if p == nil {
		return ""
	}
	return p.Country
}

func (p *PaymentLinkCreate) GetCurrency() string {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PaymentLinkCreate) GetIntent() *TransactionIntent {
	if p == nil {
		return nil
	}
	return p.Intent
}

func (p *PaymentLinkCreate) GetReturnURL() *string {
	if p == nil {
		return nil
	}
	return p.ReturnURL
}

func (p *PaymentLinkCreate) GetCartItems() []CartItem {
	if p == nil {
		return nil
	}
	return p.CartItems
}

func (p *PaymentLinkCreate) GetMetadata() map[string]any {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *PaymentLinkCreate) GetPaymentSource() *TransactionPaymentSource {
	if p == nil {
		return nil
	}
	return p.PaymentSource
}
