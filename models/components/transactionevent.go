// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

// Name - The specific event name.
type Name string

const (
	NameTransactionUpdatedStatus                                  Name = "transaction-updated-status"
	NameTransactionSyncEvent                                      Name = "transaction-sync-event"
	NameTransactionSyncFailedEvent                                Name = "transaction-sync-failed-event"
	NameTransactionModifiedEvent                                  Name = "transaction-modified-event"
	NameTransactionAPIRequest                                     Name = "transaction-api-request"
	NameTransactionAPIResponse                                    Name = "transaction-api-response"
	NameBinLookupRequest                                          Name = "bin-lookup-request"
	NameThreeDSecureSuccess                                       Name = "three-d-secure-success"
	NameThreeDSecureRequestError                                  Name = "three-d-secure-request-error"
	NameThreeDSecurePreparationRequest                            Name = "three-d-secure-preparation-request"
	NameThreeDSecureAuthenticationRequest                         Name = "three-d-secure-authentication-request"
	NameThreeDSecureResultRequest                                 Name = "three-d-secure-result-request"
	NameAntiFraudDecision                                         Name = "anti-fraud-decision"
	NameAntiFraudDecisionError                                    Name = "anti-fraud-decision-error"
	NameAntiFraudDecisionSkipped                                  Name = "anti-fraud-decision-skipped"
	NameAntiFraudWebhook                                          Name = "anti-fraud-webhook"
	NameAntiFraudTransactionStatusUpdate                          Name = "anti-fraud-transaction-status-update"
	NameAntiFraudTransactionStatusUpdateError                     Name = "anti-fraud-transaction-status-update-error"
	NameAntiFraudDecisionUpdate                                   Name = "anti-fraud-decision-update"
	NameAntiFraudDecisionUpdateError                              Name = "anti-fraud-decision-update-error"
	NameGiftCardRedemptionSucceeded                               Name = "gift-card-redemption-succeeded"
	NameGiftCardRedemptionFailed                                  Name = "gift-card-redemption-failed"
	NameGiftCardRefundSucceeded                                   Name = "gift-card-refund-succeeded"
	NameGiftCardRefundFailed                                      Name = "gift-card-refund-failed"
	NameGiftCardReversalSucceeded                                 Name = "gift-card-reversal-succeeded"
	NamePaymentConnectorResponseTransactionAuthorizationSucceeded Name = "payment-connector-response-transaction-authorization-succeeded"
	NamePaymentConnectorResponseTransactionCaptureSucceeded       Name = "payment-connector-response-transaction-capture-succeeded"
	NamePaymentConnectorResponseTransactionAuthorizationFailed    Name = "payment-connector-response-transaction-authorization-failed"
	NamePaymentConnectorResponseTransactionDeclined               Name = "payment-connector-response-transaction-declined"
	NamePaymentConnectorResponseTransactionCaptureFailed          Name = "payment-connector-response-transaction-capture-failed"
	NamePaymentConnectorResponseTransactionCaptureDeclined        Name = "payment-connector-response-transaction-capture-declined"
	NamePaymentConnectorResponseTransactionVoidSucceeded          Name = "payment-connector-response-transaction-void-succeeded"
	NamePaymentConnectorResponseTransactionVoidDeclined           Name = "payment-connector-response-transaction-void-declined"
	NamePaymentConnectorResponseTransactionVoidFailed             Name = "payment-connector-response-transaction-void-failed"
	NamePaymentConnectorExternalTransactionRequest                Name = "payment-connector-external-transaction-request"
	NamePaymentConnectorReportTransactionSettled                  Name = "payment-connector-report-transaction-settled"
	NamePaymentConnectorReportChargebackPosted                    Name = "payment-connector-report-chargeback-posted"
	NamePaymentConnectorReportChargebackReversalPosted            Name = "payment-connector-report-chargeback-reversal-posted"
	NameDigitalWalletApplePayTokenDecrypted                       Name = "digital-wallet-apple-pay-token-decrypted"
	NameDigitalWalletGooglePayTokenDecrypted                      Name = "digital-wallet-google-pay-token-decrypted"
	NameDigitalWalletClickToPayTokenDecrypted                     Name = "digital-wallet-click-to-pay-token-decrypted"
	NameNetworkTokenProvisionSucceeded                            Name = "network-token-provision-succeeded"
	NameNetworkTokenProvisionFailed                               Name = "network-token-provision-failed"
	NameNetworkTokenCryptogramProvisionSucceeded                  Name = "network-token-cryptogram-provision-succeeded"
	NameNetworkTokenCryptogramProvisionFailed                     Name = "network-token-cryptogram-provision-failed"
	NameTheGivingBlockTransactionConversionSucceeded              Name = "the-giving-block-transaction-conversion-succeeded"
	NameRealTimeAccountUpdate                                     Name = "real-time-account-update"
)

func (e Name) ToPointer() *Name {
	return &e
}

type TransactionEvent struct {
	// Always `transaction-event`.
	type_ *string `const:"transaction-event" json:"type"`
	// The ID for the event.
	ID string `json:"id"`
	// The specific event name.
	Name Name `json:"name"`
	// The date this event was created at.
	CreatedAt time.Time      `json:"created_at"`
	Context   map[string]any `json:"context"`
}

func (t TransactionEvent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionEvent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionEvent) GetType() *string {
	return types.String("transaction-event")
}

func (o *TransactionEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionEvent) GetName() Name {
	if o == nil {
		return Name("")
	}
	return o.Name
}

func (o *TransactionEvent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TransactionEvent) GetContext() map[string]any {
	if o == nil {
		return map[string]any{}
	}
	return o.Context
}
