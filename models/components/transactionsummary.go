// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

// TransactionSummary - A transaction, summarised
type TransactionSummary struct {
	// Always `transaction`.
	type_ *string `const:"transaction" json:"type"`
	// The ID for the transaction.
	ID string `json:"id"`
	// The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
	ReconciliationID string `json:"reconciliation_id"`
	// The ID of the merchant account this transaction belongs to.
	MerchantAccountID string `json:"merchant_account_id"`
	// The currency code for this transaction.
	Currency string `json:"currency"`
	// The total amount for this transaction across all funding sources including gift cards.
	Amount int64             `json:"amount"`
	Status TransactionStatus `json:"status"`
	// The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
	AuthorizedAmount int64 `json:"authorized_amount"`
	// The captured amount for this transaction. This can be the full value of the `authorized_amount` or less.
	CapturedAmount int64 `json:"captured_amount"`
	// The refunded amount for this transaction. This can be the full value of the `captured_amount` or less.
	RefundedAmount int64 `json:"refunded_amount"`
	// The currency of this transaction's settlement in ISO 4217 three-letter code format.
	SettledCurrency *string `json:"settled_currency,omitempty"`
	// The net amount settled for this transaction.
	SettledAmount int64 `json:"settled_amount"`
	// Indicates whether this transaction has been settled.
	Settled bool `json:"settled"`
	// The 2-letter ISO code of the country of the transaction. This is used to filter the payment services that is used to process the transaction.
	Country *string `json:"country,omitempty"`
	// An external identifier that can be used to match the transaction against your own records.
	ExternalIdentifier *string           `json:"external_identifier,omitempty"`
	Intent             TransactionIntent `json:"intent"`
	// The payment method used for this transaction.
	PaymentMethod *TransactionPaymentMethod `json:"payment_method,omitempty"`
	// The method used for the transaction.
	Method *Method `json:"method,omitempty"`
	// The name of the instrument used to process the transaction.
	InstrumentType *InstrumentType `json:"instrument_type,omitempty"`
	// The standardized error code set by Gr4vy.
	ErrorCode *string `json:"error_code,omitempty"`
	// The payment service used for this transaction.
	PaymentService *TransactionPaymentService `json:"payment_service,omitempty"`
	// Whether a manual anti fraud review is pending with an anti fraud service.
	PendingReview *bool `default:"false" json:"pending_review"`
	// The buyer used for this transaction.
	Buyer *TransactionBuyer `json:"buyer,omitempty"`
	// This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
	RawResponseCode *string `json:"raw_response_code,omitempty"`
	//  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
	RawResponseDescription *string `json:"raw_response_description,omitempty"`
	// The shipping details associated with the transaction.
	ShippingDetails *ShippingDetails `json:"shipping_details,omitempty"`
	// The identifier for the checkout session this transaction is associated with.
	CheckoutSessionID *string `json:"checkout_session_id,omitempty"`
	// The gift cards redeemed for this transaction.
	GiftCardRedemptions []GiftCardRedemption `json:"gift_card_redemptions"`
	// The gift card service used for this transaction.
	GiftCardService *GiftCardService `json:"gift_card_service,omitempty"`
	// The date this buyer was created at.
	CreatedAt time.Time `json:"created_at"`
	// The date this buyer was last updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

func (t TransactionSummary) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionSummary) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TransactionSummary) GetType() *string {
	return types.String("transaction")
}

func (o *TransactionSummary) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *TransactionSummary) GetReconciliationID() string {
	if o == nil {
		return ""
	}
	return o.ReconciliationID
}

func (o *TransactionSummary) GetMerchantAccountID() string {
	if o == nil {
		return ""
	}
	return o.MerchantAccountID
}

func (o *TransactionSummary) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransactionSummary) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *TransactionSummary) GetStatus() TransactionStatus {
	if o == nil {
		return TransactionStatus("")
	}
	return o.Status
}

func (o *TransactionSummary) GetAuthorizedAmount() int64 {
	if o == nil {
		return 0
	}
	return o.AuthorizedAmount
}

func (o *TransactionSummary) GetCapturedAmount() int64 {
	if o == nil {
		return 0
	}
	return o.CapturedAmount
}

func (o *TransactionSummary) GetRefundedAmount() int64 {
	if o == nil {
		return 0
	}
	return o.RefundedAmount
}

func (o *TransactionSummary) GetSettledCurrency() *string {
	if o == nil {
		return nil
	}
	return o.SettledCurrency
}

func (o *TransactionSummary) GetSettledAmount() int64 {
	if o == nil {
		return 0
	}
	return o.SettledAmount
}

func (o *TransactionSummary) GetSettled() bool {
	if o == nil {
		return false
	}
	return o.Settled
}

func (o *TransactionSummary) GetCountry() *string {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *TransactionSummary) GetExternalIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.ExternalIdentifier
}

func (o *TransactionSummary) GetIntent() TransactionIntent {
	if o == nil {
		return TransactionIntent("")
	}
	return o.Intent
}

func (o *TransactionSummary) GetPaymentMethod() *TransactionPaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *TransactionSummary) GetMethod() *Method {
	if o == nil {
		return nil
	}
	return o.Method
}

func (o *TransactionSummary) GetInstrumentType() *InstrumentType {
	if o == nil {
		return nil
	}
	return o.InstrumentType
}

func (o *TransactionSummary) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *TransactionSummary) GetPaymentService() *TransactionPaymentService {
	if o == nil {
		return nil
	}
	return o.PaymentService
}

func (o *TransactionSummary) GetPendingReview() *bool {
	if o == nil {
		return nil
	}
	return o.PendingReview
}

func (o *TransactionSummary) GetBuyer() *TransactionBuyer {
	if o == nil {
		return nil
	}
	return o.Buyer
}

func (o *TransactionSummary) GetRawResponseCode() *string {
	if o == nil {
		return nil
	}
	return o.RawResponseCode
}

func (o *TransactionSummary) GetRawResponseDescription() *string {
	if o == nil {
		return nil
	}
	return o.RawResponseDescription
}

func (o *TransactionSummary) GetShippingDetails() *ShippingDetails {
	if o == nil {
		return nil
	}
	return o.ShippingDetails
}

func (o *TransactionSummary) GetCheckoutSessionID() *string {
	if o == nil {
		return nil
	}
	return o.CheckoutSessionID
}

func (o *TransactionSummary) GetGiftCardRedemptions() []GiftCardRedemption {
	if o == nil {
		return []GiftCardRedemption{}
	}
	return o.GiftCardRedemptions
}

func (o *TransactionSummary) GetGiftCardService() *GiftCardService {
	if o == nil {
		return nil
	}
	return o.GiftCardService
}

func (o *TransactionSummary) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *TransactionSummary) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
