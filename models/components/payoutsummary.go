// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

// PayoutSummary
//
// Represents a summary of a payout.
type PayoutSummary struct {
	// Always `payout`.
	type_ *string `const:"payout" json:"type"`
	// The ID for the payout.
	ID *string `json:"id,omitempty"`
	// The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
	Amount int64 `json:"amount"`
	// The buyer used for this payout.
	Buyer *TransactionBuyer `json:"buyer,omitempty"`
	// The type of payout to process.
	Category *PayoutCategory `json:"category,omitempty"`
	// The date this payout was created at.
	CreatedAt time.Time `json:"created_at"`
	// A supported ISO-4217 currency code.
	Currency string `json:"currency"`
	// The merchant identifier for this payout.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The merchant details associated to this payout.
	Merchant *PayoutMerchantSummary `json:"merchant,omitempty"`
	// The ID of the merchant account this payout was created for.
	MerchantAccountID *string                  `json:"merchant_account_id,omitempty"`
	PaymentMethod     TransactionPaymentMethod `json:"payment_method"`
	PaymentService    PayoutPaymentService     `json:"payment_service"`
	// The ID of the payout in the underlying payment service.
	PaymentServicePayoutID *string      `json:"payment_service_payout_id,omitempty"`
	Status                 PayoutStatus `json:"status"`
	// The date this payout was last updated at.
	UpdatedAt time.Time `json:"updated_at"`
}

func (p PayoutSummary) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PayoutSummary) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"amount", "created_at", "currency", "payment_method", "payment_service", "status", "updated_at"}); err != nil {
		return err
	}
	return nil
}

func (p *PayoutSummary) GetType() *string {
	return types.Pointer("payout")
}

func (p *PayoutSummary) GetID() *string {
	if p == nil {
		return nil
	}
	return p.ID
}

func (p *PayoutSummary) GetAmount() int64 {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PayoutSummary) GetBuyer() *TransactionBuyer {
	if p == nil {
		return nil
	}
	return p.Buyer
}

func (p *PayoutSummary) GetCategory() *PayoutCategory {
	if p == nil {
		return nil
	}
	return p.Category
}

func (p *PayoutSummary) GetCreatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.CreatedAt
}

func (p *PayoutSummary) GetCurrency() string {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PayoutSummary) GetExternalIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.ExternalIdentifier
}

func (p *PayoutSummary) GetMerchant() *PayoutMerchantSummary {
	if p == nil {
		return nil
	}
	return p.Merchant
}

func (p *PayoutSummary) GetMerchantAccountID() *string {
	if p == nil {
		return nil
	}
	return p.MerchantAccountID
}

func (p *PayoutSummary) GetPaymentMethod() TransactionPaymentMethod {
	if p == nil {
		return TransactionPaymentMethod{}
	}
	return p.PaymentMethod
}

func (p *PayoutSummary) GetPaymentService() PayoutPaymentService {
	if p == nil {
		return PayoutPaymentService{}
	}
	return p.PaymentService
}

func (p *PayoutSummary) GetPaymentServicePayoutID() *string {
	if p == nil {
		return nil
	}
	return p.PaymentServicePayoutID
}

func (p *PayoutSummary) GetStatus() PayoutStatus {
	if p == nil {
		return PayoutStatus("")
	}
	return p.Status
}

func (p *PayoutSummary) GetUpdatedAt() time.Time {
	if p == nil {
		return time.Time{}
	}
	return p.UpdatedAt
}
