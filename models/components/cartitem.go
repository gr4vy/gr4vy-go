// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type CartItem struct {
	// The name of the cart item. The value you set for this property may be truncated if the maximum length accepted by a payment service provider is less than 255 characters.
	Name string `json:"name"`
	// The quantity of this item in the cart. This value cannot be negative or zero.
	Quantity int64 `json:"quantity"`
	// The amount for an individual item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`. The amount sent through to the payment processor as unitary amount will be calculated to include the discount and tax values sent as part of this cart item.
	UnitAmount int64 `json:"unit_amount"`
	// The amount discounted for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
	DiscountAmount *int64 `json:"discount_amount,omitempty"`
	// The tax amount for this item represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` USD cents represents `$12.99`.
	TaxAmount *int64 `json:"tax_amount,omitempty"`
	// An external identifier for the cart item. This can be set to any value and is not sent to the payment service.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The SKU or product code for the item.
	Sku *string `json:"sku,omitempty"`
	// The product URL for the item.
	ProductURL *string `json:"product_url,omitempty"`
	// The URL for the image of the item.
	ImageURL *string `json:"image_url,omitempty"`
	// A list of strings containing product categories for the item.
	Categories []string `json:"categories,omitempty"`
	// The product type of the cart item.
	ProductType *ProductType `json:"product_type,omitempty"`
	// The seller country of the cart item.
	SellerCountry *string `json:"seller_country,omitempty"`
	// Whether the item is exempt of tax.
	TaxExempt *bool `json:"tax_exempt,omitempty"`
	// The unit of measure or the unit of measure code.
	UnitOfMeasure *string `json:"unit_of_measure,omitempty"`
	// Item commodity code. Generally a UNSPSC code.
	CommodityCode *string `json:"commodity_code,omitempty"`
	// Brief item description.
	Description *string `json:"description,omitempty"`
	// Item import or export duties represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
	DutyAmount *int64 `json:"duty_amount,omitempty"`
	// Freight/shipping amount represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
	ShippingAmount *int64 `json:"shipping_amount,omitempty"`
}

func (c CartItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CartItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"name", "quantity", "unit_amount"}); err != nil {
		return err
	}
	return nil
}

func (c *CartItem) GetName() string {
	if c == nil {
		return ""
	}
	return c.Name
}

func (c *CartItem) GetQuantity() int64 {
	if c == nil {
		return 0
	}
	return c.Quantity
}

func (c *CartItem) GetUnitAmount() int64 {
	if c == nil {
		return 0
	}
	return c.UnitAmount
}

func (c *CartItem) GetDiscountAmount() *int64 {
	if c == nil {
		return nil
	}
	return c.DiscountAmount
}

func (c *CartItem) GetTaxAmount() *int64 {
	if c == nil {
		return nil
	}
	return c.TaxAmount
}

func (c *CartItem) GetExternalIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ExternalIdentifier
}

func (c *CartItem) GetSku() *string {
	if c == nil {
		return nil
	}
	return c.Sku
}

func (c *CartItem) GetProductURL() *string {
	if c == nil {
		return nil
	}
	return c.ProductURL
}

func (c *CartItem) GetImageURL() *string {
	if c == nil {
		return nil
	}
	return c.ImageURL
}

func (c *CartItem) GetCategories() []string {
	if c == nil {
		return nil
	}
	return c.Categories
}

func (c *CartItem) GetProductType() *ProductType {
	if c == nil {
		return nil
	}
	return c.ProductType
}

func (c *CartItem) GetSellerCountry() *string {
	if c == nil {
		return nil
	}
	return c.SellerCountry
}

func (c *CartItem) GetTaxExempt() *bool {
	if c == nil {
		return nil
	}
	return c.TaxExempt
}

func (c *CartItem) GetUnitOfMeasure() *string {
	if c == nil {
		return nil
	}
	return c.UnitOfMeasure
}

func (c *CartItem) GetCommodityCode() *string {
	if c == nil {
		return nil
	}
	return c.CommodityCode
}

func (c *CartItem) GetDescription() *string {
	if c == nil {
		return nil
	}
	return c.Description
}

func (c *CartItem) GetDutyAmount() *int64 {
	if c == nil {
		return nil
	}
	return c.DutyAmount
}

func (c *CartItem) GetShippingAmount() *int64 {
	if c == nil {
		return nil
	}
	return c.ShippingAmount
}
