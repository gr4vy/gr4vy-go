// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type PaymentService struct {
	// Always `payment-service`
	type_ *string `const:"payment-service" json:"type"`
	ID    *string `default:"The ID of the payment service" json:"id"`
	// The ID of the merchant account this job belongs to.
	MerchantAccountID string `json:"merchant_account_id"`
	// The definition ID of the service that has been configured.
	PaymentServiceDefinitionID string `json:"payment_service_definition_id"`
	// Defines if this payment service is currently active.
	Active *bool  `default:"true" json:"active"`
	Method Method `json:"method"`
	// The display name for the payment service.
	DisplayName string `json:"display_name"`
	// Deprecated field used to define the order in which to process payment services
	Position int64                 `json:"position"`
	Status   *PaymentServiceStatus `json:"status,omitempty"`
	// A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
	AcceptedCurrencies []string `json:"accepted_currencies"`
	// A list of countries for which this service is enabled, in ISO two-letter code format.
	AcceptedCountries []string `json:"accepted_countries"`
	// Defines if this payment service support payment method tokenization.
	PaymentMethodTokenizationEnabled bool `json:"payment_method_tokenization_enabled"`
	// Defines if this payment service supports network tokens.
	NetworkTokensEnabled bool `json:"network_tokens_enabled"`
	// Defines if this payment service is open loop.
	OpenLoop bool `json:"open_loop"`
	// Defines if this payment service has settlement reporting enabled.
	SettlementReportingEnabled bool `json:"settlement_reporting_enabled"`
	// Defines if this payment service has 3DS enabled.
	ThreeDSecureEnabled *bool `json:"three_d_secure_enabled,omitempty"`
	// An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
	MerchantProfile map[string]*MerchantProfileSchemeSummary `json:"merchant_profile,omitempty"`
	// The URL that needs to be configured with this payment service as the receiving endpoint for webhooks from the service to our system. Currently, we dp not yet automatically register webhooks on setup, and therefore webhooks need to be registered manually by the merchant.
	WebhookURL *string `json:"webhook_url,omitempty"`
	// The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
	Fields []Field `json:"fields,omitempty"`
	// The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
	ReportingFields []Field `json:"reporting_fields,omitempty"`
	// Defines if this payment service has been deleted
	IsDeleted *bool `default:"false" json:"is_deleted"`
	// The date and time when this payment service was first created in our system.
	CreatedAt time.Time `json:"created_at"`
	// The date and time when this payment service was last updated in our system.
	UpdatedAt time.Time `json:"updated_at"`
}

func (p PaymentService) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentService) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentService) GetType() *string {
	return types.String("payment-service")
}

func (o *PaymentService) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *PaymentService) GetMerchantAccountID() string {
	if o == nil {
		return ""
	}
	return o.MerchantAccountID
}

func (o *PaymentService) GetPaymentServiceDefinitionID() string {
	if o == nil {
		return ""
	}
	return o.PaymentServiceDefinitionID
}

func (o *PaymentService) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PaymentService) GetMethod() Method {
	if o == nil {
		return Method("")
	}
	return o.Method
}

func (o *PaymentService) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *PaymentService) GetPosition() int64 {
	if o == nil {
		return 0
	}
	return o.Position
}

func (o *PaymentService) GetStatus() *PaymentServiceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *PaymentService) GetAcceptedCurrencies() []string {
	if o == nil {
		return []string{}
	}
	return o.AcceptedCurrencies
}

func (o *PaymentService) GetAcceptedCountries() []string {
	if o == nil {
		return []string{}
	}
	return o.AcceptedCountries
}

func (o *PaymentService) GetPaymentMethodTokenizationEnabled() bool {
	if o == nil {
		return false
	}
	return o.PaymentMethodTokenizationEnabled
}

func (o *PaymentService) GetNetworkTokensEnabled() bool {
	if o == nil {
		return false
	}
	return o.NetworkTokensEnabled
}

func (o *PaymentService) GetOpenLoop() bool {
	if o == nil {
		return false
	}
	return o.OpenLoop
}

func (o *PaymentService) GetSettlementReportingEnabled() bool {
	if o == nil {
		return false
	}
	return o.SettlementReportingEnabled
}

func (o *PaymentService) GetThreeDSecureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ThreeDSecureEnabled
}

func (o *PaymentService) GetMerchantProfile() map[string]*MerchantProfileSchemeSummary {
	if o == nil {
		return nil
	}
	return o.MerchantProfile
}

func (o *PaymentService) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

func (o *PaymentService) GetFields() []Field {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *PaymentService) GetReportingFields() []Field {
	if o == nil {
		return nil
	}
	return o.ReportingFields
}

func (o *PaymentService) GetIsDeleted() *bool {
	if o == nil {
		return nil
	}
	return o.IsDeleted
}

func (o *PaymentService) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *PaymentService) GetUpdatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.UpdatedAt
}
