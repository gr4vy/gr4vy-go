// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

// TransactionOutput - A full transaction resource.
type TransactionOutput struct {
	// Always `transaction`.
	type_ *string `const:"transaction" json:"type"`
	// The ID for the transaction.
	ID string `json:"id"`
	// The base62 encoded transaction ID. This represents a shorter version of this transaction's `id` which is sent to payment services, anti-fraud services, and other connectors. You can use this ID to reconcile a payment service's transaction against our system. This ID is sent instead of the transaction ID because not all services support 36 digit identifiers.
	ReconciliationID string `json:"reconciliation_id"`
	// The ID of the merchant account this transaction belongs to.
	MerchantAccountID string `json:"merchant_account_id"`
	// The currency code for this transaction.
	Currency string `json:"currency"`
	// The total amount for this transaction across all funding sources including gift cards.
	Amount int64             `json:"amount"`
	Status TransactionStatus `json:"status"`
	// The amount for this transaction that has been authorized for the `payment_method`. This can be less than the `amount` if gift cards were used.
	AuthorizedAmount int64 `json:"authorized_amount"`
	// The total amount captured for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `authorized_amount` or less.
	CapturedAmount int64 `json:"captured_amount"`
	// The total amount refunded for this transaction, in the smallest currency unit (for example, cents or pence). This can be the full value of the `captured_amount` or less.
	RefundedAmount int64 `json:"refunded_amount"`
	// The ISO 4217 currency code of this transaction's settlement.
	SettledCurrency *string `json:"settled_currency,omitempty"`
	// The net amount settled for this transaction, in the smallest currency unit (for example, cents or pence).
	SettledAmount int64 `json:"settled_amount"`
	// Indicates whether this transaction has been settled.
	Settled bool `json:"settled"`
	// The 2-letter ISO 3166-1 alpha-2 country code for the transaction. Used to filter payment services for processing.
	Country *string `json:"country,omitempty"`
	// An external identifier that can be used to match the transaction against your own records.
	ExternalIdentifier *string           `json:"external_identifier,omitempty"`
	Intent             TransactionIntent `json:"intent"`
	// The payment method used for this transaction.
	PaymentMethod *TransactionPaymentMethodOutput `json:"payment_method,omitempty"`
	// The method used for the transaction.
	Method *Method `json:"method,omitempty"`
	// The name of the instrument used to process the transaction.
	InstrumentType *InstrumentType `json:"instrument_type,omitempty"`
	// The standardized error code set by Gr4vy.
	ErrorCode *string `json:"error_code,omitempty"`
	// The payment service used for this transaction.
	PaymentService *TransactionPaymentService `json:"payment_service,omitempty"`
	// Whether a manual anti fraud review is pending with an anti fraud service.
	PendingReview *bool `default:"false" json:"pending_review"`
	// The buyer used for this transaction.
	Buyer *TransactionBuyerOutput `json:"buyer,omitempty"`
	// This is the response code received from the payment service. This can be set to any value and is not standardized across different payment services.
	RawResponseCode *string `json:"raw_response_code,omitempty"`
	//  This is the response description received from the payment service. This can be set to any value and is not standardized across different payment services.
	RawResponseDescription *string `json:"raw_response_description,omitempty"`
	// The shipping details associated with the transaction.
	ShippingDetails *ShippingDetails `json:"shipping_details,omitempty"`
	// The identifier for the checkout session this transaction is associated with.
	CheckoutSessionID *string `json:"checkout_session_id,omitempty"`
	// The gift cards redeemed for this transaction.
	GiftCardRedemptions []GiftCardRedemption `json:"gift_card_redemptions"`
	// The gift card service used for this transaction.
	GiftCardService *GiftCardService `json:"gift_card_service,omitempty"`
	// The date and time when the transaction was created, in ISO 8601 format.
	CreatedAt time.Time `json:"created_at"`
	// The date and time when the transaction was last updated, in ISO 8601 format.
	UpdatedAt time.Time `json:"updated_at"`
	// Indicates whether this transaction has been disputed.
	Disputed bool `json:"disputed"`
	// Contains information about an airline travel, if applicable.
	Airline *Airline `json:"airline,omitempty"`
	// This is the response description received from the processor.
	AuthResponseCode *string `json:"auth_response_code,omitempty"`
	// The response code received from the payment service for the Address Verification Check (AVS). This code is mapped to a standardized Gr4vy AVS response code.
	AvsResponseCode *AVSResponseCode `json:"avs_response_code,omitempty"`
	// The response code received from the payment service for the Card Verification Value (CVV). This code is mapped to a standardized Gr4vy CVV response code.
	CvvResponseCode *CVVResponseCode `json:"cvv_response_code,omitempty"`
	// The mapped decision received from the anti-fraud service. In case of a review decision this field is not updated once the review is resolved.
	AntiFraudDecision *AntiFraudDecision `json:"anti_fraud_decision,omitempty"`
	// The way payment method information made it to this transaction.
	PaymentSource TransactionPaymentSource `json:"payment_source"`
	// Indicates whether the transaction was initiated by the merchant or the customer.
	MerchantInitiated bool `json:"merchant_initiated"`
	// Indicates whether the transaction represents a subsequent payment or an initial one.
	IsSubsequentPayment bool `json:"is_subsequent_payment"`
	// An array of cart items that represents the line items of a transaction.
	CartItems []CartItem `json:"cart_items,omitempty"`
	// The statement descriptor is the text to be shown on the buyer's statements.
	StatementDescriptor *StatementDescriptor `json:"statement_descriptor,omitempty"`
	// An identifier for the transaction used by the scheme itself, when available.
	SchemeTransactionID *string `json:"scheme_transaction_id,omitempty"`
	// The 3-D Secure data that was sent to the payment service for the transaction.
	ThreeDSecure *TransactionThreeDSecureSummaryOutput `json:"three_d_secure,omitempty"`
	// The payment service's unique ID for the transaction.
	PaymentServiceTransactionID *string `json:"payment_service_transaction_id,omitempty"`
	// A list of additional identifiers that we may keep track of to manage this transaction. This may include the authorization ID, capture ID, and processor ID, as well as an undefined list of additional identifiers.
	AdditionalIdentifiers map[string]*string `json:"additional_identifiers,omitempty"`
	// Additional information about the transaction stored as key-value pairs.
	Metadata map[string]string `json:"metadata,omitempty"`
	// The date this transaction was authorized at.
	AuthorizedAt *time.Time `json:"authorized_at,omitempty"`
	// The date this transaction was captured at.
	CapturedAt *time.Time `json:"captured_at,omitempty"`
	// The date this transaction was voided at.
	VoidedAt *time.Time `json:"voided_at,omitempty"`
	// The date this transaction was canceled at.
	CanceledAt *time.Time `json:"canceled_at,omitempty"`
	// The date this transaction's approval URL will expire at.
	ApprovalExpiresAt *time.Time `json:"approval_expires_at,omitempty"`
	// The date this transaction's approval timed out at.
	BuyerApprovalTimedoutAt *time.Time               `json:"buyer_approval_timedout_at,omitempty"`
	IntentOutcome           TransactionIntentOutcome `json:"intent_outcome"`
	// The outcome of the original intent of a transaction. This allows you to understand if the intent of the transaction (e.g. `capture` or `authorize`) has been achieved when dealing with multiple payment instruments.
	MultiTender bool `json:"multi_tender"`
	// Marks the transaction as an AFT. Requires the payment service to support this feature, and might `recipient` and `buyer` data
	AccountFundingTransaction bool `json:"account_funding_transaction"`
	// The recipient of any account to account funding. For use with AFTs.
	Recipient *Recipient `json:"recipient,omitempty"`
	// An optional merchant advice code which provides insight into the type of transaction or reason why the payment failed.
	MerchantAdviceCode *string `json:"merchant_advice_code,omitempty"`
	// The number of installments for this transaction, if applicable.
	InstallmentCount *int64 `json:"installment_count,omitempty"`
	// A session token that can be used to fetch session data for direct client integrations.
	SessionToken *string `json:"session_token,omitempty"`
	// The sales tax amount for this transaction, represented as a monetary amount in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for `$12.99`
	TaxAmount *int64 `json:"tax_amount,omitempty"`
	// Merchant tax ID (for example, EIN or VAT number).
	MerchantTaxID *string `json:"merchant_tax_id,omitempty"`
	// Customer code or reference.
	CustomerReferenceNumber *string `json:"customer_reference_number,omitempty"`
	// Whether the tax is included in the amount.
	AmountIncludesTax *bool `json:"amount_includes_tax,omitempty"`
	// The merchant's unique identifier for the sales order or invoice.
	SupplierOrderNumber *string `json:"supplier_order_number,omitempty"`
	// Total charges for import/export duties.
	DutyAmount *int64 `json:"duty_amount,omitempty"`
	// Total shipping amount.
	ShippingAmount *int64 `json:"shipping_amount,omitempty"`
}

func (t TransactionOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"id", "reconciliation_id", "merchant_account_id", "currency", "amount", "status", "authorized_amount", "captured_amount", "refunded_amount", "settled_amount", "settled", "intent", "gift_card_redemptions", "created_at", "updated_at", "disputed", "payment_source", "merchant_initiated", "is_subsequent_payment", "intent_outcome", "multi_tender", "account_funding_transaction"}); err != nil {
		return err
	}
	return nil
}

func (t *TransactionOutput) GetType() *string {
	return types.Pointer("transaction")
}

func (t *TransactionOutput) GetID() string {
	if t == nil {
		return ""
	}
	return t.ID
}

func (t *TransactionOutput) GetReconciliationID() string {
	if t == nil {
		return ""
	}
	return t.ReconciliationID
}

func (t *TransactionOutput) GetMerchantAccountID() string {
	if t == nil {
		return ""
	}
	return t.MerchantAccountID
}

func (t *TransactionOutput) GetCurrency() string {
	if t == nil {
		return ""
	}
	return t.Currency
}

func (t *TransactionOutput) GetAmount() int64 {
	if t == nil {
		return 0
	}
	return t.Amount
}

func (t *TransactionOutput) GetStatus() TransactionStatus {
	if t == nil {
		return TransactionStatus("")
	}
	return t.Status
}

func (t *TransactionOutput) GetAuthorizedAmount() int64 {
	if t == nil {
		return 0
	}
	return t.AuthorizedAmount
}

func (t *TransactionOutput) GetCapturedAmount() int64 {
	if t == nil {
		return 0
	}
	return t.CapturedAmount
}

func (t *TransactionOutput) GetRefundedAmount() int64 {
	if t == nil {
		return 0
	}
	return t.RefundedAmount
}

func (t *TransactionOutput) GetSettledCurrency() *string {
	if t == nil {
		return nil
	}
	return t.SettledCurrency
}

func (t *TransactionOutput) GetSettledAmount() int64 {
	if t == nil {
		return 0
	}
	return t.SettledAmount
}

func (t *TransactionOutput) GetSettled() bool {
	if t == nil {
		return false
	}
	return t.Settled
}

func (t *TransactionOutput) GetCountry() *string {
	if t == nil {
		return nil
	}
	return t.Country
}

func (t *TransactionOutput) GetExternalIdentifier() *string {
	if t == nil {
		return nil
	}
	return t.ExternalIdentifier
}

func (t *TransactionOutput) GetIntent() TransactionIntent {
	if t == nil {
		return TransactionIntent("")
	}
	return t.Intent
}

func (t *TransactionOutput) GetPaymentMethod() *TransactionPaymentMethodOutput {
	if t == nil {
		return nil
	}
	return t.PaymentMethod
}

func (t *TransactionOutput) GetMethod() *Method {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *TransactionOutput) GetInstrumentType() *InstrumentType {
	if t == nil {
		return nil
	}
	return t.InstrumentType
}

func (t *TransactionOutput) GetErrorCode() *string {
	if t == nil {
		return nil
	}
	return t.ErrorCode
}

func (t *TransactionOutput) GetPaymentService() *TransactionPaymentService {
	if t == nil {
		return nil
	}
	return t.PaymentService
}

func (t *TransactionOutput) GetPendingReview() *bool {
	if t == nil {
		return nil
	}
	return t.PendingReview
}

func (t *TransactionOutput) GetBuyer() *TransactionBuyerOutput {
	if t == nil {
		return nil
	}
	return t.Buyer
}

func (t *TransactionOutput) GetRawResponseCode() *string {
	if t == nil {
		return nil
	}
	return t.RawResponseCode
}

func (t *TransactionOutput) GetRawResponseDescription() *string {
	if t == nil {
		return nil
	}
	return t.RawResponseDescription
}

func (t *TransactionOutput) GetShippingDetails() *ShippingDetails {
	if t == nil {
		return nil
	}
	return t.ShippingDetails
}

func (t *TransactionOutput) GetCheckoutSessionID() *string {
	if t == nil {
		return nil
	}
	return t.CheckoutSessionID
}

func (t *TransactionOutput) GetGiftCardRedemptions() []GiftCardRedemption {
	if t == nil {
		return []GiftCardRedemption{}
	}
	return t.GiftCardRedemptions
}

func (t *TransactionOutput) GetGiftCardService() *GiftCardService {
	if t == nil {
		return nil
	}
	return t.GiftCardService
}

func (t *TransactionOutput) GetCreatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.CreatedAt
}

func (t *TransactionOutput) GetUpdatedAt() time.Time {
	if t == nil {
		return time.Time{}
	}
	return t.UpdatedAt
}

func (t *TransactionOutput) GetDisputed() bool {
	if t == nil {
		return false
	}
	return t.Disputed
}

func (t *TransactionOutput) GetAirline() *Airline {
	if t == nil {
		return nil
	}
	return t.Airline
}

func (t *TransactionOutput) GetAuthResponseCode() *string {
	if t == nil {
		return nil
	}
	return t.AuthResponseCode
}

func (t *TransactionOutput) GetAvsResponseCode() *AVSResponseCode {
	if t == nil {
		return nil
	}
	return t.AvsResponseCode
}

func (t *TransactionOutput) GetCvvResponseCode() *CVVResponseCode {
	if t == nil {
		return nil
	}
	return t.CvvResponseCode
}

func (t *TransactionOutput) GetAntiFraudDecision() *AntiFraudDecision {
	if t == nil {
		return nil
	}
	return t.AntiFraudDecision
}

func (t *TransactionOutput) GetPaymentSource() TransactionPaymentSource {
	if t == nil {
		return TransactionPaymentSource("")
	}
	return t.PaymentSource
}

func (t *TransactionOutput) GetMerchantInitiated() bool {
	if t == nil {
		return false
	}
	return t.MerchantInitiated
}

func (t *TransactionOutput) GetIsSubsequentPayment() bool {
	if t == nil {
		return false
	}
	return t.IsSubsequentPayment
}

func (t *TransactionOutput) GetCartItems() []CartItem {
	if t == nil {
		return nil
	}
	return t.CartItems
}

func (t *TransactionOutput) GetStatementDescriptor() *StatementDescriptor {
	if t == nil {
		return nil
	}
	return t.StatementDescriptor
}

func (t *TransactionOutput) GetSchemeTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.SchemeTransactionID
}

func (t *TransactionOutput) GetThreeDSecure() *TransactionThreeDSecureSummaryOutput {
	if t == nil {
		return nil
	}
	return t.ThreeDSecure
}

func (t *TransactionOutput) GetPaymentServiceTransactionID() *string {
	if t == nil {
		return nil
	}
	return t.PaymentServiceTransactionID
}

func (t *TransactionOutput) GetAdditionalIdentifiers() map[string]*string {
	if t == nil {
		return nil
	}
	return t.AdditionalIdentifiers
}

func (t *TransactionOutput) GetMetadata() map[string]string {
	if t == nil {
		return nil
	}
	return t.Metadata
}

func (t *TransactionOutput) GetAuthorizedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.AuthorizedAt
}

func (t *TransactionOutput) GetCapturedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CapturedAt
}

func (t *TransactionOutput) GetVoidedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.VoidedAt
}

func (t *TransactionOutput) GetCanceledAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.CanceledAt
}

func (t *TransactionOutput) GetApprovalExpiresAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.ApprovalExpiresAt
}

func (t *TransactionOutput) GetBuyerApprovalTimedoutAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.BuyerApprovalTimedoutAt
}

func (t *TransactionOutput) GetIntentOutcome() TransactionIntentOutcome {
	if t == nil {
		return TransactionIntentOutcome("")
	}
	return t.IntentOutcome
}

func (t *TransactionOutput) GetMultiTender() bool {
	if t == nil {
		return false
	}
	return t.MultiTender
}

func (t *TransactionOutput) GetAccountFundingTransaction() bool {
	if t == nil {
		return false
	}
	return t.AccountFundingTransaction
}

func (t *TransactionOutput) GetRecipient() *Recipient {
	if t == nil {
		return nil
	}
	return t.Recipient
}

func (t *TransactionOutput) GetMerchantAdviceCode() *string {
	if t == nil {
		return nil
	}
	return t.MerchantAdviceCode
}

func (t *TransactionOutput) GetInstallmentCount() *int64 {
	if t == nil {
		return nil
	}
	return t.InstallmentCount
}

func (t *TransactionOutput) GetSessionToken() *string {
	if t == nil {
		return nil
	}
	return t.SessionToken
}

func (t *TransactionOutput) GetTaxAmount() *int64 {
	if t == nil {
		return nil
	}
	return t.TaxAmount
}

func (t *TransactionOutput) GetMerchantTaxID() *string {
	if t == nil {
		return nil
	}
	return t.MerchantTaxID
}

func (t *TransactionOutput) GetCustomerReferenceNumber() *string {
	if t == nil {
		return nil
	}
	return t.CustomerReferenceNumber
}

func (t *TransactionOutput) GetAmountIncludesTax() *bool {
	if t == nil {
		return nil
	}
	return t.AmountIncludesTax
}

func (t *TransactionOutput) GetSupplierOrderNumber() *string {
	if t == nil {
		return nil
	}
	return t.SupplierOrderNumber
}

func (t *TransactionOutput) GetDutyAmount() *int64 {
	if t == nil {
		return nil
	}
	return t.DutyAmount
}

func (t *TransactionOutput) GetShippingAmount() *int64 {
	if t == nil {
		return nil
	}
	return t.ShippingAmount
}
