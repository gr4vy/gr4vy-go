// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"time"
)

type TicketDeliveryMethod string

const (
	TicketDeliveryMethodElectronic TicketDeliveryMethod = "electronic"
	TicketDeliveryMethodOther      TicketDeliveryMethod = "other"
)

func (e TicketDeliveryMethod) ToPointer() *TicketDeliveryMethod {
	return &e
}

// Airline - Information about an airline travel.
type Airline struct {
	// The unique identifier of the reservation in the global distribution system.
	BookingCode *string `json:"booking_code,omitempty"`
	// Indicates whether the cardholder is traveling.
	IsCardholderTraveling *bool `json:"is_cardholder_traveling,omitempty"`
	// The address of the place/agency that issued the ticket.
	IssuedAddress *string `json:"issued_address,omitempty"`
	// The date that the ticket was last issued in the airline reservation system.
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// For airline aggregators, three-character IATA code of the airline issuing the ticket.
	IssuingCarrierCode *string `json:"issuing_carrier_code,omitempty"`
	// For airline aggregators, name of the airline issuing the ticket.
	IssuingCarrierName *string `json:"issuing_carrier_name,omitempty"`
	// For airline aggregators, two-character IATA code of the airline issuing the ticket.
	IssuingIataDesignator *string `json:"issuing_iata_designator,omitempty"`
	// For airline aggregators, three-character ICAO code of the airline issuing the ticket.
	IssuingIcaoCode *string `json:"issuing_icao_code,omitempty"`
	// An array of separate trip segments. Each leg contains detailed itinerary information.
	Legs []AirlineLeg `json:"legs,omitempty"`
	// The Passenger Name Record (PNR) in the airline reservation system.
	PassengerNameRecord *string `json:"passenger_name_record,omitempty"`
	// An array of the travelling passengers.
	Passengers []AirlinePassenger `json:"passengers,omitempty"`
	// The name of the reservation system.
	ReservationSystem *string `json:"reservation_system,omitempty"`
	// Indicates whether the ticket is restricted (refundable).
	RestrictedTicket *bool `json:"restricted_ticket,omitempty"`
	// The delivery method of the ticket.
	TicketDeliveryMethod *TicketDeliveryMethod `json:"ticket_delivery_method,omitempty"`
	// The airline's unique ticket number.
	TicketNumber *string `json:"ticket_number,omitempty"`
	// The IATA travel agency code.
	TravelAgencyCode *string `json:"travel_agency_code,omitempty"`
	// The reference number of the invoice that was issued by the travel agency.
	TravelAgencyInvoiceNumber *string `json:"travel_agency_invoice_number,omitempty"`
	// The name of the travel agency.
	TravelAgencyName *string `json:"travel_agency_name,omitempty"`
	// The name of the travel agency plan.
	TravelAgencyPlanName *string `json:"travel_agency_plan_name,omitempty"`
}

func (a Airline) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Airline) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Airline) GetBookingCode() *string {
	if o == nil {
		return nil
	}
	return o.BookingCode
}

func (o *Airline) GetIsCardholderTraveling() *bool {
	if o == nil {
		return nil
	}
	return o.IsCardholderTraveling
}

func (o *Airline) GetIssuedAddress() *string {
	if o == nil {
		return nil
	}
	return o.IssuedAddress
}

func (o *Airline) GetIssuedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *Airline) GetIssuingCarrierCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingCarrierCode
}

func (o *Airline) GetIssuingCarrierName() *string {
	if o == nil {
		return nil
	}
	return o.IssuingCarrierName
}

func (o *Airline) GetIssuingIataDesignator() *string {
	if o == nil {
		return nil
	}
	return o.IssuingIataDesignator
}

func (o *Airline) GetIssuingIcaoCode() *string {
	if o == nil {
		return nil
	}
	return o.IssuingIcaoCode
}

func (o *Airline) GetLegs() []AirlineLeg {
	if o == nil {
		return nil
	}
	return o.Legs
}

func (o *Airline) GetPassengerNameRecord() *string {
	if o == nil {
		return nil
	}
	return o.PassengerNameRecord
}

func (o *Airline) GetPassengers() []AirlinePassenger {
	if o == nil {
		return nil
	}
	return o.Passengers
}

func (o *Airline) GetReservationSystem() *string {
	if o == nil {
		return nil
	}
	return o.ReservationSystem
}

func (o *Airline) GetRestrictedTicket() *bool {
	if o == nil {
		return nil
	}
	return o.RestrictedTicket
}

func (o *Airline) GetTicketDeliveryMethod() *TicketDeliveryMethod {
	if o == nil {
		return nil
	}
	return o.TicketDeliveryMethod
}

func (o *Airline) GetTicketNumber() *string {
	if o == nil {
		return nil
	}
	return o.TicketNumber
}

func (o *Airline) GetTravelAgencyCode() *string {
	if o == nil {
		return nil
	}
	return o.TravelAgencyCode
}

func (o *Airline) GetTravelAgencyInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.TravelAgencyInvoiceNumber
}

func (o *Airline) GetTravelAgencyName() *string {
	if o == nil {
		return nil
	}
	return o.TravelAgencyName
}

func (o *Airline) GetTravelAgencyPlanName() *string {
	if o == nil {
		return nil
	}
	return o.TravelAgencyPlanName
}
