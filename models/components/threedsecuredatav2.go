// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type ThreeDSecureDataV2 struct {
	// The cardholder authentication value or AAV.
	Cavv string `json:"cavv"`
	// The ecommerce indicator for the 3DS transaction.
	Eci string `json:"eci"`
	// The version of 3-D Secure that was used.
	Version string `json:"version"`
	// For 3-D Secure version 1, the enrolment response. For 3-D Secure version 2 and above, the transaction status from the `ARes`.
	DirectoryResponse string `json:"directory_response"`
	// The scheme/brand of the card that is used for 3-D Secure.
	Scheme *CardScheme `json:"scheme,omitempty"`
	// The transaction status after a the 3DS challenge. This will be null in case of a frictionless 3DS flow.
	AuthenticationResponse *string `json:"authentication_response,omitempty"`
	// The transaction identifier.
	DirectoryTransactionID string `json:"directory_transaction_id"`
}

func (t ThreeDSecureDataV2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *ThreeDSecureDataV2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"cavv", "eci", "version", "directory_response", "directory_transaction_id"}); err != nil {
		return err
	}
	return nil
}

func (t *ThreeDSecureDataV2) GetCavv() string {
	if t == nil {
		return ""
	}
	return t.Cavv
}

func (t *ThreeDSecureDataV2) GetEci() string {
	if t == nil {
		return ""
	}
	return t.Eci
}

func (t *ThreeDSecureDataV2) GetVersion() string {
	if t == nil {
		return ""
	}
	return t.Version
}

func (t *ThreeDSecureDataV2) GetDirectoryResponse() string {
	if t == nil {
		return ""
	}
	return t.DirectoryResponse
}

func (t *ThreeDSecureDataV2) GetScheme() *CardScheme {
	if t == nil {
		return nil
	}
	return t.Scheme
}

func (t *ThreeDSecureDataV2) GetAuthenticationResponse() *string {
	if t == nil {
		return nil
	}
	return t.AuthenticationResponse
}

func (t *ThreeDSecureDataV2) GetDirectoryTransactionID() string {
	if t == nil {
		return ""
	}
	return t.DirectoryTransactionID
}
