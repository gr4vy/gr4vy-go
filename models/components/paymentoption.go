// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
)

type ContextType string

const (
	ContextTypeWalletPaymentOptionContext    ContextType = "WalletPaymentOptionContext"
	ContextTypeGooglePayPaymentOptionContext ContextType = "GooglePayPaymentOptionContext"
	ContextTypePaymentOptionContext          ContextType = "PaymentOptionContext"
)

type Context struct {
	WalletPaymentOptionContext    *WalletPaymentOptionContext    `queryParam:"inline,name=Context"`
	GooglePayPaymentOptionContext *GooglePayPaymentOptionContext `queryParam:"inline,name=Context"`
	PaymentOptionContext          *PaymentOptionContext          `queryParam:"inline,name=Context"`

	Type ContextType
}

func CreateContextWalletPaymentOptionContext(walletPaymentOptionContext WalletPaymentOptionContext) Context {
	typ := ContextTypeWalletPaymentOptionContext

	return Context{
		WalletPaymentOptionContext: &walletPaymentOptionContext,
		Type:                       typ,
	}
}

func CreateContextGooglePayPaymentOptionContext(googlePayPaymentOptionContext GooglePayPaymentOptionContext) Context {
	typ := ContextTypeGooglePayPaymentOptionContext

	return Context{
		GooglePayPaymentOptionContext: &googlePayPaymentOptionContext,
		Type:                          typ,
	}
}

func CreateContextPaymentOptionContext(paymentOptionContext PaymentOptionContext) Context {
	typ := ContextTypePaymentOptionContext

	return Context{
		PaymentOptionContext: &paymentOptionContext,
		Type:                 typ,
	}
}

func (u *Context) UnmarshalJSON(data []byte) error {

	var googlePayPaymentOptionContext GooglePayPaymentOptionContext = GooglePayPaymentOptionContext{}
	if err := utils.UnmarshalJSON(data, &googlePayPaymentOptionContext, "", true, nil); err == nil {
		u.GooglePayPaymentOptionContext = &googlePayPaymentOptionContext
		u.Type = ContextTypeGooglePayPaymentOptionContext
		return nil
	}

	var walletPaymentOptionContext WalletPaymentOptionContext = WalletPaymentOptionContext{}
	if err := utils.UnmarshalJSON(data, &walletPaymentOptionContext, "", true, nil); err == nil {
		u.WalletPaymentOptionContext = &walletPaymentOptionContext
		u.Type = ContextTypeWalletPaymentOptionContext
		return nil
	}

	var paymentOptionContext PaymentOptionContext = PaymentOptionContext{}
	if err := utils.UnmarshalJSON(data, &paymentOptionContext, "", true, nil); err == nil {
		u.PaymentOptionContext = &paymentOptionContext
		u.Type = ContextTypePaymentOptionContext
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Context", string(data))
}

func (u Context) MarshalJSON() ([]byte, error) {
	if u.WalletPaymentOptionContext != nil {
		return utils.MarshalJSON(u.WalletPaymentOptionContext, "", true)
	}

	if u.GooglePayPaymentOptionContext != nil {
		return utils.MarshalJSON(u.GooglePayPaymentOptionContext, "", true)
	}

	if u.PaymentOptionContext != nil {
		return utils.MarshalJSON(u.PaymentOptionContext, "", true)
	}

	return nil, errors.New("could not marshal union type Context: all fields are null")
}

type PaymentOption struct {
	type_                 *string  `const:"payment-option" json:"type"`
	Method                string   `json:"method"`
	IconURL               *string  `json:"icon_url,omitempty"`
	Mode                  Mode     `json:"mode"`
	Label                 *string  `json:"label,omitempty"`
	CanStorePaymentMethod bool     `json:"can_store_payment_method"`
	CanDelayCapture       bool     `json:"can_delay_capture"`
	Context               *Context `json:"context,omitempty"`
}

func (p PaymentOption) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentOption) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"method", "mode", "can_store_payment_method", "can_delay_capture"}); err != nil {
		return err
	}
	return nil
}

func (p *PaymentOption) GetType() *string {
	return types.Pointer("payment-option")
}

func (p *PaymentOption) GetMethod() string {
	if p == nil {
		return ""
	}
	return p.Method
}

func (p *PaymentOption) GetIconURL() *string {
	if p == nil {
		return nil
	}
	return p.IconURL
}

func (p *PaymentOption) GetMode() Mode {
	if p == nil {
		return Mode("")
	}
	return p.Mode
}

func (p *PaymentOption) GetLabel() *string {
	if p == nil {
		return nil
	}
	return p.Label
}

func (p *PaymentOption) GetCanStorePaymentMethod() bool {
	if p == nil {
		return false
	}
	return p.CanStorePaymentMethod
}

func (p *PaymentOption) GetCanDelayCapture() bool {
	if p == nil {
		return false
	}
	return p.CanDelayCapture
}

func (p *PaymentOption) GetContext() *Context {
	if p == nil {
		return nil
	}
	return p.Context
}
