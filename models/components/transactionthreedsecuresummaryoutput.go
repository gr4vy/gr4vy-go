// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type ResponseDataType string

const (
	ResponseDataTypeThreeDSecureDataV1 ResponseDataType = "ThreeDSecureDataV1"
	ResponseDataTypeThreeDSecureV2     ResponseDataType = "ThreeDSecureV2"
)

// ResponseData - The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
type ResponseData struct {
	ThreeDSecureDataV1 *ThreeDSecureDataV1 `queryParam:"inline,name=Response_Data"`
	ThreeDSecureV2     *ThreeDSecureV2     `queryParam:"inline,name=Response_Data"`

	Type ResponseDataType
}

func CreateResponseDataThreeDSecureDataV1(threeDSecureDataV1 ThreeDSecureDataV1) ResponseData {
	typ := ResponseDataTypeThreeDSecureDataV1

	return ResponseData{
		ThreeDSecureDataV1: &threeDSecureDataV1,
		Type:               typ,
	}
}

func CreateResponseDataThreeDSecureV2(threeDSecureV2 ThreeDSecureV2) ResponseData {
	typ := ResponseDataTypeThreeDSecureV2

	return ResponseData{
		ThreeDSecureV2: &threeDSecureV2,
		Type:           typ,
	}
}

func (u *ResponseData) UnmarshalJSON(data []byte) error {

	var threeDSecureDataV1 ThreeDSecureDataV1 = ThreeDSecureDataV1{}
	if err := utils.UnmarshalJSON(data, &threeDSecureDataV1, "", true, nil); err == nil {
		u.ThreeDSecureDataV1 = &threeDSecureDataV1
		u.Type = ResponseDataTypeThreeDSecureDataV1
		return nil
	}

	var threeDSecureV2 ThreeDSecureV2 = ThreeDSecureV2{}
	if err := utils.UnmarshalJSON(data, &threeDSecureV2, "", true, nil); err == nil {
		u.ThreeDSecureV2 = &threeDSecureV2
		u.Type = ResponseDataTypeThreeDSecureV2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseData", string(data))
}

func (u ResponseData) MarshalJSON() ([]byte, error) {
	if u.ThreeDSecureDataV1 != nil {
		return utils.MarshalJSON(u.ThreeDSecureDataV1, "", true)
	}

	if u.ThreeDSecureV2 != nil {
		return utils.MarshalJSON(u.ThreeDSecureV2, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseData: all fields are null")
}

type TransactionThreeDSecureSummaryOutput struct {
	// The version of 3DS used for this transaction.
	Version *string `json:"version,omitempty"`
	// The status of the 3DS challenge for this transaction.
	Status *ThreeDSecureStatus `json:"status,omitempty"`
	// The method used for 3DS authentication for this transaction.
	Method *ThreeDSecureMethod `json:"method,omitempty"`
	// The 3DS data sent to the payment service for this transaction. This will only be populated if external 3DS data was passed in directly as part of the transaction API call, or if our 3DS server returned a status code of `Y` or `A`. In case of a failure to authenticate (status `N`, `R`, or `U`) this field will not be populated. To see full details about the 3DS calls please use our transaction events API.
	ResponseData *ResponseData `json:"response_data,omitempty"`
	// The error data received from our 3DS server. This will not be populated if the customer failed the authentication with a status code of `N`, `R`, or `U`.  To see full details about the 3DS calls in those situations please use our transaction events API.
	ErrorData *ThreeDSecureError `json:"error_data,omitempty"`
}

func (t TransactionThreeDSecureSummaryOutput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionThreeDSecureSummaryOutput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (t *TransactionThreeDSecureSummaryOutput) GetVersion() *string {
	if t == nil {
		return nil
	}
	return t.Version
}

func (t *TransactionThreeDSecureSummaryOutput) GetStatus() *ThreeDSecureStatus {
	if t == nil {
		return nil
	}
	return t.Status
}

func (t *TransactionThreeDSecureSummaryOutput) GetMethod() *ThreeDSecureMethod {
	if t == nil {
		return nil
	}
	return t.Method
}

func (t *TransactionThreeDSecureSummaryOutput) GetResponseData() *ResponseData {
	if t == nil {
		return nil
	}
	return t.ResponseData
}

func (t *TransactionThreeDSecureSummaryOutput) GetErrorData() *ThreeDSecureError {
	if t == nil {
		return nil
	}
	return t.ErrorData
}
