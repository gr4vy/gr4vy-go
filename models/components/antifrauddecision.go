// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type AntiFraudDecision string

const (
	AntiFraudDecisionAccept    AntiFraudDecision = "accept"
	AntiFraudDecisionError     AntiFraudDecision = "error"
	AntiFraudDecisionException AntiFraudDecision = "exception"
	AntiFraudDecisionReject    AntiFraudDecision = "reject"
	AntiFraudDecisionReview    AntiFraudDecision = "review"
	AntiFraudDecisionSkipped   AntiFraudDecision = "skipped"
)

func (e AntiFraudDecision) ToPointer() *AntiFraudDecision {
	return &e
}
func (e *AntiFraudDecision) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "accept":
		fallthrough
	case "error":
		fallthrough
	case "exception":
		fallthrough
	case "reject":
		fallthrough
	case "review":
		fallthrough
	case "skipped":
		*e = AntiFraudDecision(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AntiFraudDecision: %v", v)
	}
}
