// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

// PaymentServiceCreate - Request body for activating a payment service
type PaymentServiceCreate struct {
	// The display name for the payment service.
	DisplayName string `json:"display_name"`
	// The definition ID of the service to configure.
	PaymentServiceDefinitionID string `json:"payment_service_definition_id"`
	// The non-secret credential fields that have been configured for this payment service. Any secret fields are omitted.
	Fields []Field `json:"fields"`
	// The non-secret reporting fields that have been configured for this payment service. Any secret fields are omitted.
	ReportingFields []Field `json:"reporting_fields,omitempty"`
	// Deprecated field used to define the order in which to process payment services
	Position *int64 `json:"position,omitempty"`
	// A list of currencies for which this service is enabled, in ISO 4217 three-letter code format.
	AcceptedCurrencies []string `json:"accepted_currencies"`
	// A list of countries for which this service is enabled, in ISO two-letter code format.
	AcceptedCountries []string `json:"accepted_countries"`
	// Defines if this payment service is currently active.
	Active *bool `json:"active,omitempty"`
	// Defines if this payment service has 3DS enabled.
	ThreeDSecureEnabled *bool `default:"false" json:"three_d_secure_enabled"`
	// An object containing a key for each supported card schemes, and for each key an object with the 3DS profile for this service for that scheme.
	MerchantProfile map[string]*MerchantProfileScheme `json:"merchant_profile,omitempty"`
	// Defines if this payment service support payment method tokenization.
	PaymentMethodTokenizationEnabled *bool `json:"payment_method_tokenization_enabled,omitempty"`
	// Defines if this payment service supports network tokens.
	NetworkTokensEnabled *bool `json:"network_tokens_enabled,omitempty"`
	// Defines if this payment service is open loop.
	OpenLoop *bool `json:"open_loop,omitempty"`
	// Defines if this payment service has settlement reporting enabled.
	SettlementReportingEnabled *bool `default:"false" json:"settlement_reporting_enabled"`
}

func (p PaymentServiceCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaymentServiceCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PaymentServiceCreate) GetDisplayName() string {
	if o == nil {
		return ""
	}
	return o.DisplayName
}

func (o *PaymentServiceCreate) GetPaymentServiceDefinitionID() string {
	if o == nil {
		return ""
	}
	return o.PaymentServiceDefinitionID
}

func (o *PaymentServiceCreate) GetFields() []Field {
	if o == nil {
		return []Field{}
	}
	return o.Fields
}

func (o *PaymentServiceCreate) GetReportingFields() []Field {
	if o == nil {
		return nil
	}
	return o.ReportingFields
}

func (o *PaymentServiceCreate) GetPosition() *int64 {
	if o == nil {
		return nil
	}
	return o.Position
}

func (o *PaymentServiceCreate) GetAcceptedCurrencies() []string {
	if o == nil {
		return []string{}
	}
	return o.AcceptedCurrencies
}

func (o *PaymentServiceCreate) GetAcceptedCountries() []string {
	if o == nil {
		return []string{}
	}
	return o.AcceptedCountries
}

func (o *PaymentServiceCreate) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *PaymentServiceCreate) GetThreeDSecureEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ThreeDSecureEnabled
}

func (o *PaymentServiceCreate) GetMerchantProfile() map[string]*MerchantProfileScheme {
	if o == nil {
		return nil
	}
	return o.MerchantProfile
}

func (o *PaymentServiceCreate) GetPaymentMethodTokenizationEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PaymentMethodTokenizationEnabled
}

func (o *PaymentServiceCreate) GetNetworkTokensEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.NetworkTokensEnabled
}

func (o *PaymentServiceCreate) GetOpenLoop() *bool {
	if o == nil {
		return nil
	}
	return o.OpenLoop
}

func (o *PaymentServiceCreate) GetSettlementReportingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.SettlementReportingEnabled
}
