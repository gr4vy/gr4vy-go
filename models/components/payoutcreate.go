// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type PayoutCreatePaymentMethodType string

const (
	PayoutCreatePaymentMethodTypePaymentMethodCard       PayoutCreatePaymentMethodType = "PaymentMethodCard"
	PayoutCreatePaymentMethodTypePaymentMethodStoredCard PayoutCreatePaymentMethodType = "PaymentMethodStoredCard"
)

// PayoutCreatePaymentMethod - The type of payment method to send funds too.
type PayoutCreatePaymentMethod struct {
	PaymentMethodCard       *PaymentMethodCard       `queryParam:"inline,name=Payment_Method"`
	PaymentMethodStoredCard *PaymentMethodStoredCard `queryParam:"inline,name=Payment_Method"`

	Type PayoutCreatePaymentMethodType
}

func CreatePayoutCreatePaymentMethodPaymentMethodCard(paymentMethodCard PaymentMethodCard) PayoutCreatePaymentMethod {
	typ := PayoutCreatePaymentMethodTypePaymentMethodCard

	return PayoutCreatePaymentMethod{
		PaymentMethodCard: &paymentMethodCard,
		Type:              typ,
	}
}

func CreatePayoutCreatePaymentMethodPaymentMethodStoredCard(paymentMethodStoredCard PaymentMethodStoredCard) PayoutCreatePaymentMethod {
	typ := PayoutCreatePaymentMethodTypePaymentMethodStoredCard

	return PayoutCreatePaymentMethod{
		PaymentMethodStoredCard: &paymentMethodStoredCard,
		Type:                    typ,
	}
}

func (u *PayoutCreatePaymentMethod) UnmarshalJSON(data []byte) error {

	var paymentMethodCard PaymentMethodCard = PaymentMethodCard{}
	if err := utils.UnmarshalJSON(data, &paymentMethodCard, "", true, nil); err == nil {
		u.PaymentMethodCard = &paymentMethodCard
		u.Type = PayoutCreatePaymentMethodTypePaymentMethodCard
		return nil
	}

	var paymentMethodStoredCard PaymentMethodStoredCard = PaymentMethodStoredCard{}
	if err := utils.UnmarshalJSON(data, &paymentMethodStoredCard, "", true, nil); err == nil {
		u.PaymentMethodStoredCard = &paymentMethodStoredCard
		u.Type = PayoutCreatePaymentMethodTypePaymentMethodStoredCard
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayoutCreatePaymentMethod", string(data))
}

func (u PayoutCreatePaymentMethod) MarshalJSON() ([]byte, error) {
	if u.PaymentMethodCard != nil {
		return utils.MarshalJSON(u.PaymentMethodCard, "", true)
	}

	if u.PaymentMethodStoredCard != nil {
		return utils.MarshalJSON(u.PaymentMethodStoredCard, "", true)
	}

	return nil, errors.New("could not marshal union type PayoutCreatePaymentMethod: all fields are null")
}

// PayoutCreate
//
// Represents the data required to create a new payout.
type PayoutCreate struct {
	// The monetary amount for this payout, in the smallest currency unit for the given currency, for example `1299` cents to create an authorization for $12.99.
	Amount int64 `json:"amount"`
	// The ISO-4217 currency code for this payout.
	Currency string `json:"currency"`
	// The ID of the payment service to use for the payout.
	PaymentServiceID string `json:"payment_service_id"`
	// The type of payment method to send funds too.
	PaymentMethod PayoutCreatePaymentMethod `json:"payment_method"`
	// The type of payout to process.
	Category *PayoutCategory `json:"category,omitempty"`
	// A value that can be used to match the payout against your own records.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The `id` of a stored buyer to use for this payout Use this instead of the `buyer` or `buyer_external_identifier`.
	BuyerID *string `json:"buyer_id,omitempty"`
	// Inline buyer details for the payout. Use this instead of the `buyer_id` or `buyer_external_identifier`.
	Buyer *GuestBuyerInput `json:"buyer,omitempty"`
	// The `external_identifier` of a stored buyer to use for this payout. Use this instead of the `buyer_id` or `buyer`.
	BuyerExternalIdentifier *string `json:"buyer_external_identifier,omitempty"`
	// Merchant information for the source of the payout.
	Merchant *PayoutMerchant `json:"merchant,omitempty"`
	// Optional fields for processing payouts on specific payment services.
	ConnectionOptions *PayoutConnectionOptions `json:"connection_options,omitempty"`
}

func (p *PayoutCreate) GetAmount() int64 {
	if p == nil {
		return 0
	}
	return p.Amount
}

func (p *PayoutCreate) GetCurrency() string {
	if p == nil {
		return ""
	}
	return p.Currency
}

func (p *PayoutCreate) GetPaymentServiceID() string {
	if p == nil {
		return ""
	}
	return p.PaymentServiceID
}

func (p *PayoutCreate) GetPaymentMethod() PayoutCreatePaymentMethod {
	if p == nil {
		return PayoutCreatePaymentMethod{}
	}
	return p.PaymentMethod
}

func (p *PayoutCreate) GetCategory() *PayoutCategory {
	if p == nil {
		return nil
	}
	return p.Category
}

func (p *PayoutCreate) GetExternalIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.ExternalIdentifier
}

func (p *PayoutCreate) GetBuyerID() *string {
	if p == nil {
		return nil
	}
	return p.BuyerID
}

func (p *PayoutCreate) GetBuyer() *GuestBuyerInput {
	if p == nil {
		return nil
	}
	return p.Buyer
}

func (p *PayoutCreate) GetBuyerExternalIdentifier() *string {
	if p == nil {
		return nil
	}
	return p.BuyerExternalIdentifier
}

func (p *PayoutCreate) GetMerchant() *PayoutMerchant {
	if p == nil {
		return nil
	}
	return p.Merchant
}

func (p *PayoutCreate) GetConnectionOptions() *PayoutConnectionOptions {
	if p == nil {
		return nil
	}
	return p.ConnectionOptions
}
