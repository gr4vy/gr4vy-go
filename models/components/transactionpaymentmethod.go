// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type TransactionPaymentMethod struct {
	// Always `payment-method`.
	type_ *string `const:"payment-method" json:"type"`
	// The optional URL that the buyer needs to be redirected to to further authorize their payment.
	ApprovalURL *string `json:"approval_url,omitempty"`
	// The 2-letter ISO code of the country this payment method can be used for. If this value is null the payment method may be used in multiple countries.
	Country *string `json:"country,omitempty"`
	// The ISO-4217 currency code that this payment method can be used for. If this value is null the payment method may be used for multiple currencies.
	Currency *string `json:"currency,omitempty"`
	// Details for credit or debit card payment method.
	Details *PaymentMethodDetailsCard `json:"details,omitempty"`
	// The expiration date for the payment method.
	ExpirationDate *string `json:"expiration_date,omitempty"`
	// The unique hash derived from the payment method identifier (e.g. card number).
	Fingerprint *string `json:"fingerprint,omitempty"`
	// A label for the card or the account. For a paypal payment method this is the user's email address. For a card it is the last 4 digits of the card.
	Label *string `json:"label,omitempty"`
	// The date and time when this card was last replaced by the account updater.
	LastReplacedAt *time.Time `json:"last_replaced_at,omitempty"`
	Method         Method     `json:"method"`
	// The mode to use with this payment method.
	Mode *Mode `json:"mode,omitempty"`
	// The scheme of the card. Only applies to card payments.
	Scheme *CardScheme `json:"scheme,omitempty"`
	// The ID of the payment method.
	ID *string `json:"id,omitempty"`
	// The browser target that an approval URL must be opened in. If any or null, then there is no specific requirement.
	ApprovalTarget *ApprovalTarget `json:"approval_target,omitempty"`
	// An external identifier that can be used to match the payment method against your own records.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The payment account reference (PAR) returned by the card scheme. This is a unique reference to the underlying account that has been used to fund this payment method.
	PaymentAccountReference *string `json:"payment_account_reference,omitempty"`
}

func (t TransactionPaymentMethod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransactionPaymentMethod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"method"}); err != nil {
		return err
	}
	return nil
}

func (t *TransactionPaymentMethod) GetType() *string {
	return types.Pointer("payment-method")
}

func (t *TransactionPaymentMethod) GetApprovalURL() *string {
	if t == nil {
		return nil
	}
	return t.ApprovalURL
}

func (t *TransactionPaymentMethod) GetCountry() *string {
	if t == nil {
		return nil
	}
	return t.Country
}

func (t *TransactionPaymentMethod) GetCurrency() *string {
	if t == nil {
		return nil
	}
	return t.Currency
}

func (t *TransactionPaymentMethod) GetDetails() *PaymentMethodDetailsCard {
	if t == nil {
		return nil
	}
	return t.Details
}

func (t *TransactionPaymentMethod) GetExpirationDate() *string {
	if t == nil {
		return nil
	}
	return t.ExpirationDate
}

func (t *TransactionPaymentMethod) GetFingerprint() *string {
	if t == nil {
		return nil
	}
	return t.Fingerprint
}

func (t *TransactionPaymentMethod) GetLabel() *string {
	if t == nil {
		return nil
	}
	return t.Label
}

func (t *TransactionPaymentMethod) GetLastReplacedAt() *time.Time {
	if t == nil {
		return nil
	}
	return t.LastReplacedAt
}

func (t *TransactionPaymentMethod) GetMethod() Method {
	if t == nil {
		return Method("")
	}
	return t.Method
}

func (t *TransactionPaymentMethod) GetMode() *Mode {
	if t == nil {
		return nil
	}
	return t.Mode
}

func (t *TransactionPaymentMethod) GetScheme() *CardScheme {
	if t == nil {
		return nil
	}
	return t.Scheme
}

func (t *TransactionPaymentMethod) GetID() *string {
	if t == nil {
		return nil
	}
	return t.ID
}

func (t *TransactionPaymentMethod) GetApprovalTarget() *ApprovalTarget {
	if t == nil {
		return nil
	}
	return t.ApprovalTarget
}

func (t *TransactionPaymentMethod) GetExternalIdentifier() *string {
	if t == nil {
		return nil
	}
	return t.ExternalIdentifier
}

func (t *TransactionPaymentMethod) GetPaymentAccountReference() *string {
	if t == nil {
		return nil
	}
	return t.PaymentAccountReference
}
