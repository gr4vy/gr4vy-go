// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"time"
)

type RouteType string

const (
	RouteTypeRoundTrip RouteType = "round_trip"
	RouteTypeOneWay    RouteType = "one_way"
)

func (e RouteType) ToPointer() *RouteType {
	return &e
}

type AirlineLeg struct {
	// Arrival airport code of leg. 3-letter ISO code according to IATA official directory.
	ArrivalAirport *string `json:"arrival_airport,omitempty"`
	// The date and time of travel in local time at the arrival airport.
	ArrivalAt *time.Time `json:"arrival_at,omitempty"`
	// Arrival city name.
	ArrivalCity *string `json:"arrival_city,omitempty"`
	// Arrival country code in ISO 3166 format.
	ArrivalCountry *string `json:"arrival_country,omitempty"`
	// 3 character airline code as set by IATA.
	CarrierCode *string `json:"carrier_code,omitempty"`
	// Name of the airline.
	CarrierName *string `json:"carrier_name,omitempty"`
	// Two-character IATA code of the airline.
	IataDesignator *string `json:"iata_designator,omitempty"`
	// Three-character ICAO code of the airline.
	IcaoCode *string `json:"icao_code,omitempty"`
	// Coupon number associated with the leg.
	CouponNumber *string `json:"coupon_number,omitempty"`
	// Departure airport code of leg. 3-letter ISO code according to IATA official directory.
	DepartureAirport *string `json:"departure_airport,omitempty"`
	// The date and time of travel in local time at the departure airport.
	DepartureAt *time.Time `json:"departure_at,omitempty"`
	// Departure city name.
	DepartureCity *string `json:"departure_city,omitempty"`
	// Departure airport code of leg. 3-letter ISO code according to IATA official directory.
	DepartureCountry *string `json:"departure_country,omitempty"`
	// Departure tax amount charged by a country when a person is leaving the country.
	DepartureTaxAmount *int64 `json:"departure_tax_amount,omitempty"`
	// Amount of the ticket, for current leg of the trip, excluding taxes and fees.
	FareAmount *int64 `json:"fare_amount,omitempty"`
	// The alphanumeric code for the booking class of a ticket.
	FareBasisCode *string `json:"fare_basis_code,omitempty"`
	// Fee amount for current leg of the trip.
	FeeAmount *int64 `json:"fee_amount,omitempty"`
	// Indicates service class (first class, business class, etc.).
	FlightClass *string `json:"flight_class,omitempty"`
	// Unique identifier of the flight number.
	FlightNumber *string `json:"flight_number,omitempty"`
	// The route type of the flight.
	RouteType *RouteType `json:"route_type,omitempty"`
	// Indicates seat class (first class, business class, etc.).
	SeatClass *string `json:"seat_class,omitempty"`
	// Indicates whether a stopover is allowed on this ticket.
	StopOver *bool `json:"stop_over,omitempty"`
	// Amount of the taxes for current leg of the trip.
	TaxAmount *int64 `json:"tax_amount,omitempty"`
}

func (a AirlineLeg) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AirlineLeg) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (a *AirlineLeg) GetArrivalAirport() *string {
	if a == nil {
		return nil
	}
	return a.ArrivalAirport
}

func (a *AirlineLeg) GetArrivalAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.ArrivalAt
}

func (a *AirlineLeg) GetArrivalCity() *string {
	if a == nil {
		return nil
	}
	return a.ArrivalCity
}

func (a *AirlineLeg) GetArrivalCountry() *string {
	if a == nil {
		return nil
	}
	return a.ArrivalCountry
}

func (a *AirlineLeg) GetCarrierCode() *string {
	if a == nil {
		return nil
	}
	return a.CarrierCode
}

func (a *AirlineLeg) GetCarrierName() *string {
	if a == nil {
		return nil
	}
	return a.CarrierName
}

func (a *AirlineLeg) GetIataDesignator() *string {
	if a == nil {
		return nil
	}
	return a.IataDesignator
}

func (a *AirlineLeg) GetIcaoCode() *string {
	if a == nil {
		return nil
	}
	return a.IcaoCode
}

func (a *AirlineLeg) GetCouponNumber() *string {
	if a == nil {
		return nil
	}
	return a.CouponNumber
}

func (a *AirlineLeg) GetDepartureAirport() *string {
	if a == nil {
		return nil
	}
	return a.DepartureAirport
}

func (a *AirlineLeg) GetDepartureAt() *time.Time {
	if a == nil {
		return nil
	}
	return a.DepartureAt
}

func (a *AirlineLeg) GetDepartureCity() *string {
	if a == nil {
		return nil
	}
	return a.DepartureCity
}

func (a *AirlineLeg) GetDepartureCountry() *string {
	if a == nil {
		return nil
	}
	return a.DepartureCountry
}

func (a *AirlineLeg) GetDepartureTaxAmount() *int64 {
	if a == nil {
		return nil
	}
	return a.DepartureTaxAmount
}

func (a *AirlineLeg) GetFareAmount() *int64 {
	if a == nil {
		return nil
	}
	return a.FareAmount
}

func (a *AirlineLeg) GetFareBasisCode() *string {
	if a == nil {
		return nil
	}
	return a.FareBasisCode
}

func (a *AirlineLeg) GetFeeAmount() *int64 {
	if a == nil {
		return nil
	}
	return a.FeeAmount
}

func (a *AirlineLeg) GetFlightClass() *string {
	if a == nil {
		return nil
	}
	return a.FlightClass
}

func (a *AirlineLeg) GetFlightNumber() *string {
	if a == nil {
		return nil
	}
	return a.FlightNumber
}

func (a *AirlineLeg) GetRouteType() *RouteType {
	if a == nil {
		return nil
	}
	return a.RouteType
}

func (a *AirlineLeg) GetSeatClass() *string {
	if a == nil {
		return nil
	}
	return a.SeatClass
}

func (a *AirlineLeg) GetStopOver() *bool {
	if a == nil {
		return nil
	}
	return a.StopOver
}

func (a *AirlineLeg) GetTaxAmount() *int64 {
	if a == nil {
		return nil
	}
	return a.TaxAmount
}
