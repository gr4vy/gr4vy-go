// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type CardSource string

const (
	CardSourceApplePay  CardSource = "apple-pay"
	CardSourceGooglePay CardSource = "google-pay"
)

func (e CardSource) ToPointer() *CardSource {
	return &e
}

type NetworkTokenPaymentMethodCreate struct {
	// Always `network-token`.
	method string `const:"network-token" json:"method"`
	// The scheme token.
	Token string `json:"token"`
	// The expiration date of the token.
	ExpirationDate string `json:"expiration_date"`
	// The payment cryptogram for the network token.
	Cryptogram *string `json:"cryptogram,omitempty"`
	// The URL to redirect a user back to after the complete 3DS in browser.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The optional source of the decrypted device token.
	CardSource *CardSource `json:"card_source,omitempty"`
	// The original card scheme for which the token was generated.
	CardScheme *CardScheme `json:"card_scheme,omitempty"`
	// The last 4 digits of the original card used to generate the token.
	CardSuffix *string `json:"card_suffix,omitempty"`
	// The card holder name associated to the original card for the token.
	CardholderName *string `json:"cardholder_name,omitempty"`
	// The ecommerce indicator for the token.
	Eci *string `json:"eci,omitempty"`
}

func (n NetworkTokenPaymentMethodCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NetworkTokenPaymentMethodCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, []string{"method", "token", "expiration_date"}); err != nil {
		return err
	}
	return nil
}

func (o *NetworkTokenPaymentMethodCreate) GetMethod() string {
	return "network-token"
}

func (o *NetworkTokenPaymentMethodCreate) GetToken() string {
	if o == nil {
		return ""
	}
	return o.Token
}

func (o *NetworkTokenPaymentMethodCreate) GetExpirationDate() string {
	if o == nil {
		return ""
	}
	return o.ExpirationDate
}

func (o *NetworkTokenPaymentMethodCreate) GetCryptogram() *string {
	if o == nil {
		return nil
	}
	return o.Cryptogram
}

func (o *NetworkTokenPaymentMethodCreate) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *NetworkTokenPaymentMethodCreate) GetCardSource() *CardSource {
	if o == nil {
		return nil
	}
	return o.CardSource
}

func (o *NetworkTokenPaymentMethodCreate) GetCardScheme() *CardScheme {
	if o == nil {
		return nil
	}
	return o.CardScheme
}

func (o *NetworkTokenPaymentMethodCreate) GetCardSuffix() *string {
	if o == nil {
		return nil
	}
	return o.CardSuffix
}

func (o *NetworkTokenPaymentMethodCreate) GetCardholderName() *string {
	if o == nil {
		return nil
	}
	return o.CardholderName
}

func (o *NetworkTokenPaymentMethodCreate) GetEci() *string {
	if o == nil {
		return nil
	}
	return o.Eci
}
