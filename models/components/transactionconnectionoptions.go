// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

type TransactionConnectionOptions struct {
	// Custom options to be passed to the `account-updater` connector, allowing for simulating different account updater responses.
	AccountUpdater *AccountUpdaterOptions `json:"account-updater,omitempty"`
	// Custom options to be passed to the `adyen-afterpay` connector.
	AdyenAfterpay *AdyenOptions `json:"adyen-afterpay,omitempty"`
	// Custom options to be passed to the `adyen-alipay` connector.
	AdyenAlipay *AdyenOptions `json:"adyen-alipay,omitempty"`
	// Custom options to be passed to the `adyen-card` connector.
	AdyenCard *AdyenCardOptions `json:"adyen-card,omitempty"`
	// Custom options to be passed to the `adyen-cashapp` connector.
	AdyenCashapp *AdyenOptions `json:"adyen-cashapp,omitempty"`
	// Custom options to be passed to the `adyen-giropay` connector.
	AdyenGiropay *AdyenOptions `json:"adyen-giropay,omitempty"`
	// Custom options to be passed to the `adyen-ideal` connector.
	AdyenIdeal *AdyenOptions `json:"adyen-ideal,omitempty"`
	// Custom options to be passed to the `adyen-sepa` connector.
	AdyenSepa *AdyenSepaOptions `json:"adyen-sepa,omitempty"`
	// Custom options to be passed to the `adyen-sofort` connector.
	AdyenSofort *AdyenOptions `json:"adyen-sofort,omitempty"`
	// Custom options to be passed to the `adyen-vipps` connector.
	AdyenVipps *AdyenOptions `json:"adyen-vipps,omitempty"`
	// Custom options to be passed to the `affirm-affirm` connector.
	AffirmAffirm *AffirmOptions `json:"affirm-affirm,omitempty"`
	// Custom options to be passed to the `braintree-card` connector.
	BraintreeCard *BraintreeOptions `json:"braintree-card,omitempty"`
	// Custom options to be passed to the `cybersource-anti-fraud` connector.
	CybersourceAntiFraud *CybersourceAntiFraudOptions `json:"cybersource-anti-fraud,omitempty"`
	// Custom options to be passed to the `cybersource-card` connector.
	CybersourceCard *CybersourceOptions `json:"cybersource-card,omitempty"`
	// Custom options to be passed to the `cybersource-ideal` connector.
	CybersourceIdeal *CybersourceOptions `json:"cybersource-ideal,omitempty"`
	// Custom options to be passed to the `cybersource-kcp` connector.
	CybersourceKcp *CybersourceOptions `json:"cybersource-kcp,omitempty"`
	// Custom options to be passed to the `dlocal-nequi` connector.
	DlocalNequi *DlocalOptions `json:"dlocal-nequi,omitempty"`
	// Custom options to be passed to the `fiserv-card` connector.
	FiservCard *FiservOptions `json:"fiserv-card,omitempty"`
	// Custom options to be passed to the `forter-anti-fraud` connector.
	ForterAntiFraud *ForterAntiFraudOptions `json:"forter-anti-fraud,omitempty"`
	// Custom options to be passed to the `gem-gem` connector.
	GemGem *LatitudeOptions `json:"gem-gem,omitempty"`
	// Custom options to be passed to the `gem-gemds` connector.
	GemGemds *LatitudeOptions `json:"gem-gemds,omitempty"`
	// Custom options to be passed to the `givingblock-givingblock` connector.
	GivingblockGivingblock *GivingBlockOptions `json:"givingblock-givingblock,omitempty"`
	// Custom options to be passed to the `latitude-latitude` connector.
	LatitudeLatitude *LatitudeOptions `json:"latitude-latitude,omitempty"`
	// Custom options to be passed to the `latitude-latitudeds` connector.
	LatitudeLatitudeds *LatitudeOptions `json:"latitude-latitudeds,omitempty"`
	// Custom options to be passed to the `mattilda-tapi` connector.
	MattildaTapi *MattildaTapiOptions `json:"mattilda-tapi,omitempty"`
	// Custom options to be passed to the `mattilda-tapifintechs` connector.
	MattildaTapifintechs *MattildaTapiOptions `json:"mattilda-tapifintechs,omitempty"`
	// Custom options to be passed to the `mock-card` connector.
	MockCard *MockCardOptions `json:"mock-card,omitempty"`
	// Custom options to be passed to the `nuvei-card` connector.
	NuveiCard *NuveiOptions `json:"nuvei-card,omitempty"`
	// Custom options to be passed to the `oxxo-oxxo` connector.
	OxxoOxxo *OxxoOptions `json:"oxxo-oxxo,omitempty"`
	// Custom options to be passed to the `paypal-paypal` connector.
	PaypalPaypal *PaypalOptions `json:"paypal-paypal,omitempty"`
	// Custom options to be passed to the `paypal-paypalpaylater` connector.
	PaypalPaypalpaylater *PaypalOptions `json:"paypal-paypalpaylater,omitempty"`
	// Custom options to be passed to the `powertranz-card` connector.
	PowertranzCard *PowertranzOptions `json:"powertranz-card,omitempty"`
	// Custom options to be passed to the `stripe-card` connector.
	StripeCard *StripeOptions `json:"stripe-card,omitempty"`
	// Custom options to be passed to the `travelhub-card` connector.
	TravelhubCard *TravelhubOptions `json:"travelhub-card,omitempty"`
	// Custom options to be passed to the `trustly-trustly` connector.
	TrustlyTrustly *TrustlyOptions `json:"trustly-trustly,omitempty"`
	// Custom options to be passed to the `wpay-everydaypay` connector.
	WpayEverydaypay *WpayEverdaypayOptions `json:"wpay-everydaypay,omitempty"`
	// Custom options to be passed to the `wpay-payto` connector.
	WpayPayto *WpayPaytoOptions `json:"wpay-payto,omitempty"`
}

func (o *TransactionConnectionOptions) GetAccountUpdater() *AccountUpdaterOptions {
	if o == nil {
		return nil
	}
	return o.AccountUpdater
}

func (o *TransactionConnectionOptions) GetAdyenAfterpay() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenAfterpay
}

func (o *TransactionConnectionOptions) GetAdyenAlipay() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenAlipay
}

func (o *TransactionConnectionOptions) GetAdyenCard() *AdyenCardOptions {
	if o == nil {
		return nil
	}
	return o.AdyenCard
}

func (o *TransactionConnectionOptions) GetAdyenCashapp() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenCashapp
}

func (o *TransactionConnectionOptions) GetAdyenGiropay() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenGiropay
}

func (o *TransactionConnectionOptions) GetAdyenIdeal() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenIdeal
}

func (o *TransactionConnectionOptions) GetAdyenSepa() *AdyenSepaOptions {
	if o == nil {
		return nil
	}
	return o.AdyenSepa
}

func (o *TransactionConnectionOptions) GetAdyenSofort() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenSofort
}

func (o *TransactionConnectionOptions) GetAdyenVipps() *AdyenOptions {
	if o == nil {
		return nil
	}
	return o.AdyenVipps
}

func (o *TransactionConnectionOptions) GetAffirmAffirm() *AffirmOptions {
	if o == nil {
		return nil
	}
	return o.AffirmAffirm
}

func (o *TransactionConnectionOptions) GetBraintreeCard() *BraintreeOptions {
	if o == nil {
		return nil
	}
	return o.BraintreeCard
}

func (o *TransactionConnectionOptions) GetCybersourceAntiFraud() *CybersourceAntiFraudOptions {
	if o == nil {
		return nil
	}
	return o.CybersourceAntiFraud
}

func (o *TransactionConnectionOptions) GetCybersourceCard() *CybersourceOptions {
	if o == nil {
		return nil
	}
	return o.CybersourceCard
}

func (o *TransactionConnectionOptions) GetCybersourceIdeal() *CybersourceOptions {
	if o == nil {
		return nil
	}
	return o.CybersourceIdeal
}

func (o *TransactionConnectionOptions) GetCybersourceKcp() *CybersourceOptions {
	if o == nil {
		return nil
	}
	return o.CybersourceKcp
}

func (o *TransactionConnectionOptions) GetDlocalNequi() *DlocalOptions {
	if o == nil {
		return nil
	}
	return o.DlocalNequi
}

func (o *TransactionConnectionOptions) GetFiservCard() *FiservOptions {
	if o == nil {
		return nil
	}
	return o.FiservCard
}

func (o *TransactionConnectionOptions) GetForterAntiFraud() *ForterAntiFraudOptions {
	if o == nil {
		return nil
	}
	return o.ForterAntiFraud
}

func (o *TransactionConnectionOptions) GetGemGem() *LatitudeOptions {
	if o == nil {
		return nil
	}
	return o.GemGem
}

func (o *TransactionConnectionOptions) GetGemGemds() *LatitudeOptions {
	if o == nil {
		return nil
	}
	return o.GemGemds
}

func (o *TransactionConnectionOptions) GetGivingblockGivingblock() *GivingBlockOptions {
	if o == nil {
		return nil
	}
	return o.GivingblockGivingblock
}

func (o *TransactionConnectionOptions) GetLatitudeLatitude() *LatitudeOptions {
	if o == nil {
		return nil
	}
	return o.LatitudeLatitude
}

func (o *TransactionConnectionOptions) GetLatitudeLatitudeds() *LatitudeOptions {
	if o == nil {
		return nil
	}
	return o.LatitudeLatitudeds
}

func (o *TransactionConnectionOptions) GetMattildaTapi() *MattildaTapiOptions {
	if o == nil {
		return nil
	}
	return o.MattildaTapi
}

func (o *TransactionConnectionOptions) GetMattildaTapifintechs() *MattildaTapiOptions {
	if o == nil {
		return nil
	}
	return o.MattildaTapifintechs
}

func (o *TransactionConnectionOptions) GetMockCard() *MockCardOptions {
	if o == nil {
		return nil
	}
	return o.MockCard
}

func (o *TransactionConnectionOptions) GetNuveiCard() *NuveiOptions {
	if o == nil {
		return nil
	}
	return o.NuveiCard
}

func (o *TransactionConnectionOptions) GetOxxoOxxo() *OxxoOptions {
	if o == nil {
		return nil
	}
	return o.OxxoOxxo
}

func (o *TransactionConnectionOptions) GetPaypalPaypal() *PaypalOptions {
	if o == nil {
		return nil
	}
	return o.PaypalPaypal
}

func (o *TransactionConnectionOptions) GetPaypalPaypalpaylater() *PaypalOptions {
	if o == nil {
		return nil
	}
	return o.PaypalPaypalpaylater
}

func (o *TransactionConnectionOptions) GetPowertranzCard() *PowertranzOptions {
	if o == nil {
		return nil
	}
	return o.PowertranzCard
}

func (o *TransactionConnectionOptions) GetStripeCard() *StripeOptions {
	if o == nil {
		return nil
	}
	return o.StripeCard
}

func (o *TransactionConnectionOptions) GetTravelhubCard() *TravelhubOptions {
	if o == nil {
		return nil
	}
	return o.TravelhubCard
}

func (o *TransactionConnectionOptions) GetTrustlyTrustly() *TrustlyOptions {
	if o == nil {
		return nil
	}
	return o.TrustlyTrustly
}

func (o *TransactionConnectionOptions) GetWpayEverydaypay() *WpayEverdaypayOptions {
	if o == nil {
		return nil
	}
	return o.WpayEverydaypay
}

func (o *TransactionConnectionOptions) GetWpayPayto() *WpayPaytoOptions {
	if o == nil {
		return nil
	}
	return o.WpayPayto
}
