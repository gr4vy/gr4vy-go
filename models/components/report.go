// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/types"
	"time"
)

type Report struct {
	// Always `report`.
	type_ *string `const:"report" json:"type"`
	// The unique ID for the report.
	ID string `json:"id"`
	// The merchant account ID this report belongs to.
	MerchantAccountID string `json:"merchant_account_id"`
	// The name of the report.
	Name string `json:"name"`
	// The ID of the user who created the report.
	CreatorID *string `json:"creator_id,omitempty"`
	// The display name of the report creator.
	CreatorDisplayName *string `json:"creator_display_name,omitempty"`
	// The type of the report creator.
	CreatorType *ReportCreatorType `json:"creator_type,omitempty"`
	// The date this report was created at.
	CreatedAt time.Time `json:"created_at"`
	// The date this report was last updated.
	UpdatedAt time.Time `json:"updated_at"`
	// The next scheduled execution time for the report.
	NextExecutionAt *time.Time `json:"next_execution_at,omitempty"`
	// A description of the report.
	Description *string        `json:"description,omitempty"`
	Schedule    ReportSchedule `json:"schedule"`
	// Whether the report schedule is enabled.
	ScheduleEnabled bool `json:"schedule_enabled"`
	// The timezone for the report schedule.
	ScheduleTimezone string     `json:"schedule_timezone"`
	Spec             ReportSpec `json:"spec"`
	// The latest execution summary for the report.
	LatestExecution *ReportExecutionSummary `json:"latest_execution,omitempty"`
}

func (r Report) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Report) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"id", "merchant_account_id", "name", "created_at", "updated_at", "schedule", "schedule_enabled", "schedule_timezone", "spec"}); err != nil {
		return err
	}
	return nil
}

func (r *Report) GetType() *string {
	return types.Pointer("report")
}

func (r *Report) GetID() string {
	if r == nil {
		return ""
	}
	return r.ID
}

func (r *Report) GetMerchantAccountID() string {
	if r == nil {
		return ""
	}
	return r.MerchantAccountID
}

func (r *Report) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *Report) GetCreatorID() *string {
	if r == nil {
		return nil
	}
	return r.CreatorID
}

func (r *Report) GetCreatorDisplayName() *string {
	if r == nil {
		return nil
	}
	return r.CreatorDisplayName
}

func (r *Report) GetCreatorType() *ReportCreatorType {
	if r == nil {
		return nil
	}
	return r.CreatorType
}

func (r *Report) GetCreatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.CreatedAt
}

func (r *Report) GetUpdatedAt() time.Time {
	if r == nil {
		return time.Time{}
	}
	return r.UpdatedAt
}

func (r *Report) GetNextExecutionAt() *time.Time {
	if r == nil {
		return nil
	}
	return r.NextExecutionAt
}

func (r *Report) GetDescription() *string {
	if r == nil {
		return nil
	}
	return r.Description
}

func (r *Report) GetSchedule() ReportSchedule {
	if r == nil {
		return ReportSchedule("")
	}
	return r.Schedule
}

func (r *Report) GetScheduleEnabled() bool {
	if r == nil {
		return false
	}
	return r.ScheduleEnabled
}

func (r *Report) GetScheduleTimezone() string {
	if r == nil {
		return ""
	}
	return r.ScheduleTimezone
}

func (r *Report) GetSpec() ReportSpec {
	if r == nil {
		return ReportSpec{}
	}
	return r.Spec
}

func (r *Report) GetLatestExecution() *ReportExecutionSummary {
	if r == nil {
		return nil
	}
	return r.LatestExecution
}
