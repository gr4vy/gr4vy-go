// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

type TokenType string

const (
	TokenTypeStr      TokenType = "str"
	TokenTypeMapOfAny TokenType = "mapOfAny"
)

// Token - The opaque token as received from the Google Pay JS library. This format may change between JS library versions.
type Token struct {
	Str      *string        `queryParam:"inline"`
	MapOfAny map[string]any `queryParam:"inline"`

	Type TokenType
}

func CreateTokenStr(str string) Token {
	typ := TokenTypeStr

	return Token{
		Str:  &str,
		Type: typ,
	}
}

func CreateTokenMapOfAny(mapOfAny map[string]any) Token {
	typ := TokenTypeMapOfAny

	return Token{
		MapOfAny: mapOfAny,
		Type:     typ,
	}
}

func (u *Token) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TokenTypeStr
		return nil
	}

	var mapOfAny map[string]any = map[string]any{}
	if err := utils.UnmarshalJSON(data, &mapOfAny, "", true, true); err == nil {
		u.MapOfAny = mapOfAny
		u.Type = TokenTypeMapOfAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Token", string(data))
}

func (u Token) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.MapOfAny != nil {
		return utils.MarshalJSON(u.MapOfAny, "", true)
	}

	return nil, errors.New("could not marshal union type Token: all fields are null")
}

// GooglePayPaymentMethodCreate - Create a Google Pay transaction with a device token.
type GooglePayPaymentMethodCreate struct {
	// The external identifier of the buyer to create a payment for.
	BuyerExternalIdentifier *string `json:"buyer_external_identifier,omitempty"`
	// The ID of the buyer to retrieve billing details for.
	BuyerID *string `json:"buyer_id,omitempty"`
	// The card holder name associated to the original card for the token.
	CardholderName *string `json:"cardholder_name,omitempty"`
	// The URL to redirect a user back to after the complete 3DS in browser.
	RedirectURL *string `json:"redirect_url,omitempty"`
	// The last 4 digits of the original card used to generate the token.
	CardSuffix *string `json:"card_suffix,omitempty"`
	// The original card scheme for which the token was generated.
	CardScheme *string `json:"card_scheme,omitempty"`
	// The payment scheme of the card.
	CardType *string `json:"card_type,omitempty"`
	// Always `googlepay`
	method string `const:"googlepay" json:"method"`
	// The opaque token as received from the Google Pay JS library. This format may change between JS library versions.
	Token Token `json:"token"`
	// The assurance details provided by Google Pay
	AssuranceDetails *GooglePayAssuranceDetails `json:"assurance_details,omitempty"`
}

func (g GooglePayPaymentMethodCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GooglePayPaymentMethodCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GooglePayPaymentMethodCreate) GetBuyerExternalIdentifier() *string {
	if o == nil {
		return nil
	}
	return o.BuyerExternalIdentifier
}

func (o *GooglePayPaymentMethodCreate) GetBuyerID() *string {
	if o == nil {
		return nil
	}
	return o.BuyerID
}

func (o *GooglePayPaymentMethodCreate) GetCardholderName() *string {
	if o == nil {
		return nil
	}
	return o.CardholderName
}

func (o *GooglePayPaymentMethodCreate) GetRedirectURL() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURL
}

func (o *GooglePayPaymentMethodCreate) GetCardSuffix() *string {
	if o == nil {
		return nil
	}
	return o.CardSuffix
}

func (o *GooglePayPaymentMethodCreate) GetCardScheme() *string {
	if o == nil {
		return nil
	}
	return o.CardScheme
}

func (o *GooglePayPaymentMethodCreate) GetCardType() *string {
	if o == nil {
		return nil
	}
	return o.CardType
}

func (o *GooglePayPaymentMethodCreate) GetMethod() string {
	return "googlepay"
}

func (o *GooglePayPaymentMethodCreate) GetToken() Token {
	if o == nil {
		return Token{}
	}
	return o.Token
}

func (o *GooglePayPaymentMethodCreate) GetAssuranceDetails() *GooglePayAssuranceDetails {
	if o == nil {
		return nil
	}
	return o.AssuranceDetails
}
