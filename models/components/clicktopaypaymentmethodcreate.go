// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
)

// ClickToPayPaymentMethodCreate - Create a Click to Pay payment with a decrypted token and cryptogram. This
// is mainly used internally but can be used by anyone with their own C2P
// integration.
type ClickToPayPaymentMethodCreate struct {
	// Aways `click-to-pay`.
	method string `const:"click-to-pay" json:"method"`
	// The device token.
	Token string `json:"token"`
	// The payment cryptogram for the device token.
	Cryptogram string `json:"cryptogram"`
	// The expiration date of the device token.
	ExpirationDate string `json:"expiration_date"`
	//  The ID of the buyer to associate this transaction to.
	BuyerID *string `json:"buyer_id,omitempty"`
	// The external identifier of the buyer to create a transaction for.
	BuyerExternalIdentifier *string `json:"buyer_external_identifier,omitempty"`
	// The external identifier of the payment method to filter by.
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	// The URL to redirect a user back to after the complete 3DS in browser.
	RedirectURL *string `json:"redirect_url,omitempty"`
}

func (c ClickToPayPaymentMethodCreate) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ClickToPayPaymentMethodCreate) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"method", "token", "cryptogram", "expiration_date"}); err != nil {
		return err
	}
	return nil
}

func (c *ClickToPayPaymentMethodCreate) GetMethod() string {
	return "click-to-pay"
}

func (c *ClickToPayPaymentMethodCreate) GetToken() string {
	if c == nil {
		return ""
	}
	return c.Token
}

func (c *ClickToPayPaymentMethodCreate) GetCryptogram() string {
	if c == nil {
		return ""
	}
	return c.Cryptogram
}

func (c *ClickToPayPaymentMethodCreate) GetExpirationDate() string {
	if c == nil {
		return ""
	}
	return c.ExpirationDate
}

func (c *ClickToPayPaymentMethodCreate) GetBuyerID() *string {
	if c == nil {
		return nil
	}
	return c.BuyerID
}

func (c *ClickToPayPaymentMethodCreate) GetBuyerExternalIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.BuyerExternalIdentifier
}

func (c *ClickToPayPaymentMethodCreate) GetExternalIdentifier() *string {
	if c == nil {
		return nil
	}
	return c.ExternalIdentifier
}

func (c *ClickToPayPaymentMethodCreate) GetRedirectURL() *string {
	if c == nil {
		return nil
	}
	return c.RedirectURL
}
