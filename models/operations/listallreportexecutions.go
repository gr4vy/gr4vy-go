// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
	"time"
)

type ListAllReportExecutionsGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l *ListAllReportExecutionsGlobals) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListAllReportExecutionsRequest struct {
	// A pointer to the page of results to return.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// The maximum number of items that are at returned.
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// Filters the reports by searching their name for (partial) matches.
	ReportName *string `queryParam:"style=form,explode=true,name=report_name"`
	// Filters the results to only reports created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	CreatedAtLte *time.Time `queryParam:"style=form,explode=true,name=created_at_lte"`
	// Filters the results to only reports created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	CreatedAtGte *time.Time `queryParam:"style=form,explode=true,name=created_at_gte"`
	// Filters the results to only the reports that have a `status` that matches with any of the provided status values.
	Status []components.ReportExecutionStatus `queryParam:"style=form,explode=true,name=status"`
	// Filters the results to only the reports that were created by the users with these IDs.
	CreatorID []string `queryParam:"style=form,explode=true,name=creator_id"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l ListAllReportExecutionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListAllReportExecutionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListAllReportExecutionsRequest) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListAllReportExecutionsRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListAllReportExecutionsRequest) GetReportName() *string {
	if l == nil {
		return nil
	}
	return l.ReportName
}

func (l *ListAllReportExecutionsRequest) GetCreatedAtLte() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtLte
}

func (l *ListAllReportExecutionsRequest) GetCreatedAtGte() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtGte
}

func (l *ListAllReportExecutionsRequest) GetStatus() []components.ReportExecutionStatus {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *ListAllReportExecutionsRequest) GetCreatorID() []string {
	if l == nil {
		return nil
	}
	return l.CreatorID
}

func (l *ListAllReportExecutionsRequest) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListAllReportExecutionsResponse struct {
	Result components.ReportExecutions

	Next func() (*ListAllReportExecutionsResponse, error)
}

func (l *ListAllReportExecutionsResponse) GetResult() components.ReportExecutions {
	if l == nil {
		return components.ReportExecutions{}
	}
	return l.Result
}
