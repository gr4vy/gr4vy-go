// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type ListReportsGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l *ListReportsGlobals) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListReportsRequest struct {
	// A pointer to the page of results to return.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// The maximum number of items that are at returned.
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// Filters the reports by the type of schedule at which they run.
	Schedule []components.ReportSchedule `queryParam:"style=form,explode=true,name=schedule"`
	// Filters the reports by wether their schedule is enabled.
	ScheduleEnabled *bool `queryParam:"style=form,explode=true,name=schedule_enabled"`
	// Filters the reports by searching their name for (partial) matches.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l ListReportsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListReportsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListReportsRequest) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListReportsRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListReportsRequest) GetSchedule() []components.ReportSchedule {
	if l == nil {
		return nil
	}
	return l.Schedule
}

func (l *ListReportsRequest) GetScheduleEnabled() *bool {
	if l == nil {
		return nil
	}
	return l.ScheduleEnabled
}

func (l *ListReportsRequest) GetName() *string {
	if l == nil {
		return nil
	}
	return l.Name
}

func (l *ListReportsRequest) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListReportsResponse struct {
	Result components.Reports

	Next func() (*ListReportsResponse, error)
}

func (l *ListReportsResponse) GetResult() components.Reports {
	if l == nil {
		return components.Reports{}
	}
	return l.Result
}
