// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type CreateTransactionGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (o *CreateTransactionGlobals) GetMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantAccountID
}

type CreateTransactionRequest struct {
	TimeoutInSeconds *float64 `default:"1" queryParam:"style=form,explode=true,name=timeout_in_seconds"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
	// A unique key that identifies this request. Providing this header will make this an idempotent request. We recommend using V4 UUIDs, or another random string with enough entropy to avoid collisions.
	IdempotencyKey    *string                      `header:"style=simple,explode=false,name=idempotency-key"`
	TransactionCreate components.TransactionCreate `request:"mediaType=application/json"`
}

func (c CreateTransactionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateTransactionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateTransactionRequest) GetTimeoutInSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeoutInSeconds
}

func (o *CreateTransactionRequest) GetMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.MerchantAccountID
}

func (o *CreateTransactionRequest) GetIdempotencyKey() *string {
	if o == nil {
		return nil
	}
	return o.IdempotencyKey
}

func (o *CreateTransactionRequest) GetTransactionCreate() components.TransactionCreate {
	if o == nil {
		return components.TransactionCreate{}
	}
	return o.TransactionCreate
}

type CreateTransactionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Returns the transaction.
	Transaction *components.Transaction
}

func (o *CreateTransactionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateTransactionResponse) GetTransaction() *components.Transaction {
	if o == nil {
		return nil
	}
	return o.Transaction
}
