// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type CaptureTransactionGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (c *CaptureTransactionGlobals) GetMerchantAccountID() *string {
	if c == nil {
		return nil
	}
	return c.MerchantAccountID
}

type CaptureTransactionRequest struct {
	// The ID of the transaction
	TransactionID string `pathParam:"style=simple,explode=false,name=transaction_id"`
	// The preferred resource type in the response.
	Prefer []string `header:"style=simple,explode=false,name=prefer"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID        *string                             `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
	TransactionCaptureCreate components.TransactionCaptureCreate `request:"mediaType=application/json"`
}

func (c *CaptureTransactionRequest) GetTransactionID() string {
	if c == nil {
		return ""
	}
	return c.TransactionID
}

func (c *CaptureTransactionRequest) GetPrefer() []string {
	if c == nil {
		return nil
	}
	return c.Prefer
}

func (c *CaptureTransactionRequest) GetMerchantAccountID() *string {
	if c == nil {
		return nil
	}
	return c.MerchantAccountID
}

func (c *CaptureTransactionRequest) GetTransactionCaptureCreate() components.TransactionCaptureCreate {
	if c == nil {
		return components.TransactionCaptureCreate{}
	}
	return c.TransactionCaptureCreate
}

type ResponseCaptureTransactionType string

const (
	ResponseCaptureTransactionTypeTransactionOutput        ResponseCaptureTransactionType = "Transaction-Output"
	ResponseCaptureTransactionTypeTransactionCaptureOutput ResponseCaptureTransactionType = "TransactionCapture-Output"
)

// ResponseCaptureTransaction - Successful Response
type ResponseCaptureTransaction struct {
	TransactionOutput        *components.TransactionOutput        `queryParam:"inline,name=Response_Capture_Transaction"`
	TransactionCaptureOutput *components.TransactionCaptureOutput `queryParam:"inline,name=Response_Capture_Transaction"`

	Type ResponseCaptureTransactionType
}

func CreateResponseCaptureTransactionTransactionOutput(transactionOutput components.TransactionOutput) ResponseCaptureTransaction {
	typ := ResponseCaptureTransactionTypeTransactionOutput

	return ResponseCaptureTransaction{
		TransactionOutput: &transactionOutput,
		Type:              typ,
	}
}

func CreateResponseCaptureTransactionTransactionCaptureOutput(transactionCaptureOutput components.TransactionCaptureOutput) ResponseCaptureTransaction {
	typ := ResponseCaptureTransactionTypeTransactionCaptureOutput

	return ResponseCaptureTransaction{
		TransactionCaptureOutput: &transactionCaptureOutput,
		Type:                     typ,
	}
}

func (u *ResponseCaptureTransaction) UnmarshalJSON(data []byte) error {

	var transactionOutput components.TransactionOutput = components.TransactionOutput{}
	if err := utils.UnmarshalJSON(data, &transactionOutput, "", true, nil); err == nil {
		u.TransactionOutput = &transactionOutput
		u.Type = ResponseCaptureTransactionTypeTransactionOutput
		return nil
	}

	var transactionCaptureOutput components.TransactionCaptureOutput = components.TransactionCaptureOutput{}
	if err := utils.UnmarshalJSON(data, &transactionCaptureOutput, "", true, nil); err == nil {
		u.TransactionCaptureOutput = &transactionCaptureOutput
		u.Type = ResponseCaptureTransactionTypeTransactionCaptureOutput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseCaptureTransaction", string(data))
}

func (u ResponseCaptureTransaction) MarshalJSON() ([]byte, error) {
	if u.TransactionOutput != nil {
		return utils.MarshalJSON(u.TransactionOutput, "", true)
	}

	if u.TransactionCaptureOutput != nil {
		return utils.MarshalJSON(u.TransactionCaptureOutput, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseCaptureTransaction: all fields are null")
}
