// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
	"time"
)

type ListTransactionsGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l *ListTransactionsGlobals) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListTransactionsRequest struct {
	// A pointer to the page of results to return.
	Cursor *string `queryParam:"style=form,explode=true,name=cursor"`
	// The maximum number of items that are at returned.
	Limit *int64 `default:"20" queryParam:"style=form,explode=true,name=limit"`
	// Filters the results to only transactions created before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	CreatedAtLte *time.Time `queryParam:"style=form,explode=true,name=created_at_lte"`
	// Filters the results to only transactions created after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	CreatedAtGte *time.Time `queryParam:"style=form,explode=true,name=created_at_gte"`
	// Filters the results to only transactions updated before this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	UpdatedAtLte *time.Time `queryParam:"style=form,explode=true,name=updated_at_lte"`
	// Filters the results to only transactions updated after this ISO date-time string. The time zone must be included. Ensure that the date-time string is URL encoded, e.g. `2022-01-01T12:00:00+08:00` must be encoded as `2022-01-01T12%3A00%3A00%2B08%3A00`.
	UpdatedAtGte            *time.Time `queryParam:"style=form,explode=true,name=updated_at_gte"`
	Search                  *string    `queryParam:"style=form,explode=true,name=search"`
	BuyerExternalIdentifier *string    `queryParam:"style=form,explode=true,name=buyer_external_identifier"`
	BuyerID                 *string    `queryParam:"style=form,explode=true,name=buyer_id"`
	BuyerEmailAddress       *string    `queryParam:"style=form,explode=true,name=buyer_email_address"`
	IPAddress               *string    `queryParam:"style=form,explode=true,name=ip_address"`
	// Filters the results to only the transactions that have a `status` that matches with any of the provided status values.
	Status                      []components.TransactionStatus `queryParam:"style=form,explode=true,name=status"`
	ID                          *string                        `queryParam:"style=form,explode=true,name=id"`
	PaymentServiceTransactionID *string                        `queryParam:"style=form,explode=true,name=payment_service_transaction_id"`
	ExternalIdentifier          *string                        `queryParam:"style=form,explode=true,name=external_identifier"`
	// Filters for transactions where their `metadata` values contain all of the provided `metadata` keys. The value sent for `metadata` must be formatted as a JSON string, and all keys and values must be strings. This value should also be URL encoded.
	Metadata []string `queryParam:"style=form,explode=true,name=metadata"`
	// Filters for transactions that have an `amount` that is equal to the provided `amount_eq` value.
	AmountEq *int64 `queryParam:"style=form,explode=true,name=amount_eq"`
	// Filters for transactions that have an `amount` that is less than or equal to the `amount_lte` value.
	AmountLte *int64 `queryParam:"style=form,explode=true,name=amount_lte"`
	// Filters for transactions that have an `amount` that is greater than or equal to the `amount_gte` value.
	AmountGte *int64 `queryParam:"style=form,explode=true,name=amount_gte"`
	// Filters for transactions that have matching `currency` values. The `currency` values provided must be formatted as 3-letter ISO currency code.
	Currency []string `queryParam:"style=form,explode=true,name=currency"`
	// Filters for transactions that have matching `country` values.
	Country []string `queryParam:"style=form,explode=true,name=country"`
	// Filters for transactions that were processed by the provided `payment_service_id` values.
	PaymentServiceID   []string `queryParam:"style=form,explode=true,name=payment_service_id"`
	PaymentMethodID    *string  `queryParam:"style=form,explode=true,name=payment_method_id"`
	PaymentMethodLabel *string  `queryParam:"style=form,explode=true,name=payment_method_label"`
	// Filters for transactions where the `payment_method_scheme` matches one of the provided values.
	PaymentMethodScheme []string `queryParam:"style=form,explode=true,name=payment_method_scheme"`
	// Filters for transactions that have a payment method with a country that matches with the provided value.
	PaymentMethodCountry     *string `queryParam:"style=form,explode=true,name=payment_method_country"`
	PaymentMethodFingerprint *string `queryParam:"style=form,explode=true,name=payment_method_fingerprint"`
	// Filters for transactions that have matching `method` values.
	Method []components.Method `queryParam:"style=form,explode=true,name=method"`
	// Filters for transactions where the `error_code` matches one for the provided values.
	ErrorCode []string `queryParam:"style=form,explode=true,name=error_code"`
	// Filters for transactions with refunds.
	HasRefunds *bool `queryParam:"style=form,explode=true,name=has_refunds"`
	// Filters for transactions with a pending manual anti-fraud review.
	PendingReview *bool `queryParam:"style=form,explode=true,name=pending_review"`
	// Filters for transactions where the `checkout_session_id` matches the provided value.
	CheckoutSessionID *string `queryParam:"style=form,explode=true,name=checkout_session_id"`
	// Filters for transactions where the `reconciliation_id` matches the provided value.
	ReconciliationID *string `queryParam:"style=form,explode=true,name=reconciliation_id"`
	// Filters for transactions with gift card redemptions.
	HasGiftCardRedemptions *bool `queryParam:"style=form,explode=true,name=has_gift_card_redemptions"`
	// Filters for transactions where a gift card used has an `id` that matches the provided value.
	GiftCardID *string `queryParam:"style=form,explode=true,name=gift_card_id"`
	// Filters for transactions that have at least one gift card redemption where the last 4 digits of its gift card number matches exactly with the provided value.
	GiftCardLast4 *string `queryParam:"style=form,explode=true,name=gift_card_last4"`
	// Filters for transactions that have at least one associated settlement record.
	HasSettlements *bool `queryParam:"style=form,explode=true,name=has_settlements"`
	// Filter for transactions that have a card with a BIN that matches exactly with the provided value.
	PaymentMethodBin *string `queryParam:"style=form,explode=true,name=payment_method_bin"`
	// Filters the results to only the transactions that have a payment source that matches with any of the provided values.
	PaymentSource []components.TransactionPaymentSource `queryParam:"style=form,explode=true,name=payment_source"`
	// Filters for transactions where the `is_subsequent_payment` matches the provided value.
	IsSubsequentPayment *bool `queryParam:"style=form,explode=true,name=is_subsequent_payment"`
	// Filters for transactions where the `merchant_initiated` matches the provided value.
	MerchantInitiated *bool `queryParam:"style=form,explode=true,name=merchant_initiated"`
	// Filters for transactions that attempted 3DS authentication or not.
	Used3ds *bool `queryParam:"style=form,explode=true,name=used_3ds"`
	// Filters for transactions that have been disputed.
	Disputed *bool `queryParam:"style=form,explode=true,name=disputed"`
	// Filters the results to only get the items for which some of the buyer data contains exactly the provided `buyer_search` values.
	BuyerSearch []string `queryParam:"style=form,explode=true,name=buyer_search"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (l ListTransactionsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListTransactionsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (l *ListTransactionsRequest) GetCursor() *string {
	if l == nil {
		return nil
	}
	return l.Cursor
}

func (l *ListTransactionsRequest) GetLimit() *int64 {
	if l == nil {
		return nil
	}
	return l.Limit
}

func (l *ListTransactionsRequest) GetCreatedAtLte() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtLte
}

func (l *ListTransactionsRequest) GetCreatedAtGte() *time.Time {
	if l == nil {
		return nil
	}
	return l.CreatedAtGte
}

func (l *ListTransactionsRequest) GetUpdatedAtLte() *time.Time {
	if l == nil {
		return nil
	}
	return l.UpdatedAtLte
}

func (l *ListTransactionsRequest) GetUpdatedAtGte() *time.Time {
	if l == nil {
		return nil
	}
	return l.UpdatedAtGte
}

func (l *ListTransactionsRequest) GetSearch() *string {
	if l == nil {
		return nil
	}
	return l.Search
}

func (l *ListTransactionsRequest) GetBuyerExternalIdentifier() *string {
	if l == nil {
		return nil
	}
	return l.BuyerExternalIdentifier
}

func (l *ListTransactionsRequest) GetBuyerID() *string {
	if l == nil {
		return nil
	}
	return l.BuyerID
}

func (l *ListTransactionsRequest) GetBuyerEmailAddress() *string {
	if l == nil {
		return nil
	}
	return l.BuyerEmailAddress
}

func (l *ListTransactionsRequest) GetIPAddress() *string {
	if l == nil {
		return nil
	}
	return l.IPAddress
}

func (l *ListTransactionsRequest) GetStatus() []components.TransactionStatus {
	if l == nil {
		return nil
	}
	return l.Status
}

func (l *ListTransactionsRequest) GetID() *string {
	if l == nil {
		return nil
	}
	return l.ID
}

func (l *ListTransactionsRequest) GetPaymentServiceTransactionID() *string {
	if l == nil {
		return nil
	}
	return l.PaymentServiceTransactionID
}

func (l *ListTransactionsRequest) GetExternalIdentifier() *string {
	if l == nil {
		return nil
	}
	return l.ExternalIdentifier
}

func (l *ListTransactionsRequest) GetMetadata() []string {
	if l == nil {
		return nil
	}
	return l.Metadata
}

func (l *ListTransactionsRequest) GetAmountEq() *int64 {
	if l == nil {
		return nil
	}
	return l.AmountEq
}

func (l *ListTransactionsRequest) GetAmountLte() *int64 {
	if l == nil {
		return nil
	}
	return l.AmountLte
}

func (l *ListTransactionsRequest) GetAmountGte() *int64 {
	if l == nil {
		return nil
	}
	return l.AmountGte
}

func (l *ListTransactionsRequest) GetCurrency() []string {
	if l == nil {
		return nil
	}
	return l.Currency
}

func (l *ListTransactionsRequest) GetCountry() []string {
	if l == nil {
		return nil
	}
	return l.Country
}

func (l *ListTransactionsRequest) GetPaymentServiceID() []string {
	if l == nil {
		return nil
	}
	return l.PaymentServiceID
}

func (l *ListTransactionsRequest) GetPaymentMethodID() *string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodID
}

func (l *ListTransactionsRequest) GetPaymentMethodLabel() *string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodLabel
}

func (l *ListTransactionsRequest) GetPaymentMethodScheme() []string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodScheme
}

func (l *ListTransactionsRequest) GetPaymentMethodCountry() *string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodCountry
}

func (l *ListTransactionsRequest) GetPaymentMethodFingerprint() *string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodFingerprint
}

func (l *ListTransactionsRequest) GetMethod() []components.Method {
	if l == nil {
		return nil
	}
	return l.Method
}

func (l *ListTransactionsRequest) GetErrorCode() []string {
	if l == nil {
		return nil
	}
	return l.ErrorCode
}

func (l *ListTransactionsRequest) GetHasRefunds() *bool {
	if l == nil {
		return nil
	}
	return l.HasRefunds
}

func (l *ListTransactionsRequest) GetPendingReview() *bool {
	if l == nil {
		return nil
	}
	return l.PendingReview
}

func (l *ListTransactionsRequest) GetCheckoutSessionID() *string {
	if l == nil {
		return nil
	}
	return l.CheckoutSessionID
}

func (l *ListTransactionsRequest) GetReconciliationID() *string {
	if l == nil {
		return nil
	}
	return l.ReconciliationID
}

func (l *ListTransactionsRequest) GetHasGiftCardRedemptions() *bool {
	if l == nil {
		return nil
	}
	return l.HasGiftCardRedemptions
}

func (l *ListTransactionsRequest) GetGiftCardID() *string {
	if l == nil {
		return nil
	}
	return l.GiftCardID
}

func (l *ListTransactionsRequest) GetGiftCardLast4() *string {
	if l == nil {
		return nil
	}
	return l.GiftCardLast4
}

func (l *ListTransactionsRequest) GetHasSettlements() *bool {
	if l == nil {
		return nil
	}
	return l.HasSettlements
}

func (l *ListTransactionsRequest) GetPaymentMethodBin() *string {
	if l == nil {
		return nil
	}
	return l.PaymentMethodBin
}

func (l *ListTransactionsRequest) GetPaymentSource() []components.TransactionPaymentSource {
	if l == nil {
		return nil
	}
	return l.PaymentSource
}

func (l *ListTransactionsRequest) GetIsSubsequentPayment() *bool {
	if l == nil {
		return nil
	}
	return l.IsSubsequentPayment
}

func (l *ListTransactionsRequest) GetMerchantInitiated() *bool {
	if l == nil {
		return nil
	}
	return l.MerchantInitiated
}

func (l *ListTransactionsRequest) GetUsed3ds() *bool {
	if l == nil {
		return nil
	}
	return l.Used3ds
}

func (l *ListTransactionsRequest) GetDisputed() *bool {
	if l == nil {
		return nil
	}
	return l.Disputed
}

func (l *ListTransactionsRequest) GetBuyerSearch() []string {
	if l == nil {
		return nil
	}
	return l.BuyerSearch
}

func (l *ListTransactionsRequest) GetMerchantAccountID() *string {
	if l == nil {
		return nil
	}
	return l.MerchantAccountID
}

type ListTransactionsResponse struct {
	Result components.TransactionSummaries

	Next func() (*ListTransactionsResponse, error)
}

func (l *ListTransactionsResponse) GetResult() components.TransactionSummaries {
	if l == nil {
		return components.TransactionSummaries{}
	}
	return l.Result
}
