// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type VoidTransactionGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (v *VoidTransactionGlobals) GetMerchantAccountID() *string {
	if v == nil {
		return nil
	}
	return v.MerchantAccountID
}

type VoidTransactionRequest struct {
	// The ID of the transaction
	TransactionID string `pathParam:"style=simple,explode=false,name=transaction_id"`
	// The preferred resource type in the response.
	Prefer []string `header:"style=simple,explode=false,name=prefer"`
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (v *VoidTransactionRequest) GetTransactionID() string {
	if v == nil {
		return ""
	}
	return v.TransactionID
}

func (v *VoidTransactionRequest) GetPrefer() []string {
	if v == nil {
		return nil
	}
	return v.Prefer
}

func (v *VoidTransactionRequest) GetMerchantAccountID() *string {
	if v == nil {
		return nil
	}
	return v.MerchantAccountID
}

type ResponseVoidTransactionType string

const (
	ResponseVoidTransactionTypeTransactionOutput     ResponseVoidTransactionType = "Transaction-Output"
	ResponseVoidTransactionTypeTransactionVoidOutput ResponseVoidTransactionType = "TransactionVoid-Output"
)

// ResponseVoidTransaction - Successful Response
type ResponseVoidTransaction struct {
	TransactionOutput     *components.TransactionOutput     `queryParam:"inline,name=Response_Void_Transaction"`
	TransactionVoidOutput *components.TransactionVoidOutput `queryParam:"inline,name=Response_Void_Transaction"`

	Type ResponseVoidTransactionType
}

func CreateResponseVoidTransactionTransactionOutput(transactionOutput components.TransactionOutput) ResponseVoidTransaction {
	typ := ResponseVoidTransactionTypeTransactionOutput

	return ResponseVoidTransaction{
		TransactionOutput: &transactionOutput,
		Type:              typ,
	}
}

func CreateResponseVoidTransactionTransactionVoidOutput(transactionVoidOutput components.TransactionVoidOutput) ResponseVoidTransaction {
	typ := ResponseVoidTransactionTypeTransactionVoidOutput

	return ResponseVoidTransaction{
		TransactionVoidOutput: &transactionVoidOutput,
		Type:                  typ,
	}
}

func (u *ResponseVoidTransaction) UnmarshalJSON(data []byte) error {

	var transactionOutput components.TransactionOutput = components.TransactionOutput{}
	if err := utils.UnmarshalJSON(data, &transactionOutput, "", true, nil); err == nil {
		u.TransactionOutput = &transactionOutput
		u.Type = ResponseVoidTransactionTypeTransactionOutput
		return nil
	}

	var transactionVoidOutput components.TransactionVoidOutput = components.TransactionVoidOutput{}
	if err := utils.UnmarshalJSON(data, &transactionVoidOutput, "", true, nil); err == nil {
		u.TransactionVoidOutput = &transactionVoidOutput
		u.Type = ResponseVoidTransactionTypeTransactionVoidOutput
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ResponseVoidTransaction", string(data))
}

func (u ResponseVoidTransaction) MarshalJSON() ([]byte, error) {
	if u.TransactionOutput != nil {
		return utils.MarshalJSON(u.TransactionOutput, "", true)
	}

	if u.TransactionVoidOutput != nil {
		return utils.MarshalJSON(u.TransactionVoidOutput, "", true)
	}

	return nil, errors.New("could not marshal union type ResponseVoidTransaction: all fields are null")
}
