// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type ResumePaymentMethodNetworkTokenRequest struct {
	// The ID of the payment method
	PaymentMethodID string `pathParam:"style=simple,explode=false,name=payment_method_id"`
	// The ID of the network token
	NetworkTokenID   string   `pathParam:"style=simple,explode=false,name=network_token_id"`
	TimeoutInSeconds *float64 `default:"1" queryParam:"style=form,explode=true,name=timeout_in_seconds"`
	// The ID of the merchant account to use for this request.
	XGr4vyMerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (r ResumePaymentMethodNetworkTokenRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *ResumePaymentMethodNetworkTokenRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ResumePaymentMethodNetworkTokenRequest) GetPaymentMethodID() string {
	if o == nil {
		return ""
	}
	return o.PaymentMethodID
}

func (o *ResumePaymentMethodNetworkTokenRequest) GetNetworkTokenID() string {
	if o == nil {
		return ""
	}
	return o.NetworkTokenID
}

func (o *ResumePaymentMethodNetworkTokenRequest) GetTimeoutInSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeoutInSeconds
}

func (o *ResumePaymentMethodNetworkTokenRequest) GetXGr4vyMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.XGr4vyMerchantAccountID
}

type ResumePaymentMethodNetworkTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	NetworkToken *components.NetworkToken
}

func (o *ResumePaymentMethodNetworkTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ResumePaymentMethodNetworkTokenResponse) GetNetworkToken() *components.NetworkToken {
	if o == nil {
		return nil
	}
	return o.NetworkToken
}
