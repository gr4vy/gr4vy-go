// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type CreatePaymentMethodBodyType string

const (
	CreatePaymentMethodBodyTypeCardPaymentMethodCreate            CreatePaymentMethodBodyType = "CardPaymentMethodCreate"
	CreatePaymentMethodBodyTypeRedirectPaymentMethodCreate        CreatePaymentMethodBodyType = "RedirectPaymentMethodCreate"
	CreatePaymentMethodBodyTypeCheckoutSessionPaymentMethodCreate CreatePaymentMethodBodyType = "CheckoutSessionPaymentMethodCreate"
)

type CreatePaymentMethodBody struct {
	CardPaymentMethodCreate            *components.CardPaymentMethodCreate            `queryParam:"inline"`
	RedirectPaymentMethodCreate        *components.RedirectPaymentMethodCreate        `queryParam:"inline"`
	CheckoutSessionPaymentMethodCreate *components.CheckoutSessionPaymentMethodCreate `queryParam:"inline"`

	Type CreatePaymentMethodBodyType
}

func CreateCreatePaymentMethodBodyCardPaymentMethodCreate(cardPaymentMethodCreate components.CardPaymentMethodCreate) CreatePaymentMethodBody {
	typ := CreatePaymentMethodBodyTypeCardPaymentMethodCreate

	return CreatePaymentMethodBody{
		CardPaymentMethodCreate: &cardPaymentMethodCreate,
		Type:                    typ,
	}
}

func CreateCreatePaymentMethodBodyRedirectPaymentMethodCreate(redirectPaymentMethodCreate components.RedirectPaymentMethodCreate) CreatePaymentMethodBody {
	typ := CreatePaymentMethodBodyTypeRedirectPaymentMethodCreate

	return CreatePaymentMethodBody{
		RedirectPaymentMethodCreate: &redirectPaymentMethodCreate,
		Type:                        typ,
	}
}

func CreateCreatePaymentMethodBodyCheckoutSessionPaymentMethodCreate(checkoutSessionPaymentMethodCreate components.CheckoutSessionPaymentMethodCreate) CreatePaymentMethodBody {
	typ := CreatePaymentMethodBodyTypeCheckoutSessionPaymentMethodCreate

	return CreatePaymentMethodBody{
		CheckoutSessionPaymentMethodCreate: &checkoutSessionPaymentMethodCreate,
		Type:                               typ,
	}
}

func (u *CreatePaymentMethodBody) UnmarshalJSON(data []byte) error {

	var checkoutSessionPaymentMethodCreate components.CheckoutSessionPaymentMethodCreate = components.CheckoutSessionPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &checkoutSessionPaymentMethodCreate, "", true, true); err == nil {
		u.CheckoutSessionPaymentMethodCreate = &checkoutSessionPaymentMethodCreate
		u.Type = CreatePaymentMethodBodyTypeCheckoutSessionPaymentMethodCreate
		return nil
	}

	var redirectPaymentMethodCreate components.RedirectPaymentMethodCreate = components.RedirectPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &redirectPaymentMethodCreate, "", true, true); err == nil {
		u.RedirectPaymentMethodCreate = &redirectPaymentMethodCreate
		u.Type = CreatePaymentMethodBodyTypeRedirectPaymentMethodCreate
		return nil
	}

	var cardPaymentMethodCreate components.CardPaymentMethodCreate = components.CardPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &cardPaymentMethodCreate, "", true, true); err == nil {
		u.CardPaymentMethodCreate = &cardPaymentMethodCreate
		u.Type = CreatePaymentMethodBodyTypeCardPaymentMethodCreate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatePaymentMethodBody", string(data))
}

func (u CreatePaymentMethodBody) MarshalJSON() ([]byte, error) {
	if u.CardPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.CardPaymentMethodCreate, "", true)
	}

	if u.RedirectPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.RedirectPaymentMethodCreate, "", true)
	}

	if u.CheckoutSessionPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.CheckoutSessionPaymentMethodCreate, "", true)
	}

	return nil, errors.New("could not marshal union type CreatePaymentMethodBody: all fields are null")
}

type CreatePaymentMethodRequest struct {
	TimeoutInSeconds *float64 `default:"1" queryParam:"style=form,explode=true,name=timeout_in_seconds"`
	// The ID of the merchant account to use for this request.
	XGr4vyMerchantAccountID *string                 `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
	RequestBody             CreatePaymentMethodBody `request:"mediaType=application/json"`
}

func (c CreatePaymentMethodRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreatePaymentMethodRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreatePaymentMethodRequest) GetTimeoutInSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.TimeoutInSeconds
}

func (o *CreatePaymentMethodRequest) GetXGr4vyMerchantAccountID() *string {
	if o == nil {
		return nil
	}
	return o.XGr4vyMerchantAccountID
}

func (o *CreatePaymentMethodRequest) GetRequestBody() CreatePaymentMethodBody {
	if o == nil {
		return CreatePaymentMethodBody{}
	}
	return o.RequestBody
}

type CreatePaymentMethodResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful Response
	PaymentMethod *components.PaymentMethod
}

func (o *CreatePaymentMethodResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreatePaymentMethodResponse) GetPaymentMethod() *components.PaymentMethod {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}
