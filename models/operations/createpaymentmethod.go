// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type CreatePaymentMethodGlobals struct {
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
}

func (c *CreatePaymentMethodGlobals) GetMerchantAccountID() *string {
	if c == nil {
		return nil
	}
	return c.MerchantAccountID
}

type BodyType string

const (
	BodyTypeCardPaymentMethodCreate            BodyType = "CardPaymentMethodCreate"
	BodyTypeRedirectPaymentMethodCreate        BodyType = "RedirectPaymentMethodCreate"
	BodyTypeCheckoutSessionPaymentMethodCreate BodyType = "CheckoutSessionPaymentMethodCreate"
	BodyTypePlaidPaymentMethodCreate           BodyType = "PlaidPaymentMethodCreate"
)

type Body struct {
	CardPaymentMethodCreate            *components.CardPaymentMethodCreate            `queryParam:"inline,name=Body"`
	RedirectPaymentMethodCreate        *components.RedirectPaymentMethodCreate        `queryParam:"inline,name=Body"`
	CheckoutSessionPaymentMethodCreate *components.CheckoutSessionPaymentMethodCreate `queryParam:"inline,name=Body"`
	PlaidPaymentMethodCreate           *components.PlaidPaymentMethodCreate           `queryParam:"inline,name=Body"`

	Type BodyType
}

func CreateBodyCardPaymentMethodCreate(cardPaymentMethodCreate components.CardPaymentMethodCreate) Body {
	typ := BodyTypeCardPaymentMethodCreate

	return Body{
		CardPaymentMethodCreate: &cardPaymentMethodCreate,
		Type:                    typ,
	}
}

func CreateBodyRedirectPaymentMethodCreate(redirectPaymentMethodCreate components.RedirectPaymentMethodCreate) Body {
	typ := BodyTypeRedirectPaymentMethodCreate

	return Body{
		RedirectPaymentMethodCreate: &redirectPaymentMethodCreate,
		Type:                        typ,
	}
}

func CreateBodyCheckoutSessionPaymentMethodCreate(checkoutSessionPaymentMethodCreate components.CheckoutSessionPaymentMethodCreate) Body {
	typ := BodyTypeCheckoutSessionPaymentMethodCreate

	return Body{
		CheckoutSessionPaymentMethodCreate: &checkoutSessionPaymentMethodCreate,
		Type:                               typ,
	}
}

func CreateBodyPlaidPaymentMethodCreate(plaidPaymentMethodCreate components.PlaidPaymentMethodCreate) Body {
	typ := BodyTypePlaidPaymentMethodCreate

	return Body{
		PlaidPaymentMethodCreate: &plaidPaymentMethodCreate,
		Type:                     typ,
	}
}

func (u *Body) UnmarshalJSON(data []byte) error {

	var redirectPaymentMethodCreate components.RedirectPaymentMethodCreate = components.RedirectPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &redirectPaymentMethodCreate, "", true, nil); err == nil {
		u.RedirectPaymentMethodCreate = &redirectPaymentMethodCreate
		u.Type = BodyTypeRedirectPaymentMethodCreate
		return nil
	}

	var cardPaymentMethodCreate components.CardPaymentMethodCreate = components.CardPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &cardPaymentMethodCreate, "", true, nil); err == nil {
		u.CardPaymentMethodCreate = &cardPaymentMethodCreate
		u.Type = BodyTypeCardPaymentMethodCreate
		return nil
	}

	var checkoutSessionPaymentMethodCreate components.CheckoutSessionPaymentMethodCreate = components.CheckoutSessionPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &checkoutSessionPaymentMethodCreate, "", true, nil); err == nil {
		u.CheckoutSessionPaymentMethodCreate = &checkoutSessionPaymentMethodCreate
		u.Type = BodyTypeCheckoutSessionPaymentMethodCreate
		return nil
	}

	var plaidPaymentMethodCreate components.PlaidPaymentMethodCreate = components.PlaidPaymentMethodCreate{}
	if err := utils.UnmarshalJSON(data, &plaidPaymentMethodCreate, "", true, nil); err == nil {
		u.PlaidPaymentMethodCreate = &plaidPaymentMethodCreate
		u.Type = BodyTypePlaidPaymentMethodCreate
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Body", string(data))
}

func (u Body) MarshalJSON() ([]byte, error) {
	if u.CardPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.CardPaymentMethodCreate, "", true)
	}

	if u.RedirectPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.RedirectPaymentMethodCreate, "", true)
	}

	if u.CheckoutSessionPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.CheckoutSessionPaymentMethodCreate, "", true)
	}

	if u.PlaidPaymentMethodCreate != nil {
		return utils.MarshalJSON(u.PlaidPaymentMethodCreate, "", true)
	}

	return nil, errors.New("could not marshal union type Body: all fields are null")
}

type CreatePaymentMethodRequest struct {
	// The ID of the merchant account to use for this request.
	MerchantAccountID *string `header:"style=simple,explode=false,name=x-gr4vy-merchant-account-id"`
	RequestBody       Body    `request:"mediaType=application/json"`
}

func (c *CreatePaymentMethodRequest) GetMerchantAccountID() *string {
	if c == nil {
		return nil
	}
	return c.MerchantAccountID
}

func (c *CreatePaymentMethodRequest) GetRequestBody() Body {
	if c == nil {
		return Body{}
	}
	return c.RequestBody
}
