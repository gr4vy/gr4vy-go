// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
)

type Response403GetTransactionType string

const (
	Response403GetTransactionTypeError403          Response403GetTransactionType = "Error403"
	Response403GetTransactionTypeError403Forbidden Response403GetTransactionType = "Error403Forbidden"
	Response403GetTransactionTypeError403Active    Response403GetTransactionType = "Error403Active"
)

// Response403GetTransaction - The credentials were invalid or the caller did not have permission to act on the resource.
type Response403GetTransaction struct {
	Error403          *components.Error403          `queryParam:"inline"`
	Error403Forbidden *components.Error403Forbidden `queryParam:"inline"`
	Error403Active    *components.Error403Active    `queryParam:"inline"`

	Type Response403GetTransactionType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &Response403GetTransaction{}

func CreateResponse403GetTransactionError403(error403 components.Error403) Response403GetTransaction {
	typ := Response403GetTransactionTypeError403

	return Response403GetTransaction{
		Error403: &error403,
		Type:     typ,
	}
}

func CreateResponse403GetTransactionError403Forbidden(error403Forbidden components.Error403Forbidden) Response403GetTransaction {
	typ := Response403GetTransactionTypeError403Forbidden

	return Response403GetTransaction{
		Error403Forbidden: &error403Forbidden,
		Type:              typ,
	}
}

func CreateResponse403GetTransactionError403Active(error403Active components.Error403Active) Response403GetTransaction {
	typ := Response403GetTransactionTypeError403Active

	return Response403GetTransaction{
		Error403Active: &error403Active,
		Type:           typ,
	}
}

func (u *Response403GetTransaction) UnmarshalJSON(data []byte) error {

	var error403 components.Error403 = components.Error403{}
	if err := utils.UnmarshalJSON(data, &error403, "", true, true); err == nil {
		u.Error403 = &error403
		u.Type = Response403GetTransactionTypeError403
		return nil
	}

	var error403Forbidden components.Error403Forbidden = components.Error403Forbidden{}
	if err := utils.UnmarshalJSON(data, &error403Forbidden, "", true, true); err == nil {
		u.Error403Forbidden = &error403Forbidden
		u.Type = Response403GetTransactionTypeError403Forbidden
		return nil
	}

	var error403Active components.Error403Active = components.Error403Active{}
	if err := utils.UnmarshalJSON(data, &error403Active, "", true, true); err == nil {
		u.Error403Active = &error403Active
		u.Type = Response403GetTransactionTypeError403Active
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Response403GetTransaction", string(data))
}

func (u Response403GetTransaction) MarshalJSON() ([]byte, error) {
	if u.Error403 != nil {
		return utils.MarshalJSON(u.Error403, "", true)
	}

	if u.Error403Forbidden != nil {
		return utils.MarshalJSON(u.Error403Forbidden, "", true)
	}

	if u.Error403Active != nil {
		return utils.MarshalJSON(u.Error403Active, "", true)
	}

	return nil, errors.New("could not marshal union type Response403GetTransaction: all fields are null")
}

func (u Response403GetTransaction) Error() string {
	switch u.Type {
	case Response403GetTransactionTypeError403:
		data, _ := json.Marshal(u.Error403)
		return string(data)
	case Response403GetTransactionTypeError403Forbidden:
		data, _ := json.Marshal(u.Error403Forbidden)
		return string(data)
	case Response403GetTransactionTypeError403Active:
		data, _ := json.Marshal(u.Error403Active)
		return string(data)
	default:
		return "unknown error"
	}
}
