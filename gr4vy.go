// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package gr4vygo

// Generated from OpenAPI doc version 1.0.0 and generator version 2.674.3

import (
	"bytes"
	"context"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/config"
	"github.com/gr4vy/gr4vy-go/internal/globals"
	"github.com/gr4vy/gr4vy-go/internal/hooks"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/apierrors"
	"github.com/gr4vy/gr4vy-go/models/components"
	"github.com/gr4vy/gr4vy-go/models/operations"
	"github.com/gr4vy/gr4vy-go/retry"
	"net/http"
	"net/url"
	"time"
)

const (
	ServerSandbox    string = "sandbox"
	ServerProduction string = "production"
)

// ServerList contains the list of servers available to the SDK
var ServerList = map[string]string{
	ServerSandbox:    "https://api.sandbox.{id}.gr4vy.app",
	ServerProduction: "https://api.{id}.gr4vy.app",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Gr4vy - Gr4vy: The Gr4vy API.
type Gr4vy struct {
	SDKVersion                string
	AccountUpdater            *AccountUpdater
	Buyers                    *Buyers
	PaymentMethods            *PaymentMethods
	GiftCards                 *GiftCards
	CardSchemeDefinitions     *CardSchemeDefinitions
	DigitalWallets            *DigitalWallets
	Transactions              *Transactions
	Refunds                   *Refunds
	PaymentOptions            *PaymentOptions
	PaymentServiceDefinitions *PaymentServiceDefinitions
	PaymentServices           *PaymentServices
	AuditLogs                 *AuditLogs
	Reports                   *Reports
	ReportExecutions          *ReportExecutions
	CheckoutSessions          *CheckoutSessions
	MerchantAccounts          *MerchantAccounts
	Payouts                   *Payouts
	PaymentLinks              *PaymentLinks

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Gr4vy)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Gr4vy) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServer allows the overriding of the default server by name
func WithServer(server string) SDKOption {
	return func(sdk *Gr4vy) {
		_, ok := ServerList[server]
		if !ok {
			panic(fmt.Errorf("server %s not found", server))
		}

		sdk.sdkConfiguration.Server = server
	}
}

// WithID allows setting the id variable for url substitution
func WithID(id string) SDKOption {
	return func(sdk *Gr4vy) {
		for server := range sdk.sdkConfiguration.ServerVariables {
			if _, ok := sdk.sdkConfiguration.ServerVariables[server]["id"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerVariables[server]["id"] = fmt.Sprintf("%v", id)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(bearerAuth string) SDKOption {
	return func(sdk *Gr4vy) {
		security := components.Security{BearerAuth: &bearerAuth}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

// WithMerchantAccountID allows setting the MerchantAccountID parameter for all supported operations
func WithMerchantAccountID(merchantAccountID string) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Globals.MerchantAccountID = &merchantAccountID
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Gr4vy {
	sdk := &Gr4vy{
		SDKVersion: "1.3.6",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 1.3.6 2.674.3 1.0.0 github.com/gr4vy/gr4vy-go",
			Globals:    globals.Globals{},
			ServerList: ServerList,
			ServerVariables: map[string]map[string]string{
				"sandbox": {
					"id": "example",
				},
				"production": {
					"id": "example",
				},
			},
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	sdk.sdkConfiguration.FillGlobalsFromEnv()

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	sdk.sdkConfiguration = sdk.hooks.SDKInit(sdk.sdkConfiguration)

	sdk.AccountUpdater = newAccountUpdater(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Buyers = newBuyers(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PaymentMethods = newPaymentMethods(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.GiftCards = newGiftCards(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.CardSchemeDefinitions = newCardSchemeDefinitions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.DigitalWallets = newDigitalWallets(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Transactions = newTransactions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Refunds = newRefunds(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PaymentOptions = newPaymentOptions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PaymentServiceDefinitions = newPaymentServiceDefinitions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PaymentServices = newPaymentServices(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.AuditLogs = newAuditLogs(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Reports = newReports(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.ReportExecutions = newReportExecutions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.CheckoutSessions = newCheckoutSessions(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.MerchantAccounts = newMerchantAccounts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Payouts = newPayouts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.PaymentLinks = newPaymentLinks(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}

// BrowsePaymentMethodDefinitionsGet - Browse
func (s *Gr4vy) BrowsePaymentMethodDefinitionsGet(ctx context.Context, merchantAccountID *string, opts ...operations.Option) (any, error) {
	request := operations.BrowsePaymentMethodDefinitionsGetRequest{
		MerchantAccountID: merchantAccountID,
	}

	globals := operations.BrowsePaymentMethodDefinitionsGetGlobals{
		MerchantAccountID: s.sdkConfiguration.Globals.MerchantAccountID,
	}

	o := operations.Options{}
	supportedOptions := []string{
		operations.SupportedOptionRetries,
		operations.SupportedOptionTimeout,
	}

	for _, opt := range opts {
		if err := opt(&o, supportedOptions...); err != nil {
			return nil, fmt.Errorf("error applying option: %w", err)
		}
	}

	var baseURL string
	if o.ServerURL == nil {
		baseURL = utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	} else {
		baseURL = *o.ServerURL
	}
	opURL, err := url.JoinPath(baseURL, "/payment-method-definitions")
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	hookCtx := hooks.HookContext{
		SDK:              s,
		SDKConfiguration: s.sdkConfiguration,
		BaseURL:          baseURL,
		Context:          ctx,
		OperationID:      "browse_payment_method_definitions_get",
		SecuritySource:   s.sdkConfiguration.Security,
	}

	timeout := o.Timeout
	if timeout == nil {
		timeout = s.sdkConfiguration.Timeout
	}

	if timeout != nil {
		var cancel context.CancelFunc
		ctx, cancel = context.WithTimeout(ctx, *timeout)
		defer cancel()
	}

	req, err := http.NewRequestWithContext(ctx, "GET", opURL, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "application/json")
	req.Header.Set("User-Agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request, globals)

	if err := utils.PopulateSecurity(ctx, req, s.sdkConfiguration.Security); err != nil {
		return nil, err
	}

	for k, v := range o.SetHeaders {
		req.Header.Set(k, v)
	}

	globalRetryConfig := s.sdkConfiguration.RetryConfig
	retryConfig := o.Retries
	if retryConfig == nil {
		if globalRetryConfig != nil {
			retryConfig = globalRetryConfig
		} else {
			retryConfig = &retry.Config{
				Strategy: "backoff", Backoff: &retry.BackoffStrategy{
					InitialInterval: 200,
					MaxInterval:     200,
					Exponent:        1,
					MaxElapsedTime:  1000,
				},
				RetryConnectionErrors: true,
			}
		}
	}

	var httpRes *http.Response
	if retryConfig != nil {
		httpRes, err = utils.Retry(ctx, utils.Retries{
			Config: retryConfig,
			StatusCodes: []string{
				"5XX",
			},
		}, func() (*http.Response, error) {
			if req.Body != nil && req.Body != http.NoBody && req.GetBody != nil {
				copyBody, err := req.GetBody()

				if err != nil {
					return nil, err
				}

				req.Body = copyBody
			}

			req, err = s.hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
			if err != nil {
				if retry.IsPermanentError(err) || retry.IsTemporaryError(err) {
					return nil, err
				}

				return nil, retry.Permanent(err)
			}

			httpRes, err := s.sdkConfiguration.Client.Do(req)
			if err != nil || httpRes == nil {
				if err != nil {
					err = fmt.Errorf("error sending request: %w", err)
				} else {
					err = fmt.Errorf("error sending request: no response")
				}

				_, err = s.hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
			}
			return httpRes, err
		})

		if err != nil {
			return nil, err
		} else {
			httpRes, err = s.hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
			if err != nil {
				return nil, err
			}
		}
	} else {
		req, err = s.hooks.BeforeRequest(hooks.BeforeRequestContext{HookContext: hookCtx}, req)
		if err != nil {
			return nil, err
		}

		httpRes, err = s.sdkConfiguration.Client.Do(req)
		if err != nil || httpRes == nil {
			if err != nil {
				err = fmt.Errorf("error sending request: %w", err)
			} else {
				err = fmt.Errorf("error sending request: no response")
			}

			_, err = s.hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, nil, err)
			return nil, err
		} else if utils.MatchStatusCodes([]string{"422", "4XX", "5XX"}, httpRes.StatusCode) {
			_httpRes, err := s.hooks.AfterError(hooks.AfterErrorContext{HookContext: hookCtx}, httpRes, nil)
			if err != nil {
				return nil, err
			} else if _httpRes != nil {
				httpRes = _httpRes
			}
		} else {
			httpRes, err = s.hooks.AfterSuccess(hooks.AfterSuccessContext{HookContext: hookCtx}, httpRes)
			if err != nil {
				return nil, err
			}
		}
	}

	switch {
	case httpRes.StatusCode == 200:
		switch {
		case utils.MatchContentType(httpRes.Header.Get("Content-Type"), `application/json`):
			rawBody, err := utils.ConsumeRawBody(httpRes)
			if err != nil {
				return nil, err
			}

			var out any
			if err := utils.UnmarshalJsonFromResponseBody(bytes.NewBuffer(rawBody), &out, ""); err != nil {
				return nil, err
			}

			return out, nil
		default:
			rawBody, err := utils.ConsumeRawBody(httpRes)
			if err != nil {
				return nil, err
			}
			return nil, apierrors.NewAPIError(fmt.Sprintf("unknown content-type received: %s", httpRes.Header.Get("Content-Type")), httpRes.StatusCode, string(rawBody), httpRes)
		}
	case httpRes.StatusCode == 422:
		switch {
		case utils.MatchContentType(httpRes.Header.Get("Content-Type"), `application/json`):
			rawBody, err := utils.ConsumeRawBody(httpRes)
			if err != nil {
				return nil, err
			}

			var out apierrors.HTTPValidationError
			if err := utils.UnmarshalJsonFromResponseBody(bytes.NewBuffer(rawBody), &out, ""); err != nil {
				return nil, err
			}

			return nil, &out
		default:
			rawBody, err := utils.ConsumeRawBody(httpRes)
			if err != nil {
				return nil, err
			}
			return nil, apierrors.NewAPIError(fmt.Sprintf("unknown content-type received: %s", httpRes.Header.Get("Content-Type")), httpRes.StatusCode, string(rawBody), httpRes)
		}
	case httpRes.StatusCode >= 400 && httpRes.StatusCode < 500:
		rawBody, err := utils.ConsumeRawBody(httpRes)
		if err != nil {
			return nil, err
		}
		return nil, apierrors.NewAPIError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	case httpRes.StatusCode >= 500 && httpRes.StatusCode < 600:
		rawBody, err := utils.ConsumeRawBody(httpRes)
		if err != nil {
			return nil, err
		}
		return nil, apierrors.NewAPIError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	default:
		rawBody, err := utils.ConsumeRawBody(httpRes)
		if err != nil {
			return nil, err
		}
		return nil, apierrors.NewAPIError("unknown status code returned", httpRes.StatusCode, string(rawBody), httpRes)
	}

	return nil, nil

}
