// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package gr4vygo

import (
	"context"
	"github.com/gr4vy/gr4vy-go/internal/hooks"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
	"github.com/gr4vy/gr4vy-go/retry"
	"net/http"
	"time"
)

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	return c.ServerURL, map[string]string{}
}

// Gr4vy - Gr4vy: The Gr4vy API.
type Gr4vy struct {
	AccountUpdater            *AccountUpdater
	Buyers                    *Buyers
	PaymentMethods            *PaymentMethods
	GiftCards                 *GiftCards
	CardSchemeDefinitions     *CardSchemeDefinitions
	DigitalWallets            *DigitalWallets
	Transactions              *Transactions
	Refunds                   *Refunds
	PaymentOptions            *PaymentOptions
	PaymentServiceDefinitions *PaymentServiceDefinitions
	PaymentServices           *PaymentServices
	AuditLogs                 *AuditLogs
	CheckoutSessions          *CheckoutSessions
	MerchantAccounts          *MerchantAccounts
	Payouts                   *Payouts

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Gr4vy)

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(oAuth2PasswordBearer string) SDKOption {
	return func(sdk *Gr4vy) {
		security := components.Security{OAuth2PasswordBearer: &oAuth2PasswordBearer}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided serverURL and options
func New(serverURL string, opts ...SDKOption) *Gr4vy {
	sdk := &Gr4vy{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "1.0.0",
			SDKVersion:        "0.0.6",
			GenVersion:        "2.604.4",
			UserAgent:         "speakeasy-sdk/go 0.0.6 2.604.4 1.0.0 github.com/gr4vy/gr4vy-go",
			ServerURL:         serverURL,
			Hooks:             hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL := serverURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.AccountUpdater = newAccountUpdater(sdk.sdkConfiguration)

	sdk.Buyers = newBuyers(sdk.sdkConfiguration)

	sdk.PaymentMethods = newPaymentMethods(sdk.sdkConfiguration)

	sdk.GiftCards = newGiftCards(sdk.sdkConfiguration)

	sdk.CardSchemeDefinitions = newCardSchemeDefinitions(sdk.sdkConfiguration)

	sdk.DigitalWallets = newDigitalWallets(sdk.sdkConfiguration)

	sdk.Transactions = newTransactions(sdk.sdkConfiguration)

	sdk.Refunds = newRefunds(sdk.sdkConfiguration)

	sdk.PaymentOptions = newPaymentOptions(sdk.sdkConfiguration)

	sdk.PaymentServiceDefinitions = newPaymentServiceDefinitions(sdk.sdkConfiguration)

	sdk.PaymentServices = newPaymentServices(sdk.sdkConfiguration)

	sdk.AuditLogs = newAuditLogs(sdk.sdkConfiguration)

	sdk.CheckoutSessions = newCheckoutSessions(sdk.sdkConfiguration)

	sdk.MerchantAccounts = newMerchantAccounts(sdk.sdkConfiguration)

	sdk.Payouts = newPayouts(sdk.sdkConfiguration)

	return sdk
}
