// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package gr4vygo

import (
	"context"
	"fmt"
	"github.com/gr4vy/gr4vy-go/internal/globals"
	"github.com/gr4vy/gr4vy-go/internal/hooks"
	"github.com/gr4vy/gr4vy-go/internal/utils"
	"github.com/gr4vy/gr4vy-go/models/components"
	"github.com/gr4vy/gr4vy-go/retry"
	"net/http"
	"time"
)

const (
	ServerProduction string = "production"
	ServerSandbox    string = "sandbox"
)

// ServerList contains the list of servers available to the SDK
var ServerList = map[string]string{
	ServerProduction: "https://api.{id}.gr4vy.app",
	ServerSandbox:    "https://api.sandbox.{id}.gr4vy.app",
}

// HTTPClient provides an interface for suplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

type sdkConfiguration struct {
	Client            HTTPClient
	Security          func(context.Context) (interface{}, error)
	ServerURL         string
	Server            string
	ServerDefaults    map[string]map[string]string
	Language          string
	OpenAPIDocVersion string
	SDKVersion        string
	GenVersion        string
	UserAgent         string
	Globals           globals.Globals
	RetryConfig       *retry.Config
	Hooks             *hooks.Hooks
	Timeout           *time.Duration
}

func (c *sdkConfiguration) GetServerDetails() (string, map[string]string) {
	if c.ServerURL != "" {
		return c.ServerURL, nil
	}

	if c.Server == "" {
		c.Server = "production"
	}

	return ServerList[c.Server], c.ServerDefaults[c.Server]
}

// Gr4vy - Gr4vy: The Gr4vy API.
type Gr4vy struct {
	AccountUpdater            *AccountUpdater
	Buyers                    *Buyers
	PaymentMethods            *PaymentMethods
	GiftCards                 *GiftCards
	CardSchemeDefinitions     *CardSchemeDefinitions
	DigitalWallets            *DigitalWallets
	Transactions              *Transactions
	Refunds                   *Refunds
	PaymentOptions            *PaymentOptions
	PaymentServiceDefinitions *PaymentServiceDefinitions
	PaymentServices           *PaymentServices
	AuditLogs                 *AuditLogs
	CheckoutSessions          *CheckoutSessions
	MerchantAccounts          *MerchantAccounts
	Payouts                   *Payouts

	sdkConfiguration sdkConfiguration
}

type SDKOption func(*Gr4vy)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Gr4vy) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServer allows the overriding of the default server by name
func WithServer(server string) SDKOption {
	return func(sdk *Gr4vy) {
		_, ok := ServerList[server]
		if !ok {
			panic(fmt.Errorf("server %s not found", server))
		}

		sdk.sdkConfiguration.Server = server
	}
}

// WithID allows setting the id variable for url substitution
func WithID(id string) SDKOption {
	return func(sdk *Gr4vy) {
		for server := range sdk.sdkConfiguration.ServerDefaults {
			if _, ok := sdk.sdkConfiguration.ServerDefaults[server]["id"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerDefaults[server]["id"] = fmt.Sprintf("%v", id)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(bearerAuth string) SDKOption {
	return func(sdk *Gr4vy) {
		security := components.Security{BearerAuth: &bearerAuth}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

// WithMerchantAccountID allows setting the MerchantAccountID parameter for all supported operations
func WithMerchantAccountID(merchantAccountID string) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Globals.MerchantAccountID = &merchantAccountID
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Gr4vy) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}
func (sdk *Gr4vy) fillGlobalsFromEnv() {
	if sdk.sdkConfiguration.Globals.MerchantAccountID == nil {
		if val := utils.ValueFromEnvVar("GR4VY_MERCHANT_ACCOUNT_ID", sdk.sdkConfiguration.Globals.MerchantAccountID); val != nil {
			if typedVal, ok := val.(string); ok {
				sdk.sdkConfiguration.Globals.MerchantAccountID = &typedVal
			}
		}
	}

}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Gr4vy {
	sdk := &Gr4vy{
		sdkConfiguration: sdkConfiguration{
			Language:          "go",
			OpenAPIDocVersion: "1.0.0",
			SDKVersion:        "0.1.0",
			GenVersion:        "2.604.4",
			UserAgent:         "speakeasy-sdk/go 0.1.0 2.604.4 1.0.0 github.com/gr4vy/gr4vy-go",
			Globals:           globals.Globals{},
			ServerDefaults: map[string]map[string]string{
				"production": {
					"id": "example",
				},
				"sandbox": {
					"id": "example",
				},
			},
			Hooks: hooks.New(),
		},
	}
	for _, opt := range opts {
		opt(sdk)
	}

	sdk.fillGlobalsFromEnv()

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.sdkConfiguration.Hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if serverURL != currentServerURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.AccountUpdater = newAccountUpdater(sdk.sdkConfiguration)

	sdk.Buyers = newBuyers(sdk.sdkConfiguration)

	sdk.PaymentMethods = newPaymentMethods(sdk.sdkConfiguration)

	sdk.GiftCards = newGiftCards(sdk.sdkConfiguration)

	sdk.CardSchemeDefinitions = newCardSchemeDefinitions(sdk.sdkConfiguration)

	sdk.DigitalWallets = newDigitalWallets(sdk.sdkConfiguration)

	sdk.Transactions = newTransactions(sdk.sdkConfiguration)

	sdk.Refunds = newRefunds(sdk.sdkConfiguration)

	sdk.PaymentOptions = newPaymentOptions(sdk.sdkConfiguration)

	sdk.PaymentServiceDefinitions = newPaymentServiceDefinitions(sdk.sdkConfiguration)

	sdk.PaymentServices = newPaymentServices(sdk.sdkConfiguration)

	sdk.AuditLogs = newAuditLogs(sdk.sdkConfiguration)

	sdk.CheckoutSessions = newCheckoutSessions(sdk.sdkConfiguration)

	sdk.MerchantAccounts = newMerchantAccounts(sdk.sdkConfiguration)

	sdk.Payouts = newPayouts(sdk.sdkConfiguration)

	return sdk
}
