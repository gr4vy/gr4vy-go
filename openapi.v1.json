{
  "openapi": "3.0.0",
  "info": {
    "title": "Gr4vy API (Beta)",
    "version": "1.0",
    "contact": {
      "name": "Gr4vy Support",
      "email": "code@gr4vy.com",
      "url": "https://gr4vy.com"
    },
    "termsOfService": "https://gr4vy.com",
    "license": {
      "name": "MIT",
      "url": "https://raw.githubusercontent.com/gr4vy/gr4vy-openapi/main/LICENSE"
    },
    "description": "Welcome to the Gr4vy API reference documentation.\nOur API is still very much a work in product and subject to change."
  },
  "servers": [
    {
      "url": "https://api.{gr4vy_id}.gr4vy.app",
      "variables": {
        "gr4vy_id": {
          "default": "plantly",
          "description": "The subdomain for your Gr4vy instance."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "API Key Pairs",
      "description": "In Gr4vy, an API key pair is used to sign and validate JSON Web Tokens (JWT).\nJWTs are used as a HTTP `bearer` token to authenticate to the API. For more\ninformation please visit our [in-depth authentication](/guides/authentication)\nguide.",
      "x-internal": true
    },
    {
      "name": "Async APIs",
      "x-internal": true,
      "description": "The asynchronous (async) APIs are convenience APIs that function as an\nalternative way to create transactions and register payment methods\nwithout having to wait for the API to complete. Each of thee APIs returns\ndirectly without processing the request fully, allowing you to render a\nnew page for the buyer while the request is processed."
    },
    {
      "name": "Buyers",
      "description": "In Gr4vy, a buyer represents your customer, the shopper who's performing\na checkout and making a purchase.\n\nA buyer can be used by you to:\n\n* Display a human readable name (`display_name`) for a buyer in the Gr4vy\nadmin panel\n* Associate multiple tokenized payment methods with a single user\n* Initialize **Gr4vy Embed** with the buyer ID, automatically displaying the\n  buyer's previously stored payment methods, allowing for faster checkout."
    },
    {
      "name": "Card Rules",
      "description": "In Gr4vy, a card rule defines how a card transaction is processed. It\ndetermines which payment services are used, and with what priority, based\non the transaction amount, card type, and many more attributes."
    },
    {
      "name": "Merchants",
      "description": "In Gr4vy, a merchant represents the customer that controls the instance.",
      "x-internal": true
    },
    {
      "name": "Payment Methods",
      "description": "In Gr4vy, a payment method represents a way in which a payment can be\nprocessed, for example a card payment, a PayPal payment, or a Bitcoin\npayment.\n\nThe payment method API can be used to:\n\n* List all the available payment methods\n* Filter the available payment method for a buyer in a specific currency\nand country.\n* Store (also known as tokenize) a payment method for a buyer.\n* Fetch all previously tokenized payment methods for a buyer."
    },
    {
      "name": "Payment Options",
      "description": "In Gr4vy, a payment option represents a list of methods (card, PayPal,\netc) that are available for a given locale.\n\nThe payment options API can be used to:\n\n* Determine what types of payments can be processed in a specific locale.\n* Display a list options to a buyer to choose from."
    },
    {
      "name": "Payment Service Definitions",
      "description": "Payment service definitions describe the fields required for a payment\nservice to be configured."
    },
    {
      "name": "Payment Services",
      "description": "In Gr4vy, a payment service represents a configured payment provider\n(Stripe, PayPal, Adyen, etc) for a specific payment type (card, bitcoin,\netc)\n\nThe payment services API can be used to:\n\n* Provide Gr4vy with the payment credentials for a payment provider.\n* Set a display name for a payment provider."
    },
    {
      "name": "Sessions",
      "description": "The sessions APIs are used to facilitate user authentication for the Gr4vy\ndashboard.",
      "x-internal": true
    },
    {
      "name": "Transactions",
      "description": "In Gr4vy, a transaction represents a payment in any state, either before it\nis authorized, once it is captured, or after it has been refunded.\n\nThe transactions API can be used to:\n\n- Authorize, capture, and store cards.\n- Authorize, capture, and store alternative payment methods like PayPal.\n- Refund, void, and otherwise cancel existing transactions."
    },
    {
      "name": "Users",
      "description": "In Gr4vy, a user represents an employee of the merchant with access to the\ndashboard.",
      "x-internal": true
    }
  ],
  "paths": {
    "/async/payment-methods": {
      "post": {
        "operationId": "async-store-payment-method",
        "summary": "Store a new payment method",
        "description": "Stores and tokenizes a new payment method.",
        "x-internal": true,
        "tags": [
          "Async APIs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns a status object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                },
                "examples": {
                  "A status": {
                    "value": {
                      "type": "status",
                      "status": "pending",
                      "resource_type": "payment-method",
                      "resource_id": "8724fd24-5489-4a5d-90fd-0604df7d3b83",
                      "external_identifier": "user-789123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/async/transactions": {
      "post": {
        "operationId": "async-create-transaction",
        "summary": "Create transaction",
        "tags": [
          "Async APIs"
        ],
        "x-internal": true,
        "description": "Attempts to create an authorization for a payment method.\n\nThis endpoint accepts a few additional fields that allow for simultaneous\ncapturing and storage of the payment method.\n\n* `payment_method.store` - Use this field to store the payment method for\nfuture use. Not all payment methods support this feature.\n* `capture` - Use this method to also perform a capture of the transaction\nafter it has been authorized.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              },
              "examples": {
                "Authorize a new card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorized and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorize, capture, and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorize and capture a PayPal transaction": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "paypal",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorize and capture using a previously tokenized card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "id",
                      "id": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns a status object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400IncorrectJson"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/async/transactions/{transaction_id}/authorize": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "async-authorize-transaction",
        "summary": "Authorize approved transaction",
        "tags": [
          "Async APIs"
        ],
        "x-internal": true,
        "description": "Authorize a previously approved transaction.\n\nThis API returns asynchronously, returning status object with the ID of the\npending `Transaction` resource.",
        "responses": {
          "202": {
            "description": "Returns a status object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                },
                "examples": {
                  "Pending transaction": {
                    "value": {
                      "type": "status",
                      "status": "pending",
                      "resource_type": "transaction",
                      "resource_id": "8724fd24-5489-4a5d-90fd-0604df7d3b83",
                      "external_identifier": "user-789123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400IncorrectJson"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/async/transactions/{transaction_id}/capture": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "async-capture-transaction",
        "summary": "Capture transaction",
        "tags": [
          "Async APIs"
        ],
        "x-internal": true,
        "description": "Captures a previously authorized transaction.\n\nThis API returns asynchronously, returning status object with the ID of the\npending `Transaction` resource.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCaptureRequest"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns a status object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                },
                "examples": {
                  "Pending transaction": {
                    "value": {
                      "type": "status",
                      "status": "pending",
                      "resource_type": "transaction",
                      "resource_id": "8724fd24-5489-4a5d-90fd-0604df7d3b83",
                      "external_identifier": "user-789123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400IncorrectJson"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/async/transactions/batch-capture": {
      "post": {
        "operationId": "async-batch-capture-transactions",
        "summary": "Batch capture transactions",
        "tags": [
          "Async APIs"
        ],
        "x-internal": true,
        "description": "The body of this API takes a list of items as a JSON object.\n\nThis API returns asynchronously, returning a list of status objects with the\nIDs of the pending `Transaction` resources.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TransactionsBatchCaptureRequest"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Returns a status object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statuses"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400IncorrectJson"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/auth/sessions": {
      "post": {
        "operationId": "login",
        "summary": "Create a user session (Login)",
        "description": "Authenticate a user using an email address and password.\n",
        "tags": [
          "Sessions"
        ],
        "x-internal": true,
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a session object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if the credentials provided were not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "refresh-session",
        "summary": "Renew a user session",
        "description": "Re-authenticate a user using a refresh token.\n",
        "tags": [
          "Sessions"
        ],
        "x-internal": true,
        "responses": {
          "200": {
            "description": "Returns a session object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if the refresh token provided was not valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "logout",
        "summary": "Ends a user session (Logout)",
        "description": "Ends a user's session by invalidating the used access token.",
        "tags": [
          "Sessions"
        ],
        "x-internal": true,
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/api-key-pairs": {
      "get": {
        "operationId": "list-api-key-pairs",
        "summary": "List API key-pairs",
        "description": "Returns a list of active API key-pairs.",
        "tags": [
          "API Key Pairs"
        ],
        "x-internal": true,
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of active key pairs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyPairs"
                },
                "examples": {
                  "A list of key pairs": {
                    "value": {
                      "items": [
                        {
                          "type": "api-key-pair",
                          "id": "SopiN5XU0IWy8Xe9mwx1ICQbKh4-ydCDPx3LIyArkVI",
                          "private_key": null,
                          "created_at": "2012-12-12T10:53:43+00:00",
                          "updated_at": "2012-12-12T10:53:43+00:00"
                        },
                        {
                          "type": "api-key-pair",
                          "id": "Wy8Xe9mwx1ICQbKh4SopiN5XU0I-yArkVIydCDPx3LI",
                          "private_key": null,
                          "created_at": "2012-12-12T10:53:12+00:00",
                          "updated_at": "2012-12-12T10:53:12+00:00"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-api-key-pair",
        "summary": "Create an API key-pair",
        "description": "Creates a new API key-pair.",
        "tags": [
          "API Key Pairs"
        ],
        "x-internal": true,
        "responses": {
          "201": {
            "description": "Returns a newly created key pair.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIKeyPair"
                },
                "examples": {
                  "A newly created API key pair": {
                    "value": {
                      "type": "api-key-pair",
                      "id": "SopiN5XU0IWy8Xe9mwx1ICQbKh4-ydCDPx3LIyArkVI",
                      "private_key": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----",
                      "created_at": "2012-12-12T10:53:43+00:00",
                      "updated_at": "2012-12-12T10:53:43+00:00"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/api-key-pairs/{api_key_pair_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "gg9ILy"
          },
          "name": "api_key_pair_id",
          "in": "path",
          "required": true,
          "description": "The ID for the API key pair."
        }
      ],
      "delete": {
        "operationId": "delete-api-key-pair",
        "summary": "Delete an API key-pair",
        "description": "Deletes an API key-pair.",
        "tags": [
          "API Key Pairs"
        ],
        "x-internal": true,
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/buyers": {
      "get": {
        "operationId": "list-buyers",
        "summary": "List buyers",
        "description": "Returns a list of buyers.",
        "tags": [
          "Buyers"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "John"
            },
            "in": "query",
            "name": "search",
            "description": "Filters the results to only the buyers for which the `display_name` or\n`external_identifier` matches this value. This field allows for a partial\nmatch, matching any buyer for which either of the fields partially or\ncompletely matches."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of buyers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyers"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "add-buyer",
        "summary": "New buyer",
        "description": "Adds a buyer, allowing for payment methods and transactions to be associated\nto this buyer.\n",
        "tags": [
          "Buyers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerRequest"
              },
              "examples": {
                "Create a buyer": {
                  "value": {
                    "external_identifier": "412231123",
                    "display_name": "John L."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the buyer that was added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "409": {
            "description": "Returns an error if duplicate resource has been found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error409DuplicateRecord"
                }
              }
            }
          }
        }
      }
    },
    "/buyers/{buyer_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
          },
          "name": "buyer_id",
          "in": "path",
          "required": true,
          "description": "The unique ID for a buyer."
        }
      ],
      "get": {
        "operationId": "get-buyer",
        "summary": "Get buyer",
        "description": "Gets the information about a buyer.",
        "tags": [
          "Buyers"
        ],
        "responses": {
          "200": {
            "description": "Returns the information about a buyer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          },
          "default": {
            "description": "Returns a generic error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGeneric"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-buyer",
        "summary": "Update buyer",
        "description": "Updates a buyer's details.\n",
        "tags": [
          "Buyers"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyerUpdate"
              },
              "examples": {
                "Update a buyer": {
                  "value": {
                    "external_identifier": "42623266",
                    "display_name": "John D."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated buyer record.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Buyer"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-buyer",
        "summary": "Delete buyer",
        "description": "Deletes a buyer record. Any associated tokenized payment methods will remain\nin the system but no longer associated to the buyer.",
        "tags": [
          "Buyers"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/buyers/payment-methods": {
      "get": {
        "operationId": "list-buyer-payment-methods",
        "summary": "List stored payment methods for a buyer",
        "description": "Returns a list of stored (tokenized) payment methods for a buyer in\na short tokenized format.",
        "tags": [
          "Payment Methods"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
            },
            "in": "query",
            "name": "buyer_id",
            "description": "Filters the results to only the items for which the `buyer` has an\n`id` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "user-12345"
            },
            "in": "query",
            "name": "buyer_external_identifier",
            "description": "Filters the results to only the items for which the `buyer` has an\n`external_identifier` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "US"
            },
            "in": "query",
            "name": "country",
            "description": "Filters the results to only the items which support this country code. A\ncountry is formatted as 2-letter ISO country code."
          },
          {
            "schema": {
              "type": "string",
              "example": "USD"
            },
            "in": "query",
            "name": "currency",
            "description": "Filters the results to only the items which support this currency code. A\ncurrency is formatted as 3-letter ISO currency code."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available payment methods for a buyer, filtered by the\nthe given currency and country code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods--Tokenized"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/main": {
      "get": {
        "operationId": "get-current-merchant",
        "summary": "Get current merchant details",
        "description": "Gets the information about the current merchant account.",
        "tags": [
          "Merchants"
        ],
        "x-internal": true,
        "responses": {
          "200": {
            "description": "Returns the information about the merchant.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods": {
      "get": {
        "operationId": "list-payment-methods",
        "summary": "List payment methods",
        "description": "Returns a list of stored (tokenized) payment methods.",
        "tags": [
          "Payment Methods"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          },
          {
            "schema": {
              "type": "string",
              "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
            },
            "in": "query",
            "name": "buyer_id",
            "description": "Filters the results to only the items for which the `buyer` has an\n`id` that matches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "user-12345"
            },
            "in": "query",
            "name": "buyer_external_identifier",
            "description": "Filters the results to only the items for which the `buyer` has an\n`external_identifier` that matches this value."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment methods.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "store-payment-method",
        "summary": "New payment method",
        "description": "Stores and tokenizes a new payment method.",
        "tags": [
          "Payment Methods"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created payment method.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-methods/{payment_method_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4",
            "format": "uuid"
          },
          "name": "payment_method_id",
          "in": "path",
          "required": true,
          "description": "The ID of the payment method."
        }
      ],
      "get": {
        "operationId": "get-payment-method",
        "summary": "Get stored payment method",
        "description": "Gets the details for a stored payment method.",
        "tags": [
          "Payment Methods"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment method.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "PaymentMethod",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Card"
                    },
                    {
                      "$ref": "#/components/schemas/PayPal"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-payment-method",
        "summary": "Delete payment method",
        "description": "Removes a stored payment method.",
        "tags": [
          "Payment Methods"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-options": {
      "get": {
        "operationId": "list-payment-options",
        "summary": "List payment options",
        "description": "Returns a list of available payment method options for a currency\nand country.",
        "tags": [
          "Payment Options"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "US"
            },
            "in": "query",
            "name": "country",
            "description": "Filters the results to only the items which support this country code. A\ncountry is formatted as 2-letter ISO country code."
          },
          {
            "schema": {
              "type": "string",
              "example": "USD"
            },
            "in": "query",
            "name": "currency",
            "description": "Filters the results to only the items which support this currency code. A\ncurrency is formatted as 3-letter ISO currency code."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of available payment options for the given query\nparameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOptions"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if  any of the query parameters are not recognised.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400BadRequest"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-services": {
      "get": {
        "operationId": "list-payment-services",
        "summary": "List payment services",
        "description": "Lists the currently configured and activated payment services.",
        "tags": [
          "Payment Services"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          },
          {
            "schema": {
              "type": "string",
              "example": "card",
              "enum": [
                "card",
                "paypal"
              ]
            },
            "in": "query",
            "name": "method",
            "description": "Filters the results to only the items for which the `method` has been set to\nthis value."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment services.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServices"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "New payment service",
        "operationId": "add-payment-service",
        "description": "Adds a new payment service by providing a custom name and a value for each of the required fields.",
        "tags": [
          "Payment Services"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                },
                "examples": {
                  "Stripe": {
                    "value": {
                      "id": "stripe-card-faaad066-30b4-4997-a438-242b0752d7e1",
                      "type": "payment-service",
                      "payment_service_definition_id": "stripe",
                      "method": "card",
                      "display_name": "Stripe",
                      "status": "pending",
                      "accepted_currencies": [
                        "EUR"
                      ],
                      "accepted_countries": [
                        "DE"
                      ],
                      "environment": "production"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-services/{payment_service_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "stripe-card-46973e9d-88a7-44a6-abfe-be4ff0134ff4"
          },
          "name": "payment_service_id",
          "in": "path",
          "required": true,
          "description": "The ID of the payment service."
        }
      ],
      "get": {
        "operationId": "get-payment-service",
        "summary": "Get payment service",
        "description": "Retrieves the details of a single configured payment service.",
        "tags": [
          "Payment Services"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-payment-service",
        "summary": "Update payment service",
        "description": "Updates an existing payment service. Allows all fields to be changed except for the service ID.",
        "tags": [
          "Payment Services"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentServiceUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the updated payment service.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentService"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-payment-service",
        "summary": "Delete payment service",
        "description": "Deletes a specific active payment service.",
        "tags": [
          "Payment Services"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/payment-service-definitions": {
      "get": {
        "operationId": "list-payment-service-definitions",
        "summary": "List payment service definitions",
        "description": "Returns a list of all available payment service definitions.",
        "tags": [
          "Payment Service Definitions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of payment service definitions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceDefinitions"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/payment-service-definitions/{payment_service_definition_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "stripe-card"
          },
          "name": "payment_service_definition_id",
          "in": "path",
          "required": true,
          "description": "The unique ID of the payment service definition."
        }
      ],
      "get": {
        "operationId": "get-payment-service-definition",
        "summary": "Get payment service definition",
        "description": "Gets the definition for a payment service.",
        "tags": [
          "Payment Service Definitions"
        ],
        "responses": {
          "200": {
            "description": "Returns a payment service definition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentServiceDefinition"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/card-rules": {
      "get": {
        "operationId": "list-cards-rules",
        "summary": "List card rules",
        "description": "Returns a list of rules for card transactions.",
        "tags": [
          "Card Rules"
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 100,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          },
          {
            "schema": {
              "type": "string",
              "example": "staging",
              "enum": [
                "development",
                "staging",
                "production"
              ],
              "default": "production"
            },
            "in": "query",
            "name": "environment",
            "description": "Filters the results to only the items available in this environment."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of card rules.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRules"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "add-card-rule",
        "summary": "Create card rule",
        "description": "Creates a new rule that is used for card transactions.",
        "tags": [
          "Card Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRuleRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the newly created rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRule"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/card-rules/{card_rule_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "uuid",
            "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83"
          },
          "name": "card_rule_id",
          "in": "path",
          "required": true,
          "description": "The unique ID for a card rule."
        }
      ],
      "get": {
        "operationId": "get-card-rule",
        "summary": "Get card rule",
        "description": "Returns a rule that can be used for card transactions.",
        "tags": [
          "Card Rules"
        ],
        "responses": {
          "200": {
            "description": "Returns a card rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRule"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-card-rule",
        "summary": "Update card rule",
        "description": "Updates a rule that can be used for card transactions.",
        "tags": [
          "Card Rules"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRuleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the updated card rule.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardRule"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-card-rule",
        "summary": "Delete card rule",
        "description": "Deletes a specific card rule.",
        "tags": [
          "Card Rules"
        ],
        "responses": {
          "204": {
            "description": "Returns an empty response."
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "403": {
            "description": "Returns an error if the rule could not be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGeneric"
                },
                "examples": {
                  "Workflow is active": {
                    "value": {
                      "type": "error",
                      "code": "forbidden",
                      "status": 403,
                      "message": "The resource could not be removed as it's currently active.",
                      "details": []
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "operationId": "list-transactions",
        "summary": "List transactions",
        "description": "Lists all transactions for an account. Sorted by last `updated_at` status.",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "example": "be828248-56de-481e-a580-44b6e1d4df81"
            },
            "in": "query",
            "name": "search",
            "description": "Filters the transactions to only the items for which the `id` or\n`external_identifier` matches this value. This field allows for a partial\nmatch, matching any transaction for which either of the fields partially or\ncompletely matches."
          },
          {
            "schema": {
              "type": "string",
              "example": "captured",
              "enum": [
                "processing",
                "processing_failed",
                "captured",
                "capture_pending",
                "capture_declined",
                "authorized",
                "authorization_pending",
                "authorization_declined",
                "authorization_expired",
                "authorization_voided",
                "refunded",
                "buyer_approval_pending",
                "buyer_approval_declined",
                "buyer_approval_timedout"
              ]
            },
            "in": "query",
            "name": "transaction_status",
            "description": "Filters the results to only the transactions for which the `status`\nmatches this value."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "before_created_at",
            "description": "Filters the results to only transactions created before this ISO date-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "after_created_at",
            "description": "Filters the results to only transactions created after this ISO date-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "before_updated_at",
            "description": "Filters the results to only transactions last updated before this ISO\ndate-time string."
          },
          {
            "schema": {
              "type": "string",
              "example": "2012-12-12T10:53:43+00:00"
            },
            "in": "query",
            "name": "after_updated_at",
            "description": "Filters the results to only transactions last updated after this ISO\ndate-time string."
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "example": 1,
              "minimum": 1,
              "maximum": 500,
              "format": "int32"
            },
            "in": "query",
            "name": "limit",
            "description": "Defines the maximum number of items to return for this request."
          },
          {
            "schema": {
              "type": "string",
              "format": "",
              "example": "ZXhhbXBsZTE"
            },
            "in": "query",
            "name": "cursor",
            "description": "A cursor that identifies the page of results to return. This is used to\npaginate the results of this API.\n\nFor the first page of results, this parameter can be left out.\nFor additional pages, use the value returned by the API in\nthe `next_cursor` field. Similarly the `previous_cursor` can be used to\nreverse backwards in the list."
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of transactions for an account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transactions"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "New transaction",
        "tags": [
          "Transactions"
        ],
        "operationId": "authorize-new-transaction",
        "description": "Attempts to create an authorization for a payment method. In some cases it is\nnot possible to create the authorization without redirecting the user for\ntheir authorization. In these cases the status is set to\n`buyer_approval_pending` and an `approval_url` is returned.\n\nAdditionally, this endpoint accepts a few additional fields that allow for\nsimultaneous capturing and storage of the payment method.\n\n* `store` - Use this field to store the payment method for\nfuture use. Not all payment methods support this feature.\n* `capture` - Use this method to also perform a capture of the transaction\nafter it has been authorized.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionRequest"
              },
              "examples": {
                "Authorize a new card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorized and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorize, capture, and tokenize a card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "store": true,
                    "payment_method": {
                      "method": "card",
                      "number": "4111111111111111",
                      "expiration_date": "11/25",
                      "security_code": "123"
                    }
                  }
                },
                "Authorize and capture a PayPal transaction": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "paypal",
                      "redirect_url": "https://example.com/callback"
                    }
                  }
                },
                "Authorize and capture using a previously tokenized card": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD",
                    "intent": "capture",
                    "payment_method": {
                      "method": "id",
                      "id": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Returns the created transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                },
                "examples": {
                  "Card transaction": {
                    "value": {
                      "type": "transaction",
                      "id": "fe26475d-ec3e-4884-9553-f7356683f7f9",
                      "status": "authorized",
                      "amount": 1299,
                      "currency": "USD",
                      "payment_method": {
                        "type": "payment-method",
                        "id": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5",
                        "method": "card",
                        "status": "stored",
                        "details": {
                          "number": "XXXX XXXX XXXX 1111",
                          "expiration_date": "11/25",
                          "scheme": "visa"
                        },
                        "created_at": "2013-07-16T19:23:00.000+00:00",
                        "updated_at": "2013-07-16T19:23:00.000+00:00",
                        "external_identifier": "user-789123",
                        "buyer": {
                          "type": "buyer",
                          "id": "fe26475d-ec3e-4884-9553-f7356683f7f9",
                          "external_identifier": "user-789123",
                          "display_name": "John L.",
                          "created_at": "2013-07-16T19:23:00.000+00:00",
                          "updated_at": "2013-07-16T19:23:00.000+00:00"
                        }
                      },
                      "created_at": "2013-07-16T19:23:00.000+00:00",
                      "external_identifier": "user-789123",
                      "updated_at": "2019-08-24T14:15:22+00:00",
                      "payment_service": {
                        "id": "stripe-card-169f5226-4644-4d1e-ac36-14999e73601f",
                        "type": "payment-service",
                        "payment_service_definition_id": "stripe-card",
                        "method": "card",
                        "display_name": "Stripe (Main)",
                        "status": "pending",
                        "accepted_currencies": [
                          "EUR"
                        ],
                        "accepted_countries": [
                          "DE"
                        ],
                        "environment": "production"
                      }
                    }
                  },
                  "PayPal transaction": {
                    "value": {
                      "type": "transaction",
                      "id": "fe26475d-ec3e-4884-9553-f7356683f7f9",
                      "status": "buyer_approval_pending",
                      "amount": 1299,
                      "currency": "USD",
                      "payment_method": {
                        "type": "payment-method",
                        "id": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5",
                        "method": "paypal",
                        "status": "buyer_approval_pending",
                        "details": {
                          "email_address": null,
                          "approval_url": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve"
                        },
                        "created_at": "2013-07-16T19:23:00.000+00:00",
                        "updated_at": "2013-07-16T19:23:00.000+00:00",
                        "external_identifier": "user-789123",
                        "buyer": {
                          "type": "buyer",
                          "id": "fe26475d-ec3e-4884-9553-f7356683f7f9",
                          "external_identifier": "user-789123",
                          "display_name": "John L.",
                          "created_at": "2013-07-16T19:23:00.000+00:00",
                          "updated_at": "2013-07-16T19:23:00.000+00:00"
                        }
                      },
                      "created_at": "2013-07-16T19:23:00.000+00:00",
                      "external_identifier": "user-789123",
                      "updated_at": "2019-08-24T14:15:22+00:00",
                      "payment_service": {
                        "id": "stripe-card-169f5226-4644-4d1e-ac36-14999e73601f",
                        "type": "payment-service",
                        "payment_service_definition_id": "stripe-card",
                        "method": "card",
                        "display_name": "Stripe (Main)",
                        "status": "pending",
                        "accepted_currencies": [
                          "EUR"
                        ],
                        "accepted_countries": [
                          "DE"
                        ],
                        "environment": "production"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "get": {
        "operationId": "get-transaction",
        "summary": "Get transaction",
        "description": "Get information about a transaction.",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Returns a transaction resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/capture": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "capture-transaction",
        "summary": "Capture transaction",
        "description": "Captures a previously authorized transaction.",
        "tags": [
          "Transactions"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionCaptureRequest"
              },
              "examples": {
                "Capture an authorization": {
                  "value": {
                    "amount": 1299,
                    "currency": "USD"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the captured transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/authorize": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "authorize-transaction",
        "summary": "Authorize approved transaction",
        "description": "Authorize a previously approved transaction.",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Returns the authorized transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "400": {
            "description": "Returns an error if the request was badly formatted or missing required fields.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error400BadRequest"
                    },
                    {
                      "$ref": "#/components/schemas/Error400IncorrectJson"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/refund": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "post": {
        "operationId": "refund-transaction",
        "summary": "Refund or void transaction",
        "description": "Refunds or voids transaction. If this transaction was already captured, it\nwill issue a refund. If the transaction was not yet captured the authorization\nwill instead be voided.",
        "tags": [
          "Transactions"
        ],
        "responses": {
          "200": {
            "description": "Returns cancelled transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found or has not yet been created.",
            "content": {
              "application/json": {
                "schema": {
                  "x-model-name": "ErrorGeneric",
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Error404NotFound"
                    },
                    {
                      "$ref": "#/components/schemas/Error404PendingCreation"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transaction_id}/approve": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9"
          },
          "name": "transaction_id",
          "in": "path",
          "required": true,
          "description": "The ID for the transaction to get the information for."
        }
      ],
      "get": {
        "operationId": "approve-transaction",
        "summary": "Buyer approval callback",
        "description": "Internal API used as a redirect endpoint for transactions that require\nbuyer authorization.\n\nFor example, when a buyer tries to create a PayPal transaction, the buyer\nneeds to be sent to PayPal, after which they are sent back to this endpoint\nupon completion.\n\nThis API applies any required updates for the transaction based on its\nquery parameters and then redirects the browser back to the `redirect_url`\nspecified when the payment method was first created.",
        "tags": [
          "Transactions"
        ],
        "x-internal": true,
        "security": [],
        "responses": {
          "302": {
            "description": "Redirects the browser back to the `redirect_url` specified\nwhen the transaction was first created. It appends the transaction's\nID and status.",
            "headers": {
              "location": {
                "description": "The URL to redirect the browser to. This is the `redirect_url`\nspecified when the transaction was first created with some\nadditional query parameters appended.\n\n* `transaction_id` - The ID of the transaction\n* `transaction_status` - The current value of the\n  `status`  field of the transaction.",
                "schema": {
                  "type": "string",
                  "format": "url",
                  "example": "https://example.com/callback?transaction_id=77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5&transaction_status=tokenized"
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/approvals/{transaction_approval_token}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "NDY5NzNlOWQtODhhNy00NGE2LWFiZmUtYmU0ZmYwMTM0ZmY0"
          },
          "name": "transaction_approval_token",
          "in": "path",
          "required": true,
          "description": "The token used to redirect the buyer for approval of a transaction. This token\ndoes not represent anything to the consumer and no value should be derived\nfrom it except for internal use."
        }
      ],
      "get": {
        "operationId": "redirect-transaction-approval",
        "summary": "Approve payment method",
        "description": "Redirect a buyer to an alternative payment provider to approve their\ntransaction. This is mainly used with providers like PayPal and Klarna to\nredirect a buyer to their sites.",
        "tags": [
          "Transactions"
        ],
        "x-internal": true,
        "security": [],
        "responses": {
          "302": {
            "description": "Redirect the buyer to approve this transaction.",
            "headers": {
              "location": {
                "description": "The URL to redirect the browser to. This is the approval URL for an\nalternative payment method like PayPal.",
                "schema": {
                  "type": "string",
                  "format": "url",
                  "example": "https://paypal.com/..."
                }
              }
            }
          },
          "404": {
            "description": "Returns an error if the resource can not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404NotFound"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "operationId": "get-current-user",
        "summary": "Get current",
        "description": "Get current user information.",
        "tags": [
          "Users"
        ],
        "x-internal": true,
        "responses": {
          "200": {
            "description": "Returns the currently authenticated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Returns an error if no valid authentication was provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401Unauthorized"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Buyer": {
        "title": "Buyer",
        "type": "object",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource. Is always `buyer`.",
            "example": "buyer",
            "enum": [
              "buyer"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique Gr4vy ID for this buyer.",
            "format": "uuid"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records.",
            "example": "user-789123",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "John L.",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "created_at": {
            "type": "string",
            "description": "The date and time\nwhen this buyer was created in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time\nwhen this buyer was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          }
        }
      },
      "Buyers": {
        "title": "Buyers",
        "type": "object",
        "description": "A list of buyers.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of buyers.",
            "items": {
              "$ref": "#/components/schemas/Buyer"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "BuyerRequest": {
        "title": "Buyer (Create)",
        "type": "object",
        "description": "A request to create a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "properties": {
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the buyer against your own records. This value needs to be unique for all buyers.",
            "example": "user-789123",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          },
          "display_name": {
            "type": "string",
            "description": "A unique name for this buyer which is used in the Gr4vy admin panel to give a buyer a human readable name.",
            "example": "John L.",
            "nullable": true,
            "minLength": 1,
            "maxLength": 200
          }
        }
      },
      "BuyerUpdate": {
        "title": "Buyer (Update)",
        "type": "object",
        "description": "A request to update a buyer.",
        "x-tags": [
          "Buyers"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BuyerRequest"
          }
        ]
      },
      "Card": {
        "title": "Card",
        "description": "A stored card.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "status": {
            "type": "string",
            "description": "The state of the card tokenization.",
            "example": "stored",
            "enum": [
              "processing",
              "processing_failed",
              "stored",
              "used"
            ]
          },
          "method": {
            "type": "string",
            "description": "`card`.",
            "example": "card",
            "enum": [
              "card"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this payment method was first created in our\nsystem.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time when this payment method was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the payment method\nagainst your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer": {
            "description": "The optional buyer for which this payment method has been stored.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              }
            ]
          },
          "details": {
            "$ref": "#/components/schemas/CardDetails"
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "nullable": true,
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment this payment method has been stored for. This will be null\nof the payment method was not stored."
          }
        }
      },
      "Card--Tokenized": {
        "title": "Card (Tokenized)",
        "description": "A mini format version of the card.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "method": {
            "type": "string",
            "description": "`card`.",
            "example": "card",
            "enum": [
              "card"
            ]
          },
          "details": {
            "$ref": "#/components/schemas/CardDetails"
          }
        }
      },
      "CardDetails": {
        "title": "Card details",
        "description": "Additional details about a stored card.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "suffix": {
            "type": "string",
            "description": "The last 4 digits of the card number.",
            "example": "1111"
          },
          "scheme": {
            "type": "string",
            "example": "visa",
            "enum": [
              "visa",
              "mastercard",
              "american-express",
              "diners-club",
              "discover",
              "jcb",
              "unionpay",
              "maestro",
              "elo",
              "mir",
              "hiper",
              "hipercard"
            ],
            "description": "The type of the card."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date for a card.",
            "example": "11/25",
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5
          }
        }
      },
      "CardRequest": {
        "title": "Card",
        "type": "object",
        "description": "Card details to use in a transaction or to register a new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "number",
          "expiration_date",
          "security_code"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "`card`.",
            "example": "card",
            "enum": [
              "card"
            ]
          },
          "number": {
            "type": "string",
            "minLength": 14,
            "maxLength": 16,
            "example": "4111111111111111",
            "pattern": "^[0-9]{14,16}$",
            "description": "The 15-16 digit number for this card as it can be found on the\nfront of the card."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date of the card, formatted `MM/YY`.",
            "example": "11/25",
            "pattern": "^\\d{2}/\\d{2}$",
            "minLength": 5,
            "maxLength": 5
          },
          "security_code": {
            "type": "string",
            "description": "The 3 or 4 digit security code often found on the card. This often\nreferred to as the CVV or CVD.",
            "pattern": "^\\d{3,4}$",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the card against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to store this card for. Setting this to\nanything other than `production` will force Gr4vy to use the payment\nservices configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          }
        }
      },
      "CardRule": {
        "title": "Card Rule",
        "type": "object",
        "description": "A card rule that defines a custom payment provider to use for a card\ntransaction. Multiple rules can exists at any time and they are processed by\npriority.",
        "x-tags": [
          "Card Rules"
        ],
        "properties": {
          "type": {
            "type": "string",
            "example": "card-rule",
            "description": "`card-rule`.",
            "enum": [
              "card-rule"
            ]
          },
          "id": {
            "type": "string",
            "example": "8d3fe99b-1422-42e6-bbb3-932d95ae5f79",
            "description": "The ID of the rule.",
            "format": "uuid"
          },
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Whether this rule is currently in use. Rules can be deactivated to allow\nfor them to be kept around and re-activated at a later date."
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment to use this rule in. This rule will only be used\nfor transactions created in that environment."
          },
          "conditions": {
            "type": "array",
            "description": "One or more conditions that apply for this rule. Each condition\nneeds to match for this rule to go into effect.",
            "minItems": 1,
            "items": {
              "x-model-name": "CardRule",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CardRuleTextCondition"
                },
                {
                  "$ref": "#/components/schemas/CardRuleNumberCondition"
                }
              ]
            }
          },
          "payment_service_ids": {
            "type": "array",
            "description": "A list of IDs for the payment services to use, in order of priority.\nThe payment services all need to process cards.",
            "example": [
              "stripe-card-f47db210-8e30-4f74-8123-b834604f2042",
              "card-braintree-0bb93ab0-86ef-4ad5-addf-b69913128d96"
            ],
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a rule. Rules with a lower position value\nare processed first."
          },
          "unprocessable_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "decline"
            ],
            "description": "Defines what strategy to use when all of the payment services defined in\nthis rule declined or otherwise were not able to process the card.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `decline` - Decline the transaction."
          },
          "invalid_rule_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "skip",
              "decline"
            ],
            "description": "Defines what strategy to use when this rule is not valid. This can happen\nwhen the rule has triggered for a certain transaction but none of the\nlisted payment services are eligible to process that transaction currency.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `skip` - Skip this rule and instead move on to the next highest priority\nrule.\n* `decline` - Decline the transaction."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this rule was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this rule was last updated."
          }
        }
      },
      "CardRules": {
        "title": "Card Rules",
        "type": "object",
        "description": "A list of card rules.",
        "x-tags": [
          "Card Rules"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of card rules.",
            "items": {
              "$ref": "#/components/schemas/CardRule"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "CardRuleNumberCondition": {
        "title": "Card rule (Number condition)",
        "type": "object",
        "description": "Part of a rule that matches numeric fields. It defines the condition under\nwhich this rule applies.",
        "x-tags": [
          "Card Workflows"
        ],
        "required": [
          "match",
          "key",
          "operator",
          "value"
        ],
        "properties": {
          "match": {
            "type": "string",
            "description": "`number`.",
            "example": "number",
            "enum": [
              "number"
            ]
          },
          "key": {
            "type": "string",
            "description": "The transaction field to filter by.",
            "example": "amount",
            "enum": [
              "amount"
            ]
          },
          "operator": {
            "type": "string",
            "description": "The comparison to make to `value` property.",
            "example": ">="
          },
          "value": {
            "type": "number",
            "description": "The values to compare the `key` to.",
            "example": 200,
            "minimum": 0,
            "maximum": 99999
          }
        }
      },
      "CardRuleTextCondition": {
        "title": "Card rule (Text)",
        "type": "object",
        "description": "Part of a rule that matches text fields. It defines the condition under\nwhich this rule applies.",
        "x-tags": [
          "Card Rules"
        ],
        "required": [
          "match",
          "key",
          "operator",
          "values"
        ],
        "properties": {
          "match": {
            "type": "string",
            "description": "`text`.",
            "example": "text",
            "enum": [
              "text"
            ]
          },
          "key": {
            "type": "string",
            "description": "The transaction field to filter by.",
            "example": "currency",
            "enum": [
              "currency",
              "scheme"
            ]
          },
          "operator": {
            "type": "string",
            "description": "The comparison to make to `value` property.",
            "example": "IN",
            "enum": [
              "IN",
              "NOT IN"
            ]
          },
          "values": {
            "type": "array",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 50
            },
            "description": "The values to compare the `key` to.",
            "example": [
              "USD",
              "EUR",
              "amex",
              "visa"
            ]
          }
        }
      },
      "CardRuleRequest": {
        "title": "Card Rule (Create)",
        "type": "object",
        "description": "Creates a new rule for a card transactions.",
        "x-tags": [
          "Card Rules"
        ],
        "required": [
          "conditions",
          "payment_service_ids"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Whether this rule is currently in use. Rules can be deactivated to allow\nfor them to be kept around and re-activated at a later date."
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment to use this rule in. This rule will only be used\nfor transactions created in that environment."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a rule. Rules with a lower position value\nare processed first. When a rule is inserted at a position, any rules with\nthe the same value or higher are down a position accordingly. When left\nout, the rule is inserted at the end of the list."
          },
          "conditions": {
            "type": "array",
            "description": "One or more conditions that apply for this rule. Each condition\nneeds to match for this rule to go into effect.",
            "minItems": 1,
            "items": {
              "x-model-name": "CardRule",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CardRuleTextCondition"
                },
                {
                  "$ref": "#/components/schemas/CardRuleNumberCondition"
                }
              ]
            }
          },
          "payment_service_ids": {
            "type": "array",
            "description": "A list of IDs for the payment services to use, in order of priority.\nThe payment services all need to process cards.",
            "example": [
              "stripe-card-f47db210-8e30-4f74-8123-b834604f2042",
              "card-braintree-0bb93ab0-86ef-4ad5-addf-b69913128d96"
            ],
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "unprocessable_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "decline"
            ],
            "description": "Defines what strategy to use when all of the payment services defined in\nthis rule declined or otherwise were not able to process the card.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `decline` - Decline the transaction."
          },
          "invalid_rule_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "skip",
              "decline"
            ],
            "description": "Defines what strategy to use when this rule is not valid. This can happen\nwhen the rule has triggered for a certain transaction but none of the\nlisted payment services are eligible to process that transaction currency.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `skip` - Skip this rule and instead move on to the next highest priority\nrule.\n* `decline` - Decline the transaction."
          }
        }
      },
      "CardRuleUpdate": {
        "title": "Card Rule (Update)",
        "type": "object",
        "description": "Updates a rule for a card transactions.",
        "x-tags": [
          "Card Rules"
        ],
        "properties": {
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Whether this rule is currently in use. Rules can be deactivated to allow\nfor them to be kept around and re-activated at a later date."
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment to use this rule in. This rule will only be used\nfor transactions created in that environment."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a rule. Rules with a lower position value\nare processed first. When a rule is inserted at a position, any rules with\nthe the same value or higher are down a position accordingly."
          },
          "conditions": {
            "type": "array",
            "description": "One or more conditions that apply for this rule. Each condition\nneeds to match for this rule to go into effect.",
            "minItems": 1,
            "items": {
              "x-model-name": "CardRule",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CardRuleTextCondition"
                },
                {
                  "$ref": "#/components/schemas/CardRuleNumberCondition"
                }
              ]
            }
          },
          "payment_service_ids": {
            "type": "array",
            "description": "A list of IDs for the payment services to use, in order of priority.\nThe payment services all need to process cards.",
            "example": [
              "stripe-card-f47db210-8e30-4f74-8123-b834604f2042",
              "card-braintree-0bb93ab0-86ef-4ad5-addf-b69913128d96"
            ],
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 100
            }
          },
          "unprocessable_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "decline"
            ],
            "description": "Defines what strategy to use when all of the payment services defined in\nthis rule declined or otherwise were not able to process the card.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `decline` - Decline the transaction."
          },
          "invalid_rule_fallback_strategy": {
            "type": "string",
            "example": "use_all_providers",
            "default": "use_all_providers",
            "enum": [
              "use_all_providers",
              "skip",
              "decline"
            ],
            "description": "Defines what strategy to use when this rule is not valid. This can happen\nwhen the rule has triggered for a certain transaction but none of the\nlisted payment services are eligible to process that transaction currency.\n\n* `use_all_providers` - Try all payment services enabled for this currency in\norder of priority, even if they are not listed in this rule. This is the\ndefault behaviour for a rule.\n* `skip` - Skip this rule and instead move on to the next highest priority\nrule.\n* `decline` - Decline the transaction."
          }
        }
      },
      "ErrorGeneric": {
        "title": "Generic Error",
        "type": "object",
        "description": "A generic client error.",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this object. This is always `error`.",
            "enum": [
              "error"
            ],
            "example": "error",
            "default": "error"
          },
          "code": {
            "type": "string",
            "description": "A custom code to further describe the type of error being returned. This code provides further specification within the HTTP `status` code and can be used by a program to define logic based on the error.",
            "example": "incorrect_json"
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code of this error.",
            "format": "int32",
            "default": 0,
            "minimum": 200,
            "exclusiveMaximum": true,
            "maximum": 600,
            "example": 499
          },
          "message": {
            "type": "string",
            "description": "A human readable message that describes the error. The content of this field should not be used to determine any business logic. ",
            "example": "The request body was not valid JSON."
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error400BadRequest": {
        "title": "Bad Request",
        "type": "object",
        "description": "Bad Request (HTTP 400).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`bad_request`.",
            "example": "bad_request",
            "enum": [
              "bad_request"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`400`.",
            "example": 400,
            "enum": [
              400
            ]
          },
          "message": {
            "type": "string",
            "description": "Describes the fields that are missing or incorrectly formatted in the API\nrequest.",
            "example": "Missing '****' field"
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error400IncorrectJson": {
        "title": "Incorrect JSON",
        "type": "object",
        "description": "Incorrect JSON (HTTP 400).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`incorrect_json`.",
            "example": "incorrect_json",
            "enum": [
              "incorrect_json"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`400`.",
            "example": 400,
            "enum": [
              400
            ]
          },
          "message": {
            "type": "string",
            "description": "Incorrect JSON. The request body could not be parsed as valid JSON.",
            "example": "Incorrect JSON. The request body could not be parsed as valid JSON."
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error401Unauthorized": {
        "title": "Unauthorized Error",
        "type": "object",
        "description": "Unauthorized Error (HTTP 401).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`unauthorized`.",
            "example": "unauthorized",
            "enum": [
              "unauthorized"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`401`.",
            "example": 401,
            "enum": [
              401
            ]
          },
          "message": {
            "type": "string",
            "description": "No valid API authentication found.",
            "example": "No valid API authentication found",
            "enum": [
              "No valid API authentication found"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error404PendingCreation": {
        "title": "Pending Creation Error",
        "type": "object",
        "description": "Pending Creation Error (HTTP 404).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`pending_creation`.",
            "example": "pending_creation",
            "enum": [
              "pending_creation"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`404`.",
            "example": 404,
            "enum": [
              404
            ]
          },
          "message": {
            "type": "string",
            "description": "The resource is still pending.",
            "example": "The resource is still pending",
            "enum": [
              "The resource is still pending"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error404NotFound": {
        "title": "Not Found Error",
        "type": "object",
        "description": "Not Found Error (HTTP 404).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`not_found`.",
            "example": "not_found",
            "enum": [
              "not_found"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`404`.",
            "example": 404,
            "enum": [
              404
            ]
          },
          "message": {
            "type": "string",
            "description": "The resource could not be found.",
            "example": "The resource could not be found",
            "enum": [
              "The resource could not be found"
            ]
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "Error409DuplicateRecord": {
        "title": "Duplicate Record Error",
        "type": "object",
        "description": "Duplicate Record Error (HTTP 409).",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`error`.",
            "enum": [
              "error"
            ],
            "example": "error"
          },
          "code": {
            "type": "string",
            "description": "`duplicate_record`.",
            "example": "duplicate_record",
            "enum": [
              "duplicate_record"
            ]
          },
          "status": {
            "type": "integer",
            "description": "`409`.",
            "example": 409,
            "enum": [
              409
            ]
          },
          "message": {
            "type": "string",
            "description": "Further details on the field that triggered the error.",
            "example": "A duplicate ecord exists with this external_identifier value"
          },
          "details": {
            "type": "array",
            "description": "A list of detail objects that further clarify the reason for the error.\nNot every error supports more detail.",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          }
        }
      },
      "ErrorDetail": {
        "title": "Error details",
        "description": "Additional detail about the part of a request body that caused an issue.",
        "type": "object",
        "x-tags": [
          "Errors"
        ],
        "properties": {
          "location": {
            "type": "string",
            "example": "body",
            "description": "The location where the error caused an issue.",
            "enum": [
              "query",
              "body",
              "path",
              "header"
            ]
          },
          "type": {
            "type": "string",
            "example": "value_error.missing",
            "description": "A unique identifier for the type of error that occurred."
          },
          "pointer": {
            "type": "string",
            "example": "/payment_method/number",
            "description": "The exact item for which the validation did not succeed. This is a JSON\npointer for request bodies, while for query, path, and header parameters\nit is the name of the parameter."
          },
          "message": {
            "type": "string",
            "example": "field required",
            "description": "A human readable message for this error detail."
          }
        }
      },
      "APIKeyPair": {
        "title": "API Key Pair",
        "type": "object",
        "description": "Details about an API key pair.",
        "x-internal": true,
        "x-tags": [
          "API Key Pairs"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`api-key-pair`.",
            "example": "api-key-pair",
            "enum": [
              "api-key-pair"
            ]
          },
          "id": {
            "type": "string",
            "maxLength": 43,
            "minLength": 43,
            "pattern": "^[A-Za-z0-9-_]+$",
            "description": "A unique ID for this key-pair. This ID is the thumbprint of the key.",
            "example": "SopiN5XU0IWy8Xe9mwx1ICQbKh4-ydCDPx3LIyArkVI"
          },
          "private_key": {
            "type": "string",
            "nullable": true,
            "description": "The private key for the key-pair. This is only returned after\nthe key is initially requested. For subsequent API calls this value is\n`null`.",
            "example": "-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this key pair was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this key pair was last updated."
          }
        }
      },
      "APIKeyPairs": {
        "title": "A list of active API key pairs",
        "type": "object",
        "description": "A list of the currently active API key pairs.",
        "x-internal": true,
        "x-tags": [
          "API Key Pairs"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIKeyPair"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "Merchant": {
        "title": "Merchant",
        "type": "object",
        "description": "A merchant.",
        "x-internal": true,
        "x-tags": [
          "Merchants"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`merchant`.",
            "example": "merchant",
            "enum": [
              "merchant"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique short-name of the merchant.",
            "example": "plantly"
          },
          "display_name": {
            "type": "string",
            "description": "The name of this merchant as it will be displayed in the admin UI.",
            "example": "Plantly Inc"
          }
        }
      },
      "PaymentMethod": {
        "title": "Payment method",
        "description": "A generic payment method.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "status": {
            "type": "string",
            "description": "The state of the payment method.",
            "example": "stored",
            "enum": [
              "processing",
              "processing_failed",
              "buyer_approval_pending",
              "buyer_approval_declined",
              "buyer_approval_timedout",
              "buyer_approved",
              "stored",
              "used"
            ]
          },
          "method": {
            "type": "string",
            "description": "The type of this payment method.",
            "example": "card",
            "enum": [
              "card",
              "paypal"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this payment method was first created in our\nsystem.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time when this payment method was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the payment method\nagainst your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer": {
            "description": "The optional buyer for which this payment method has been stored.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              }
            ]
          },
          "details": {
            "description": "Additional details about a payment method.",
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Partial number details for a stored card, hiding all but the last few\nnumbers.",
                "example": "XXXX XXXX XXXX 1111"
              },
              "scheme": {
                "type": "string",
                "example": "visa",
                "enum": [
                  "visa",
                  "mastercard",
                  "american-express",
                  "diners-club",
                  "discover",
                  "jcb",
                  "unionpay",
                  "maestro",
                  "elo",
                  "mir",
                  "hiper",
                  "hipercard"
                ],
                "description": "The type of the card."
              },
              "expiration_date": {
                "type": "string",
                "description": "The expiration date for a card.",
                "example": "11 / 21"
              },
              "email_address": {
                "type": "string",
                "example": "john@example.com",
                "description": "The email address associated to the payment method.",
                "nullable": true
              },
              "approval_url": {
                "type": "string",
                "format": "uri",
                "example": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve",
                "description": "The optional URL that the buyer needs to be redirected to to further authorize the payment method.",
                "nullable": true
              }
            }
          }
        }
      },
      "PaymentMethods": {
        "title": "Payment Methods",
        "type": "object",
        "description": "A list of stored payment methods.",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of stored payment methods.",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentMethods--Tokenized": {
        "title": "Payment Methods (Token only)",
        "type": "object",
        "description": "A list of stored payment methods in token format.",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of stored payment methods in token format.",
            "items": {
              "$ref": "#/components/schemas/Card--Tokenized"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentService": {
        "title": "A payment service",
        "type": "object",
        "description": "An active, configured payment service.",
        "x-tags": [
          "Payment Services"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this payment service.",
            "example": "stripe-card-faaad066-30b4-4997-a438-242b0752d7e1",
            "minLength": 1,
            "maxLength": 200
          },
          "type": {
            "type": "string",
            "description": "The type of this resource.",
            "example": "payment-service",
            "enum": [
              "payment-service"
            ]
          },
          "payment_service_definition_id": {
            "type": "string",
            "description": "The ID of the payment service definition used to create this service.\n",
            "example": "stripe-card",
            "minLength": 1,
            "maxLength": 50
          },
          "method": {
            "type": "string",
            "description": "Defines the ID of the payment method that this service handles.",
            "example": "card",
            "enum": [
              "card",
              "paypal"
            ]
          },
          "display_name": {
            "type": "string",
            "description": "The custom name set for this service.",
            "example": "Stripe (Main)",
            "minLength": 1,
            "maxLength": 50
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "created",
              "failed"
            ],
            "description": "The current status of this service. This will start off as pending, move\nto created, and might eventually move to an error status if and when the\ncredentials are no longer valid.\n"
          },
          "accepted_currencies": {
            "type": "array",
            "description": "A list of currencies for which this service is enabled, in ISO 4217\nthree-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "example": [
              "EUR"
            ]
          },
          "accepted_countries": {
            "type": "array",
            "description": "A list of countries for which this service is enabled, in ISO two-letter\ncode format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "example": [
              "DE"
            ]
          },
          "credentials_mode": {
            "type": "string",
            "example": "live",
            "enum": [
              "sandbox",
              "live"
            ],
            "default": "live",
            "description": "Defines if the credentials are intended for the service's live API or\nsandbox/test API."
          },
          "active": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "Defines if this service is currently active or not."
          },
          "environments": {
            "type": "array",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "string",
              "enum": [
                "development",
                "staging",
                "production"
              ]
            },
            "example": [
              "production"
            ],
            "default": [
              "production"
            ],
            "description": "Determines the Gr4vy environments in which this service should be\navailable. This can be used in combination with the `environment`\nparameters in the payment method and transaction APIs to route\ntransactions through this service."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a payment service. Payment services with a lower\nposition value are processed first."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this service was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2012-12-12T10:53:43+00:00",
            "description": "The date and time when this service was last updated."
          }
        }
      },
      "PaymentServices": {
        "title": "A list of active payment services",
        "type": "object",
        "description": "A list of active, configured payment services.",
        "x-tags": [
          "Payment Services"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentService"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentServiceRequest": {
        "title": "Payment Service (Create)",
        "type": "object",
        "description": "Request body for activating a payment service.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "display_name",
          "payment_service_definition_id",
          "fields",
          "accepted_currencies",
          "accepted_countries"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/PaymentServiceUpdate"
          },
          {
            "type": "object",
            "properties": {
              "payment_service_definition_id": {
                "type": "string",
                "description": "The ID of the payment service to use.",
                "example": "stripe-card",
                "minLength": 1,
                "maxLength": 50
              }
            }
          }
        ]
      },
      "PaymentServiceUpdate": {
        "title": "Payment Service (Update)",
        "type": "object",
        "description": "Request body for updating an active payment service.",
        "x-tags": [
          "Request Bodies"
        ],
        "properties": {
          "display_name": {
            "type": "string",
            "description": "A custom name for the payment service. This will be shown in the Admin UI.",
            "example": "Stripe (Main)",
            "minLength": 1,
            "maxLength": 50
          },
          "fields": {
            "type": "array",
            "description": "A list of fields, each containing a key-value pair for each field defined by the definition for this payment service.",
            "items": {
              "type": "object",
              "description": "A field containing a key-value pair for a required field defined by the service for this payment service.",
              "required": [
                "key",
                "value"
              ],
              "properties": {
                "key": {
                  "type": "string",
                  "description": "The key of the field to set a value for.",
                  "example": "private_key",
                  "minLength": 1,
                  "maxLength": 50
                },
                "value": {
                  "type": "string",
                  "description": "The value of a field to set.",
                  "example": "sk_test_4eC39HqLyjWDarjtT1zdp7dc",
                  "minLength": 1,
                  "maxLength": 1500
                }
              }
            }
          },
          "accepted_countries": {
            "type": "array",
            "description": "A list of countries that this payment service needs to support in ISO two-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 2,
              "maxLength": 2
            },
            "example": [
              "US",
              "GB",
              "DE"
            ]
          },
          "accepted_currencies": {
            "type": "array",
            "description": "A list of currencies that this payment service needs to support in ISO 4217 three-letter code format.",
            "minItems": 1,
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "example": [
              "EUR",
              "USD",
              "GBP"
            ]
          },
          "credentials_mode": {
            "type": "string",
            "example": "live",
            "enum": [
              "sandbox",
              "live"
            ],
            "default": "live",
            "description": "Defines if the credentials are intended for the service's live API or\nsandbox/test API."
          },
          "active": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "Defines if this service is currently active or not."
          },
          "environments": {
            "type": "array",
            "minItems": 0,
            "maxItems": 3,
            "items": {
              "type": "string",
              "enum": [
                "development",
                "staging",
                "production"
              ]
            },
            "example": [
              "production"
            ],
            "default": [
              "production"
            ],
            "description": "Determines the Gr4vy environments in which this service should be\navailable. This can be used in combination with the `environment`\nparameters in the payment method and transaction APIs to route\ntransactions through this service."
          },
          "position": {
            "type": "number",
            "example": 1,
            "description": "The numeric rank of a payment service. Payment services with a lower\nposition value are processed first. When a payment services is inserted at\na position, any payment services with the the same value or higher are\nshifted down a position accordingly. When left out, the payment service is\ninserted at the end of the list."
          }
        }
      },
      "PaymentServiceDefinition": {
        "title": "Payment Service Definition",
        "type": "object",
        "description": "An available payment service that can be configured.",
        "x-tags": [
          "Discovery"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the payment service. This is the underlying provider followed by a dash followed by the payment method ID.",
            "example": "stripe-card"
          },
          "type": {
            "type": "string",
            "description": "`payment-service-definition`.",
            "default": "payment-service-definition",
            "example": "payment-service-definition"
          },
          "display_name": {
            "type": "string",
            "description": "The display name of this service.",
            "example": "Stripe"
          },
          "method": {
            "type": "string",
            "description": "The ID of the payment method that this services handles.",
            "example": "card",
            "enum": [
              "card",
              "paypal"
            ]
          },
          "fields": {
            "type": "array",
            "description": "A list of fields that need to be submitted when activating the payment. service.",
            "minItems": 1,
            "items": {
              "type": "object",
              "description": "A single field that needs to be submitted for a payment service when it\nis created.",
              "properties": {
                "key": {
                  "type": "string",
                  "example": "private_api_key",
                  "description": "The key of a field that needs to be submitted."
                },
                "display_name": {
                  "type": "string",
                  "example": "Private API key",
                  "description": "The name to display for a field in the dashboard."
                },
                "required": {
                  "type": "boolean",
                  "example": true,
                  "description": "Defines if this field is required when the service is created."
                },
                "format": {
                  "type": "string",
                  "example": "text",
                  "description": "Defines the type of input that needs to be rendered for this field."
                }
              }
            }
          },
          "supported_currencies": {
            "type": "array",
            "description": "A list of three-letter ISO currency codes that this service supports.",
            "items": {
              "type": "string",
              "minLength": 3,
              "maxLength": 3
            },
            "minItems": 1,
            "example": [
              "USD",
              "GBP",
              "EUR"
            ]
          },
          "supported_countries": {
            "type": "array",
            "description": "A list of two-letter ISO country codes that this service supports.",
            "items": {
              "type": "string"
            },
            "minItems": 1,
            "example": [
              "US",
              "GB",
              "DE"
            ]
          }
        }
      },
      "PaymentServiceDefinitions": {
        "title": "Payment service definitions",
        "type": "object",
        "description": "A list of available payment services definitions.",
        "x-tags": [
          "Discovery"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentServiceDefinition"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 100,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "PaymentOption": {
        "title": "Payment option",
        "type": "object",
        "description": "An available payment option for a locale.",
        "x-tags": [
          "Payment Option"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-option`.",
            "example": "payment-option",
            "enum": [
              "payment-option"
            ]
          },
          "method": {
            "type": "string",
            "description": "The type of payment method that is available.",
            "example": "card",
            "enum": [
              "card",
              "paypal"
            ]
          }
        }
      },
      "PaymentOptions": {
        "title": "A list of payment options",
        "type": "object",
        "description": "A list of payment options.",
        "x-tags": [
          "Payment Options"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentOption"
            }
          }
        }
      },
      "PayPal": {
        "title": "PayPal Account",
        "description": "A stored PayPal account.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "`payment-method`.",
            "example": "payment-method",
            "enum": [
              "payment-method"
            ]
          },
          "id": {
            "type": "string",
            "description": "The unique ID of the payment method.",
            "format": "uuid",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          },
          "status": {
            "type": "string",
            "description": "The state of the account tokenization. After the first call this will\nbe set to `buyer_approval_pending` and the response will include\nan `approval_url`. The buyer needs to be redirected to this URL\nto authorize the future payments.",
            "example": "buyer_approval_pending",
            "enum": [
              "processing",
              "processing_failed",
              "buyer_approval_pending",
              "buyer_approval_declined",
              "buyer_approval_timedout",
              "buyer_approved",
              "stored",
              "used"
            ]
          },
          "method": {
            "type": "string",
            "description": "`paypal`.",
            "example": "paypal",
            "enum": [
              "paypal"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this payment method was first created in our\nsystem.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "updated_at": {
            "type": "string",
            "description": "The date and time when this payment method was last updated in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the payment method\nagainst your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer": {
            "description": "The optional buyer for which this payment method has been stored.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Buyer"
              }
            ]
          },
          "details": {
            "$ref": "#/components/schemas/PayPalDetails"
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "nullable": true,
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment this payment method has been stored for. This will be null\nof the payment method was not stored."
          }
        }
      },
      "PayPalDetails": {
        "title": "PayPal account details",
        "description": "Additional details about a stored PayPal account.",
        "type": "object",
        "x-tags": [
          "Payment Methods"
        ],
        "properties": {
          "email_address": {
            "type": "string",
            "example": "john@example.com",
            "description": "The email address associated to the PayPal account.",
            "nullable": true
          },
          "approval_url": {
            "type": "string",
            "format": "uri",
            "example": "https://api.{merchant}.app.gr4vy.com/payment-methods/ffc88ec9-e1ee-45ba-993d-b5902c3b2a8c/approve",
            "description": "The optional URL that the buyer needs to be redirected to to further authorize their PayPal payments.",
            "nullable": true
          }
        }
      },
      "PayPalRequest": {
        "title": "PayPal Account",
        "type": "object",
        "description": "PayPal request to use in a transaction or to register a new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "redirect_url"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "`paypal`.",
            "example": "paypal",
            "enum": [
              "paypal"
            ]
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer to after they have authorized their\nPayPal transaction.",
            "example": "https://example.com/callback"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the account against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          }
        }
      },
      "Session": {
        "title": "Session",
        "description": "A user session.",
        "type": "object",
        "x-tags": [
          "Authentication"
        ],
        "x-internal": true,
        "properties": {
          "type": {
            "type": "string",
            "example": "auth.session",
            "description": "`auth.session`.",
            "enum": [
              "auth.session"
            ]
          },
          "token_type": {
            "type": "string",
            "enum": [
              "bearer"
            ],
            "example": "bearer",
            "description": "`bearer`."
          },
          "access_token": {
            "type": "string",
            "description": "A server-signed JWT that can be used as the bearer token in any\nAPI calls.",
            "example": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ"
          },
          "refresh_token": {
            "type": "string",
            "description": "A server-signed JWT that can be used as the bearer token to refresh the\naccess token.",
            "example": "nJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ3FIOG9vSGV4VHo4QzAyg5T1JvNc"
          },
          "expires_in": {
            "type": "integer",
            "format": "int64",
            "example": 3600,
            "description": "The time in seconds in seconds by which the `access_token` token will\nexpire."
          }
        }
      },
      "SessionRequest": {
        "title": "Session (Create)",
        "type": "object",
        "description": "A request to create a session using an email address and password.",
        "x-internal": true,
        "x-tags": [
          "Authentication"
        ],
        "required": [
          "email_address",
          "password"
        ],
        "properties": {
          "email_address": {
            "type": "string",
            "description": "The email address of the user to log in as.",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "description": "The password the user to log in as.",
            "example": "this-is-n0t-a-secure-passw0rd"
          }
        }
      },
      "Status": {
        "title": "Status",
        "type": "object",
        "description": "In many cases the Gr4vy API returns asynchronously, kicking off a job to\ncreate an authorization or a transaction, and returning a `Status` object with\nthe ID of the pending object. The ID of this resource can be used to query an\nobjects status, or additionally the client can use Pub/Sub to subscribe to the\ncreation of the pending object.",
        "x-tags": [
          "Statuses"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this object. This is always `status`.",
            "enum": [
              "status"
            ],
            "example": "status"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending"
            ],
            "example": "pending",
            "description": "The status of this resource being created. This is always `pending`."
          },
          "resource_type": {
            "type": "string",
            "description": "The type of the object that is pending.\n",
            "example": "transaction",
            "enum": [
              "transaction",
              "payment-method"
            ]
          },
          "resource_id": {
            "type": "string",
            "format": "uuid",
            "example": "8724fd24-5489-4a5d-90fd-0604df7d3b83",
            "description": "The ID of the object for which this status has been created."
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the record against your own records.",
            "example": "user-789123",
            "nullable": true
          }
        }
      },
      "Statuses": {
        "title": "Statuses",
        "description": "A list of status resources.",
        "type": "object",
        "x-tags": [
          "Statuses"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of authorizations.",
            "items": {
              "$ref": "#/components/schemas/Status"
            }
          }
        }
      },
      "TokenizedRequest": {
        "title": "Tokenized payment method request",
        "type": "object",
        "description": "Details for a previously tokenized payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method",
          "id"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "`id`.",
            "example": "id",
            "enum": [
              "id"
            ]
          },
          "id": {
            "type": "string",
            "description": "A ID that represents a previously tokenized payment method.\nThis token can represent any type of payment method.",
            "example": "46973e9d-88a7-44a6-abfe-be4ff0134ff4"
          }
        }
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "description": "A transaction record.",
        "x-tags": [
          "Transactions"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this resource. Is always `transaction`.",
            "example": "transaction",
            "enum": [
              "transaction"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique identifier for this transaction.",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "The status of the transaction being processed. This is different from the\n`status` field in that it represents the status of the transaction at the\npayment processor, not the status of the transaction created in Gr4vy.",
            "example": "processing",
            "enum": [
              "processing",
              "processing_failed",
              "captured",
              "capture_pending",
              "capture_declined",
              "authorized",
              "authorization_pending",
              "authorization_declined",
              "authorization_expired",
              "authorization_voided",
              "refunded",
              "buyer_approval_pending",
              "buyer_approval_declined",
              "buyer_approval_timedout",
              "buyer_approved"
            ]
          },
          "amount": {
            "type": "number",
            "description": "The currency amount captured by this transaction.",
            "example": 1299,
            "minimum": 0.000001,
            "maximum": 99999999
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "The currency code for this transaction."
          },
          "payment_method": {
            "x-model-name": "PaymentMethod",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Card"
              },
              {
                "$ref": "#/components/schemas/PayPal"
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "The date and time when this transaction was created in our system.",
            "format": "date-time",
            "example": "2013-07-16T19:23:00.000+00:00"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Defines when the transaction was last updated."
          },
          "payment_service": {
            "$ref": "#/components/schemas/PaymentService"
          },
          "environment": {
            "type": "string",
            "example": "production",
            "default": "production",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "description": "The environment this transaction has been created in."
          }
        }
      },
      "Transactions": {
        "title": "Transactions",
        "description": "A list of transactions.",
        "type": "object",
        "x-tags": [
          "Transactions"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "A list of transactions.",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "limit": {
            "type": "integer",
            "description": "The limit applied to request. This represents the number of items that are at\nmaximum returned by this request.",
            "format": "int32",
            "minimum": 1,
            "maximum": 500,
            "example": 1,
            "default": 20
          },
          "next_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": "ZXhhbXBsZTE",
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          },
          "previous_cursor": {
            "type": "string",
            "description": "The cursor that represents the next page of results. Use the `cursor` query\nparameter to fetch this page of items.",
            "example": null,
            "nullable": true,
            "minLength": 1,
            "maxLength": 1000
          }
        }
      },
      "TransactionsBatchCaptureRequest": {
        "title": "Batch Capture (Create)",
        "type": "object",
        "description": "A request to capture multiple previously authorized transactions.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "amount",
          "currency",
          "transaction_id"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The (partial) amount to capture.\n\nWhen left blank, this will capture the entire amount.",
            "minimum": 0.000001,
            "maximum": 99999999,
            "example": 1299
          },
          "currency": {
            "type": "string",
            "description": "A supported ISO-4217 currency code.\n",
            "example": "USD"
          },
          "external_identifier": {
            "type": "string",
            "example": "user-789123",
            "description": "An external identifier that can be used to match the transaction against your own records."
          },
          "transaction_id": {
            "type": "string",
            "description": "The ID of the transaction to capture."
          }
        }
      },
      "TransactionRequest": {
        "title": "Transaction (Create)",
        "type": "object",
        "description": "A request to create a transaction.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "amount",
          "currency",
          "payment_method"
        ],
        "properties": {
          "amount": {
            "description": "The monetary amount to create an authorization for, in the smallest\ncurrency unit for the given currency, for example `1299` cents to create\nan authorization for `$12.99`.\n\nFor BitCoin, this value will be a decimal point number, for example\n`0.0039`.",
            "type": "number",
            "example": 1299
          },
          "currency": {
            "type": "string",
            "example": "USD",
            "description": "A supported ISO-4217 currency code."
          },
          "payment_method": {
            "x-model-name": "TransactionPaymentMethodRequest",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CardRequest"
              },
              {
                "$ref": "#/components/schemas/PayPalRequest"
              },
              {
                "$ref": "#/components/schemas/TokenizedRequest"
              }
            ],
            "description": "The optional payment method details to create an authorization for. This field is required for processing a card."
          },
          "store": {
            "type": "boolean",
            "description": "Whether or not to also try and store the payment method with us so that\nit can be used again for future use. This is only supported for payment\nmethods that support this feature.",
            "example": true,
            "default": false
          },
          "intent": {
            "type": "string",
            "description": "Defines the intent of this API call. This determines the desired initial\nstate of the transaction.\n\n* `approve` - Captures approval for the transaction from the user but does\nnot authorize it. This is only available to payment methods that require\nexplicit approval, like PayPal.\n* `authorize` - (Default) Optionally approves and then authorizes a\ntransaction but does not capture the funds.\n* `capture` - Optionally approves and then authorizes and captures the\nfunds of the transaction.",
            "default": "authorize",
            "example": "capture",
            "enum": [
              "approve",
              "authorize",
              "capture"
            ]
          },
          "external_identifier": {
            "type": "string",
            "example": "user-789123",
            "description": "An external identifier that can be used to match the transaction against your own records.",
            "nullable": true
          },
          "environment": {
            "type": "string",
            "description": "Defines the environment to create this transaction in. Setting this to\nanything other than `production` will force Gr4vy to use the payment\na service configured for that environment.",
            "enum": [
              "development",
              "staging",
              "production"
            ],
            "example": "staging"
          }
        }
      },
      "TransactionCaptureRequest": {
        "title": "Capture a transaction",
        "type": "object",
        "description": "A request to capture a transaction.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "amount",
          "currency"
        ],
        "properties": {
          "amount": {
            "type": "number",
            "description": "The (partial) amount to capture.\n\nWhen left blank, this will capture the entire amount.",
            "minimum": 0.000001,
            "maximum": 99999999,
            "example": 1299
          },
          "currency": {
            "type": "string",
            "description": "A supported ISO-4217 currency code.\n",
            "example": "USD"
          },
          "external_identifier": {
            "type": "string",
            "example": "user-789123",
            "description": "An external identifier that can be used to match the transaction against your own records."
          }
        }
      },
      "TransactionPaymentMethodRequest": {
        "title": "Transaction payment method request",
        "type": "object",
        "description": "Payment method details to use in a transaction or to register\na new payment method.",
        "x-tags": [
          "Request Bodies"
        ],
        "required": [
          "method"
        ],
        "properties": {
          "method": {
            "type": "string",
            "description": "The method to use for this request.",
            "example": "card",
            "enum": [
              "card",
              "paypal",
              "token"
            ]
          },
          "number": {
            "type": "string",
            "minLength": 14,
            "maxLength": 16,
            "example": "4111111111111111",
            "pattern": "^[0-9]{14,16}$",
            "description": "The 15-16 digit number for this credit card as it can be found on the\nfront of the card.\n\nIf a card has been stored with us previously, this number will represent\nthe unique tokenized card ID provided via our API."
          },
          "expiration_date": {
            "type": "string",
            "description": "The expiration date of the card, formatted `MM/YY`. If a card has been\npreviously stored with us this value is optional.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "example": "11/15",
            "pattern": "^\\d\\d/\\d\\d$",
            "minLength": 5,
            "maxLength": 5
          },
          "security_code": {
            "type": "string",
            "description": "The 3 or 4 digit security code often found on the card. This often\nreferred to as the CVV or CVD.\n\nIf the `number` of this card represents a tokenized card, then this value\nis ignored.",
            "pattern": "^\\d{3,4}$",
            "minLength": 3,
            "maxLength": 4,
            "example": "123"
          },
          "external_identifier": {
            "type": "string",
            "description": "An external identifier that can be used to match the card against your own records.",
            "example": "user-789123",
            "nullable": true
          },
          "buyer_id": {
            "type": "string",
            "format": "uuid",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The ID of the buyer to associate this payment method to. If this field is\nprovided then the `buyer_external_identifier` field needs to be unset."
          },
          "buyer_external_identifier": {
            "type": "string",
            "description": "The `external_identifier` of the buyer to associate this payment method\nto. If this field is provided then the `buyer_id` field\nneeds to be unset.",
            "example": "user-789123"
          },
          "redirect_url": {
            "type": "string",
            "format": "uri",
            "description": "The redirect URL to redirect a buyer to after they have authorized their\ntransaction or payment method. This only applies to payment methods that\nrequire buyer approval.",
            "example": "https://example.com/callback"
          },
          "token": {
            "type": "string",
            "description": "A Gr4vy token that represents a previously tokenized payment method.\nThis token can represent any type of payment method.",
            "example": "77a76f7e-d2de-4bbc-ada9-d6a0015e6bd5"
          }
        }
      },
      "User": {
        "title": "User",
        "type": "object",
        "x-tags": [
          "Users"
        ],
        "x-internal": true,
        "properties": {
          "type": {
            "type": "string",
            "description": "`user`.",
            "example": "user",
            "enum": [
              "user"
            ]
          },
          "id": {
            "type": "string",
            "example": "fe26475d-ec3e-4884-9553-f7356683f7f9",
            "description": "The unique Gr4vy ID for this user."
          },
          "name": {
            "type": "string",
            "description": "The full name of this user.",
            "example": "John Gravy"
          },
          "email_adress": {
            "type": "string",
            "description": "The email address for this user.",
            "example": "john@example.com"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}